{"remainingRequest":"D:\\TutorsClubBitBucket\\tutorsclubweb\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js??ref--8-1!D:\\TutorsClubBitBucket\\tutorsclubweb\\node_modules\\@alyle\\ui\\icon\\esm5\\alyle-ui-icon.js","dependencies":[{"path":"D:\\TutorsClubBitBucket\\tutorsclubweb\\node_modules\\@alyle\\ui\\icon\\esm5\\alyle-ui-icon.js","mtime":1533191670934},{"path":"D:\\TutorsClubBitBucket\\tutorsclubweb\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1533191679839},{"path":"D:\\TutorsClubBitBucket\\tutorsclubweb\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js","mtime":1533191671924}],"contextDependencies":[],"result":["import { Injectable, Optional, Inject, NgModule, Directive, Input, Renderer2, ElementRef, defineInjectable, inject } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { DOCUMENT, CommonModule } from '@angular/common';\nimport { map, share, take } from 'rxjs/operators';\nimport { LyTheme, ProvidedInTheme, Platform, AlyleUIModule } from '@alyle/ui';\nvar LyIconService = /** @class */ /*@__PURE__*/ (function () {\n    function LyIconService(http, document) {\n        this.http = http;\n        this.document = document;\n        this.svgMap = new Map();\n    }\n    LyIconService.prototype.setSvg = function (key, url) {\n        var _this = this;\n        if (!this.svgMap.has(key)) {\n            url = url + \".svg\";\n            this.svgMap.set(key, {\n                obs: this.http.get(url, { responseType: 'text' })\n                    .pipe(share(), map(function (svgText) { return _this.textToSvg(svgText); }))\n            });\n        }\n    };\n    LyIconService.prototype.textToSvg = function (str) {\n        var div = this.document.createElement('DIV');\n        div.innerHTML = str;\n        var svg = (div.querySelector('svg'));\n        return svg;\n    };\n    LyIconService.prototype.getSvg = function (key) {\n        return this.svgMap.get(key);\n    };\n    LyIconService.ngInjectableDef = defineInjectable({ factory: function LyIconService_Factory() { return new LyIconService(inject(HttpClient), inject(DOCUMENT, 8)); }, token: LyIconService, providedIn: \"root\" });\n    return LyIconService;\n}());\nvar LyIconStyle = /** @class */ /*@__PURE__*/ (function () { function LyIconStyle(theme) {\n    var _this = this;\n    this.theme = theme;\n    this.classes = {\n        root: this.theme.setStyle('root', function () {\n            return (\"font-size:\" + _this.theme.palette[\"icon\"].fontSize + \";\" +\n                \"width:1em;\" +\n                \"height:1em;\" +\n                \"display:inline-flex;\");\n        }),\n        svg: this.theme.setRootStyle('_svg', function () {\n            return (\"width:inherit;\" +\n                \"height:inherit;\" +\n                \"fill:currentColor;\");\n        })\n    };\n} LyIconStyle.ngInjectableDef = defineInjectable({ factory: function LyIconStyle_Factory() { return new LyIconStyle(inject(LyTheme)); }, token: LyIconStyle, providedIn: AlyleUIModule }); return LyIconStyle; }());\nvar Icon = /** @class */ /*@__PURE__*/ (function () {\n    function Icon(iconService, elementRef, renderer, iconStyle) {\n        this.iconService = iconService;\n        this.elementRef = elementRef;\n        this.renderer = renderer;\n        this.iconStyle = iconStyle;\n        this._defaultClass = 'material-icons';\n        renderer.addClass(elementRef.nativeElement, this.iconStyle.classes.root);\n    }\n    Object.defineProperty(Icon.prototype, \"src\", {\n        get: function () {\n            return this._src;\n        },\n        set: function (val) {\n            this._src = val;\n            if (Platform.isBrowser) {\n                if (val) {\n                    var key = \"_url:\" + val;\n                    this.iconService.setSvg(key, val);\n                    this._prepareSvgIcon(this.iconService.getSvg(key));\n                }\n            }\n            else {\n                this._appendDefaultSvgIcon();\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Icon.prototype, \"icon\", {\n        get: function () {\n            return this._icon;\n        },\n        set: function (val) {\n            this._icon = val;\n            if (Platform.isBrowser) {\n                this._prepareSvgIcon(this.iconService.getSvg(val));\n            }\n            else {\n                this._appendDefaultSvgIcon();\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Icon.prototype._isDefault = function () {\n        return !(this.src || this.icon);\n    };\n    Icon.prototype._prepareSvgIcon = function (svgIcon) {\n        var _this = this;\n        svgIcon.obs\n            .pipe(take(1))\n            .subscribe(function (svgElement) {\n            _this._cleanIcon();\n            _this._appendChild(svgElement);\n        });\n    };\n    Icon.prototype._appendChild = function (svg) {\n        svg.classList.add(this.iconStyle.classes.svg);\n        this.renderer.appendChild(this.elementRef.nativeElement, svg);\n    };\n    Icon.prototype._appendDefaultSvgIcon = function () {\n        this._appendChild(this.iconService.textToSvg('<svg viewBox=\"0 0 20 20\"><circle cx=\"10\" cy=\"10\" r=\"10\"></circle></svg>'));\n    };\n    Icon.prototype._updateClass = function () {\n        if (this._isDefault()) {\n            this.renderer.addClass(this.elementRef.nativeElement, this._defaultClass);\n        }\n    };\n    Icon.prototype.ngOnInit = function () { this._updateClass(); };\n    Icon.prototype.ngOnChanges = function (changes) {\n        this._updateClass();\n    };\n    Icon.prototype._cleanIcon = function () {\n        var icon = this.elementRef.nativeElement.querySelector('svg');\n        if (icon) {\n            this.renderer.removeChild(this.elementRef, icon);\n        }\n    };\n    return Icon;\n}());\nvar LyIconModule = /** @class */ /*@__PURE__*/ (function () {\n    function LyIconModule() {\n    }\n    return LyIconModule;\n}());\nexport { LyIconModule, LyIconService, LyIconStyle, Icon };\n//# sourceMappingURL=alyle-ui-icon.js.map\n",null]}