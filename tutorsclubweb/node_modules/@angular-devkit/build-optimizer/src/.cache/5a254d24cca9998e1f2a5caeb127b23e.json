{"remainingRequest":"D:\\TutorsClubBitBucket\\tutorsclubweb\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js??ref--8-1!D:\\TutorsClubBitBucket\\tutorsclubweb\\node_modules\\@alyle\\ui\\resizing-cropping-images\\esm5\\alyle-ui-resizing-cropping-images.js","dependencies":[{"path":"D:\\TutorsClubBitBucket\\tutorsclubweb\\node_modules\\@alyle\\ui\\resizing-cropping-images\\esm5\\alyle-ui-resizing-cropping-images.js","mtime":1533191670959},{"path":"D:\\TutorsClubBitBucket\\tutorsclubweb\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1533191679839},{"path":"D:\\TutorsClubBitBucket\\tutorsclubweb\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js","mtime":1533191671924}],"contextDependencies":[],"result":["import { __spread } from 'tslib';\nimport { Component, ElementRef, Input, Output, ChangeDetectionStrategy, ChangeDetectorRef, ViewChild, EventEmitter, NgModule } from '@angular/core';\nimport { BehaviorSubject, Subject } from 'rxjs';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\nvar ImageResolution = /*@__PURE__*/ (function () {\n    var ImageResolution = {\n        Default: 0,\n        OriginalImage: 1,\n    };\n    ImageResolution[ImageResolution.Default] = \"Default\";\n    ImageResolution[ImageResolution.OriginalImage] = \"OriginalImage\";\n    return ImageResolution;\n}());\nvar CONFIG_DEFAULT = ({\n    width: 250,\n    height: 200,\n    output: ImageResolution.Default\n});\nvar LyResizingCroppingImages = /** @class */ /*@__PURE__*/ (function () {\n    function LyResizingCroppingImages(elementRef, cd) {\n        var _this = this;\n        this.elementRef = elementRef;\n        this.cd = cd;\n        this.img = new BehaviorSubject(null);\n        this._src = new BehaviorSubject(null);\n        this.config = CONFIG_DEFAULT;\n        this.loaded = new EventEmitter();\n        this.cropped = new EventEmitter();\n        this.error = new EventEmitter();\n        this._dragData = new Subject();\n        this.zoomScale = .1;\n        this.dragData = this._dragData.asObservable();\n        var img = this.img;\n        img.subscribe(function (imgElement) {\n            if (imgElement) {\n                _this._img = imgElement;\n                var minScale = {\n                    width: _this.config.width / _this._img.width * 100,\n                    height: _this.config.height / _this._img.height * 100\n                };\n                _this.zoomScale = Math.max(minScale.width, minScale.height) / 100;\n                _this.fit();\n                _this.cd.markForCheck();\n            }\n        });\n    }\n    LyResizingCroppingImages.prototype.selectInputEvent = function (img) {\n        var _this = this;\n        var _img = (img.target);\n        if (_img.files.length !== 1) {\n            return;\n        }\n        var fileReader = new FileReader();\n        this.fileName = _img.value.replace(/.*(\\/|\\\\)/, '');\n        this.defaultType = null;\n        if (!this.config.type) {\n            this.defaultType = _img.files[0].type;\n        }\n        this.isLoaded = false;\n        this.isCropped = false;\n        this._dragData.next(null);\n        fileReader.addEventListener('loadend', function (loadEvent) {\n            var originalImageUrl = ((loadEvent.target)).result;\n            _this.setImageUrl(originalImageUrl);\n            _this.cd.markForCheck();\n        });\n        fileReader.readAsDataURL(_img.files[0]);\n    };\n    LyResizingCroppingImages.prototype.fixedNum = function (num) {\n        return parseFloat(num.toFixed(0));\n    };\n    LyResizingCroppingImages.prototype.setScale = function (size) {\n        console.log('setScale', size);\n        this.scale = size;\n        size = size * 100;\n        var img = this.imgContainer.nativeElement.firstElementChild;\n        var initialImg = this._img;\n        var width = this.fixedNum(initialImg.width * size / 100);\n        var height = this.fixedNum(initialImg.height * size / 100);\n        this._dragData.next({\n            width: width + \"px\",\n            height: height + \"px\",\n            transform: this.customCenter(width, height)\n        });\n    };\n    LyResizingCroppingImages.prototype.customCenter = function (width, height) {\n        var root = (this.elementRef.nativeElement);\n        var w = (root.offsetWidth - width) / 2;\n        var h = (root.offsetHeight - height) / 2;\n        return \"translate3d(\" + w + \"px, \" + h + \"px, 0)\";\n    };\n    LyResizingCroppingImages.prototype['1:1'] = function () {\n        this.setScale(1);\n    };\n    LyResizingCroppingImages.prototype.fitToScreen = function () {\n        var container = (this.elementRef.nativeElement);\n        var min = {\n            width: container.offsetWidth,\n            height: container.offsetHeight\n        };\n        var size = {\n            width: this._img.width,\n            height: this._img.height\n        };\n        var minScale = {\n            width: min.width / size.width * 100,\n            height: min.height / size.height * 100\n        };\n        var result = Math.max(minScale.width, minScale.height) / 100;\n        this.setScale(result);\n    };\n    LyResizingCroppingImages.prototype.fit = function () {\n        var minScale = {\n            width: this.config.width / this._img.width * 100,\n            height: this.config.height / this._img.height * 100\n        };\n        this.setScale(Math.max(minScale.width, minScale.height) / 100);\n    };\n    LyResizingCroppingImages.prototype._moveStart = function (event) {\n        this.eventDirection = null;\n        var rect = this.imgContainer.nativeElement.getBoundingClientRect();\n        var hostRect = this.elementRef.nativeElement.getBoundingClientRect();\n        var target;\n        if (event.type === 'touchstart') {\n            target = {\n                x: event.targetTouches[0].clientX,\n                y: event.targetTouches[0].clientY\n            };\n        }\n        else {\n            target = {\n                x: event.clientX,\n                y: event.clientY\n            };\n        }\n        this.offset = {\n            x: target.x - rect.x,\n            y: target.y - rect.y,\n            left: ((rect)).left - hostRect.x,\n            top: ((rect)).top - hostRect.y\n        };\n    };\n    LyResizingCroppingImages.prototype._move = function (event) {\n        if (event.additionalEvent) {\n            this.eventDirection = event.additionalEvent;\n        }\n        var x, y;\n        var hostRect = this.elementRef.nativeElement.getBoundingClientRect();\n        var rect = this.imgContainer.nativeElement.getBoundingClientRect();\n        if (event.srcEvent.shiftKey) {\n            if (Math.abs(event.deltaX) === Math.max(Math.abs(event.deltaX), Math.abs(event.deltaY))) {\n                y = this.offset.top;\n            }\n            else {\n                x = this.offset.left;\n            }\n        }\n        if (x === undefined) {\n            x = event.center.x - hostRect.x - (this.offset.x);\n        }\n        if (y === undefined) {\n            y = event.center.y - hostRect.y - (this.offset.y);\n        }\n        this._dragData.next({\n            width: this.imgContainer.nativeElement.offsetWidth,\n            height: this.imgContainer.nativeElement.offsetHeight,\n            transform: \"translate3d(\" + x + \"px, \" + y + \"px, 0)\"\n        });\n    };\n    LyResizingCroppingImages.prototype.roundNumber = function (num) {\n        return Math.round(num * 100000) / 100000;\n    };\n    LyResizingCroppingImages.prototype.zoomIn = function () {\n        var scale = this.roundNumber(this.scale + .05);\n        if (scale > 0 && scale <= 1) {\n            this.setScale(scale);\n        }\n        else {\n            this.setScale(1);\n        }\n    };\n    LyResizingCroppingImages.prototype.zoomOut = function () {\n        var scale = this.roundNumber(this.scale - .05);\n        if (scale > this.zoomScale && scale <= 1) {\n            this.setScale(scale);\n        }\n        else {\n            this.fit();\n        }\n    };\n    LyResizingCroppingImages.prototype.ngAfterContentInit = function () {\n        this.setImageUrl(this.src);\n    };\n    LyResizingCroppingImages.prototype.center = function (img) {\n        if (!img) {\n            img = this.imgContainer.nativeElement.firstElementChild;\n        }\n        var root = (this.elementRef.nativeElement);\n        var w = (root.offsetWidth - img.width) / 2;\n        var h = (root.offsetHeight - img.height) / 2;\n        var result = {\n            width: img.width + \"px\",\n            height: img.height + \"px\",\n            transform: this.customCenter(img.width, img.height)\n        };\n        this._dragData.next(result);\n    };\n    LyResizingCroppingImages.prototype.setImageUrl = function (src) {\n        var _this = this;\n        this.src = src;\n        if (!src) {\n            return;\n        }\n        var img = new Image;\n        img.src = src;\n        img.addEventListener('error', function (err) {\n            _this.error.emit(null);\n        });\n        img.addEventListener('load', function () {\n            _this.img.next(img);\n            _this.loaded.emit(null);\n            _this.isLoaded = true;\n            _this.cd.markForCheck();\n        });\n    };\n    LyResizingCroppingImages.prototype.max = function () {\n        var values = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            values[_i] = arguments[_i];\n        }\n        return Math.max.apply(Math, __spread(values));\n    };\n    LyResizingCroppingImages.prototype.imageSmoothingQuality = function (img, config, quality) {\n        var numSteps = Math.ceil(Math.log(this.max(img.width, img.height) / this.max(config.height, config.width)) / Math.log(2)) - 1;\n        numSteps = numSteps <= 0 ? 0 : numSteps;\n        var steps = Array.from(Array(numSteps).keys());\n        var octx = img.getContext('2d');\n        var q = Math.pow(quality * 10, numSteps) / Math.pow(10, numSteps);\n        if (numSteps) {\n            var w_1 = img.width * quality;\n            var h_1 = img.height * quality;\n            octx.globalCompositeOperation = 'copy';\n            ((steps)).forEach(function (a, b) {\n                octx.drawImage(img, 0, 0, w_1, h_1);\n            });\n        }\n        var oc = document.createElement('canvas'), ctx = oc.getContext('2d');\n        oc.width = config.width;\n        oc.height = config.height;\n        ctx.drawImage(img, 0, 0, img.width * (q), img.height * (q), 0, 0, oc.width, oc.height);\n        return oc;\n    };\n    LyResizingCroppingImages.prototype.crop = function () {\n        return {\n            base64Image: this.cropp(),\n            type: this.defaultType || this.config.type\n        };\n    };\n    LyResizingCroppingImages.prototype.cropp = function () {\n        var myConfig = Object.assign({}, CONFIG_DEFAULT, this.config);\n        var canvasElement = document.createElement('canvas');\n        var rect = (this.croppingContainer.nativeElement.getBoundingClientRect());\n        var img = (this.imgContainer.nativeElement.firstElementChild.getBoundingClientRect());\n        var left = (rect.left - img.left);\n        var top = (rect.top - img.top);\n        var config = {\n            width: myConfig.width,\n            height: myConfig.height\n        };\n        var configCanvas = {\n            width: this._img.width,\n            height: this._img.height\n        };\n        canvasElement.width = config.width / this.scale;\n        canvasElement.height = config.height / this.scale;\n        var ctx = canvasElement.getContext('2d');\n        ctx.drawImage(this._img, -(left / this.scale), -(top / this.scale));\n        var result = canvasElement;\n        if (myConfig.output === 0) {\n            result = this.imageSmoothingQuality(result, config, 0.5);\n        }\n        else if (typeof myConfig.output === 'object') {\n            result = this.imageSmoothingQuality(result, myConfig.output, 0.5);\n        }\n        var url;\n        if (myConfig.type) {\n            url = result.toDataURL(\"image/\" + myConfig.type);\n        }\n        else {\n            url = result.toDataURL(this.defaultType);\n        }\n        this.result = (url);\n        this.cropped.emit({\n            base64Image: url,\n            type: this.defaultType || myConfig.type\n        });\n        this.isCropped = true;\n        return url;\n    };\n    return LyResizingCroppingImages;\n}());\nvar LyResizingCroppingImageModule = /** @class */ /*@__PURE__*/ (function () {\n    function LyResizingCroppingImageModule() {\n    }\n    return LyResizingCroppingImageModule;\n}());\nexport { ImageResolution, LyResizingCroppingImages, LyResizingCroppingImageModule };\n//# sourceMappingURL=alyle-ui-resizing-cropping-images.js.map\n",null]}