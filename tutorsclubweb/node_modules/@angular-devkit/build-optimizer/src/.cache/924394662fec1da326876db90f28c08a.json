{"remainingRequest":"D:\\TutorsClubBitBucket\\tutorsclubweb\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js??ref--8-1!D:\\TutorsClubBitBucket\\tutorsclubweb\\node_modules\\ngx-moment\\esm5\\ngx-moment.js","dependencies":[{"path":"D:\\TutorsClubBitBucket\\tutorsclubweb\\node_modules\\ngx-moment\\esm5\\ngx-moment.js","mtime":1530442011000},{"path":"D:\\TutorsClubBitBucket\\tutorsclubweb\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1533191679839},{"path":"D:\\TutorsClubBitBucket\\tutorsclubweb\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js","mtime":1533191671924}],"contextDependencies":[],"result":["import { Pipe, ChangeDetectorRef, EventEmitter, NgZone, NgModule } from '@angular/core';\nimport * as moment from 'moment';\nimport { isMoment, duration, unix, isDate, utc, parseZone } from 'moment';\nvar momentConstructor = moment;\nvar AddPipe = /** @class */ /*@__PURE__*/ (function () {\n    function AddPipe() {\n    }\n    AddPipe.prototype.transform = function (value, amount, unit) {\n        if (typeof amount === 'undefined' || (typeof amount === 'number' && typeof unit === 'undefined')) {\n            throw new Error('AddPipe: missing required arguments');\n        }\n        return momentConstructor(value).add(amount, unit);\n    };\n    return AddPipe;\n}());\nvar momentConstructor$1 = moment;\nvar CalendarPipe = /** @class */ /*@__PURE__*/ (function () {\n    function CalendarPipe(cdRef, ngZone) {\n        var _this = this;\n        this.cdRef = cdRef;\n        this.ngZone = ngZone;\n        CalendarPipe.initTimer(ngZone);\n        CalendarPipe.refs++;\n        this.midnightSub = CalendarPipe.midnight.subscribe(function () {\n            _this.ngZone.run(function () { return _this.cdRef.markForCheck(); });\n        });\n    }\n    CalendarPipe.prototype.transform = function (value) {\n        var args = [];\n        for (var _i = 1; _i < arguments.length; _i++) {\n            args[_i - 1] = arguments[_i];\n        }\n        var formats = null;\n        var referenceTime = null;\n        for (var i = 0, len = args.length; i < len; i++) {\n            if (args[i] !== null) {\n                if (typeof args[i] === 'object' && !isMoment(args[i])) {\n                    formats = args[i];\n                }\n                else {\n                    referenceTime = momentConstructor$1(args[i]);\n                }\n            }\n        }\n        return momentConstructor$1(value).calendar(referenceTime, formats);\n    };\n    CalendarPipe.prototype.ngOnDestroy = function () {\n        if (CalendarPipe.refs > 0) {\n            CalendarPipe.refs--;\n        }\n        if (CalendarPipe.refs === 0) {\n            CalendarPipe.removeTimer();\n        }\n        this.midnightSub.unsubscribe();\n    };\n    CalendarPipe.initTimer = function (ngZone) {\n        if (!CalendarPipe.midnight) {\n            CalendarPipe.midnight = new EventEmitter();\n            if (typeof window !== 'undefined') {\n                var timeToUpdate_1 = CalendarPipe._getMillisecondsUntilUpdate();\n                CalendarPipe.timer = ngZone.runOutsideAngular(function () {\n                    return window.setTimeout(function () {\n                        CalendarPipe.midnight.emit(new Date());\n                        CalendarPipe.removeTimer();\n                        CalendarPipe.initTimer(ngZone);\n                    }, timeToUpdate_1);\n                });\n            }\n        }\n    };\n    CalendarPipe.removeTimer = function () {\n        if (CalendarPipe.timer) {\n            window.clearTimeout(CalendarPipe.timer);\n            CalendarPipe.timer = null;\n            CalendarPipe.midnight = null;\n        }\n    };\n    CalendarPipe._getMillisecondsUntilUpdate = function () {\n        var now = momentConstructor$1();\n        var tomorrow = momentConstructor$1().startOf('day').add(1, 'days');\n        var timeToMidnight = tomorrow.valueOf() - now.valueOf();\n        return timeToMidnight + 1000;\n    };\n    CalendarPipe.refs = 0;\n    CalendarPipe.timer = null;\n    CalendarPipe.midnight = null;\n    return CalendarPipe;\n}());\nvar momentConstructor$2 = moment;\nvar DateFormatPipe = /** @class */ /*@__PURE__*/ (function () {\n    function DateFormatPipe() {\n    }\n    DateFormatPipe.prototype.transform = function (value) {\n        var args = [];\n        for (var _i = 1; _i < arguments.length; _i++) {\n            args[_i - 1] = arguments[_i];\n        }\n        if (!value) {\n            return '';\n        }\n        return momentConstructor$2(value).format(args[0]);\n    };\n    return DateFormatPipe;\n}());\nvar momentConstructor$3 = moment;\nvar DifferencePipe = /** @class */ /*@__PURE__*/ (function () {\n    function DifferencePipe() {\n    }\n    DifferencePipe.prototype.transform = function (value, otherValue, unit, precision) {\n        var date = momentConstructor$3(value);\n        var date2 = (otherValue !== null) ? momentConstructor$3(otherValue) : momentConstructor$3();\n        return date.diff(date2, unit, precision);\n    };\n    return DifferencePipe;\n}());\nvar DurationPipe = /** @class */ /*@__PURE__*/ (function () {\n    function DurationPipe() {\n    }\n    DurationPipe.prototype.transform = function (value) {\n        var args = [];\n        for (var _i = 1; _i < arguments.length; _i++) {\n            args[_i - 1] = arguments[_i];\n        }\n        if (typeof args === 'undefined' || args.length !== 1) {\n            throw new Error('DurationPipe: missing required time unit argument');\n        }\n        return duration(value, (args[0])).humanize();\n    };\n    return DurationPipe;\n}());\nvar FromUnixPipe = /** @class */ /*@__PURE__*/ (function () {\n    function FromUnixPipe() {\n    }\n    FromUnixPipe.prototype.transform = function (value) {\n        var args = [];\n        for (var _i = 1; _i < arguments.length; _i++) {\n            args[_i - 1] = arguments[_i];\n        }\n        if (typeof value === 'string') {\n            value = +value;\n        }\n        return unix(value);\n    };\n    return FromUnixPipe;\n}());\nvar momentConstructor$4 = moment;\nvar ParsePipe = /** @class */ /*@__PURE__*/ (function () {\n    function ParsePipe() {\n    }\n    ParsePipe.prototype.transform = function (value, format) {\n        return momentConstructor$4(value, format);\n    };\n    return ParsePipe;\n}());\nvar momentConstructor$5 = moment;\nvar SubtractPipe = /** @class */ /*@__PURE__*/ (function () {\n    function SubtractPipe() {\n    }\n    SubtractPipe.prototype.transform = function (value, amount, unit) {\n        if (typeof amount === 'undefined' || (typeof amount === 'number' && typeof unit === 'undefined')) {\n            throw new Error('SubtractPipe: missing required arguments');\n        }\n        return momentConstructor$5(value).subtract(amount, unit);\n    };\n    return SubtractPipe;\n}());\nvar momentConstructor$6 = moment;\nvar TimeAgoPipe = /** @class */ /*@__PURE__*/ (function () {\n    function TimeAgoPipe(cdRef, ngZone) {\n        this.cdRef = cdRef;\n        this.ngZone = ngZone;\n    }\n    TimeAgoPipe.prototype.transform = function (value, omitSuffix) {\n        if (this.hasChanged(value, omitSuffix)) {\n            this.lastTime = this.getTime(value);\n            this.lastValue = value;\n            this.lastOmitSuffix = omitSuffix;\n            this.lastLocale = this.getLocale(value);\n            this.removeTimer();\n            this.createTimer();\n            this.lastText = momentConstructor$6(value).from(momentConstructor$6(), omitSuffix);\n        }\n        else {\n            this.createTimer();\n        }\n        return this.lastText;\n    };\n    TimeAgoPipe.prototype.ngOnDestroy = function () {\n        this.removeTimer();\n    };\n    TimeAgoPipe.prototype.createTimer = function () {\n        var _this = this;\n        if (this.currentTimer) {\n            return;\n        }\n        var momentInstance = momentConstructor$6(this.lastValue);\n        var timeToUpdate = this.getSecondsUntilUpdate(momentInstance) * 1000;\n        this.currentTimer = this.ngZone.runOutsideAngular(function () {\n            if (typeof window !== 'undefined') {\n                return window.setTimeout(function () {\n                    _this.lastText = momentConstructor$6(_this.lastValue).from(momentConstructor$6(), _this.lastOmitSuffix);\n                    _this.currentTimer = null;\n                    _this.ngZone.run(function () { return _this.cdRef.markForCheck(); });\n                }, timeToUpdate);\n            }\n        });\n    };\n    TimeAgoPipe.prototype.removeTimer = function () {\n        if (this.currentTimer) {\n            window.clearTimeout(this.currentTimer);\n            this.currentTimer = null;\n        }\n    };\n    TimeAgoPipe.prototype.getSecondsUntilUpdate = function (momentInstance) {\n        var howOld = Math.abs(momentConstructor$6().diff(momentInstance, 'minute'));\n        if (howOld < 1) {\n            return 1;\n        }\n        else if (howOld < 60) {\n            return 30;\n        }\n        else if (howOld < 180) {\n            return 300;\n        }\n        else {\n            return 3600;\n        }\n    };\n    TimeAgoPipe.prototype.hasChanged = function (value, omitSuffix) {\n        return this.getTime(value) !== this.lastTime\n            || this.getLocale(value) !== this.lastLocale\n            || omitSuffix !== this.lastOmitSuffix;\n    };\n    TimeAgoPipe.prototype.getTime = function (value) {\n        if (isDate(value)) {\n            return value.getTime();\n        }\n        else if (isMoment(value)) {\n            return value.valueOf();\n        }\n        else {\n            return momentConstructor$6(value).valueOf();\n        }\n    };\n    TimeAgoPipe.prototype.getLocale = function (value) {\n        return isMoment(value) ? value.locale() : null;\n    };\n    return TimeAgoPipe;\n}());\nvar momentConstructor$7 = moment;\nvar UtcPipe = /** @class */ /*@__PURE__*/ (function () {\n    function UtcPipe() {\n    }\n    UtcPipe.prototype.transform = function (value) {\n        return momentConstructor$7(value).utc();\n    };\n    return UtcPipe;\n}());\nvar FromUtcPipe = /** @class */ /*@__PURE__*/ (function () {\n    function FromUtcPipe() {\n    }\n    FromUtcPipe.prototype.transform = function (value) {\n        var args = [];\n        for (var _i = 1; _i < arguments.length; _i++) {\n            args[_i - 1] = arguments[_i];\n        }\n        return utc(value);\n    };\n    return FromUtcPipe;\n}());\nvar momentConstructor$8 = moment;\nvar LocalTimePipe = /** @class */ /*@__PURE__*/ (function () {\n    function LocalTimePipe() {\n    }\n    LocalTimePipe.prototype.transform = function (value) {\n        return momentConstructor$8(value).local();\n    };\n    return LocalTimePipe;\n}());\nvar momentConstructor$9 = moment;\nvar LocalePipe = /** @class */ /*@__PURE__*/ (function () {\n    function LocalePipe() {\n    }\n    LocalePipe.prototype.transform = function (value, locale) {\n        return momentConstructor$9(value).locale(locale);\n    };\n    return LocalePipe;\n}());\nvar ParseZonePipe = /** @class */ /*@__PURE__*/ (function () {\n    function ParseZonePipe() {\n    }\n    ParseZonePipe.prototype.transform = function (value) {\n        return parseZone(value);\n    };\n    return ParseZonePipe;\n}());\nvar ANGULAR_MOMENT_PIPES = [\n    AddPipe,\n    CalendarPipe,\n    DateFormatPipe,\n    DifferencePipe,\n    DurationPipe,\n    FromUnixPipe,\n    ParsePipe,\n    SubtractPipe,\n    TimeAgoPipe,\n    UtcPipe,\n    FromUtcPipe,\n    LocalTimePipe,\n    LocalePipe,\n    ParseZonePipe\n];\nvar MomentModule = /** @class */ /*@__PURE__*/ (function () {\n    function MomentModule() {\n    }\n    return MomentModule;\n}());\nexport { AddPipe, CalendarPipe, DateFormatPipe, DifferencePipe, DurationPipe, FromUnixPipe, ParsePipe, MomentModule, SubtractPipe, TimeAgoPipe, UtcPipe, FromUtcPipe, LocalTimePipe, LocalePipe, ParseZonePipe };\n//# sourceMappingURL=ngx-moment.js.map\n",null]}