{"remainingRequest":"D:\\TutorsClubBitBucket\\tutorsclubweb\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js??ref--8-1!D:\\TutorsClubBitBucket\\tutorsclubweb\\node_modules\\@alyle\\ui\\input\\esm5\\alyle-ui-input.js","dependencies":[{"path":"D:\\TutorsClubBitBucket\\tutorsclubweb\\node_modules\\@alyle\\ui\\input\\esm5\\alyle-ui-input.js","mtime":1533191670939},{"path":"D:\\TutorsClubBitBucket\\tutorsclubweb\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1533191679839},{"path":"D:\\TutorsClubBitBucket\\tutorsclubweb\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js","mtime":1533191671924}],"contextDependencies":[],"result":["import { Directive, ElementRef, HostListener, Input, Self, Optional, ChangeDetectorRef, Injectable, Component, NgModule, ContentChild, ChangeDetectionStrategy, HostBinding, Renderer2, defineInjectable, inject } from '@angular/core';\nimport { FormGroupDirective, NgControl, NgForm, FormsModule } from '@angular/forms';\nimport { Subject } from 'rxjs';\nimport { LyTheme, ProvidedInTheme, LyCommonModule, IsBoolean, toBoolean, LyBgColorAndRaised, AlyleUIModule } from '@alyle/ui';\nimport { CommonModule } from '@angular/common';\nvar LyInputContents = /** @class */ /*@__PURE__*/ (function () {\n    function LyInputContents() {\n    }\n    return LyInputContents;\n}());\nvar LyFieldDirective = /** @class */ /*@__PURE__*/ (function () {\n    function LyFieldDirective(elementRef, _ngControl, _parentForm, _parentFormGroup, cd) {\n        this.elementRef = elementRef;\n        this._ngControl = _ngControl;\n        this._parentForm = _parentForm;\n        this._parentFormGroup = _parentFormGroup;\n        this.cd = cd;\n        this.focusState = new Subject();\n        this._disabled = false;\n        this._required = false;\n    }\n    LyFieldDirective.prototype.focus = function (isFocused) {\n        this.focusState.next(isFocused);\n    };\n    LyFieldDirective.prototype._blur = function (isFocused) {\n        this.focusState.next(isFocused);\n    };\n    LyFieldDirective.prototype._noop = function () { };\n    Object.defineProperty(LyFieldDirective.prototype, \"disabled\", {\n        get: function () { return this._ngControl ? this._ngControl.disabled : this._disabled; },\n        set: function (value) { this._disabled = !!(value); },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(LyFieldDirective.prototype, \"required\", {\n        get: function () { return this._ngControl ? this._ngControl.invalid : this._required; },\n        set: function (value) { this._required = !!(value); },\n        enumerable: true,\n        configurable: true\n    });\n    LyFieldDirective.prototype.markForCheck = function () {\n        this.cd.markForCheck();\n    };\n    LyFieldDirective.prototype._parent = function () {\n        return this._parentFormGroup || this._parentForm;\n    };\n    LyFieldDirective.prototype._updateErrorState = function () {\n        var parent = this._parentFormGroup || this._parentForm;\n        var control = this._ngControl ? (this._ngControl.control) : null;\n    };\n    LyFieldDirective.prototype.ngOnChanges = function (changes) {\n    };\n    LyFieldDirective.prototype.ngOnDestroy = function () {\n        this.focusState.complete();\n    };\n    return LyFieldDirective;\n}());\nvar InputService = /** @class */ /*@__PURE__*/ (function () { function InputService(theme) {\n    this.theme = theme;\n    this.classes = {};\n} InputService.ngInjectableDef = defineInjectable({ factory: function InputService_Factory() { return new InputService(inject(LyTheme)); }, token: InputService, providedIn: AlyleUIModule }); return InputService; }());\nimport { __decorate } from \"tslib\";\nimport { __metadata } from \"tslib\";\nvar LyInputCommon = /** @class */ /*@__PURE__*/ (function () {\n    function LyInputCommon() {\n    }\n    return LyInputCommon;\n}());\nvar LyPlaceholder = /** @class */ /*@__PURE__*/ (function () {\n    function LyPlaceholder() {\n    }\n    return LyPlaceholder;\n}());\nvar LyDefault = /** @class */ /*@__PURE__*/ (function () {\n    function LyDefault() {\n    }\n    return LyDefault;\n}());\nvar LyLabel = /** @class */ /*@__PURE__*/ (function () {\n    function LyLabel() {\n    }\n    return LyLabel;\n}());\nvar LyInput = /** @class */ /*@__PURE__*/ (function () {\n    function LyInput(theme, _changeDetectorRef, inputService, bcr, renderer, elementRef) {\n        this.theme = theme;\n        this._changeDetectorRef = _changeDetectorRef;\n        this.inputService = inputService;\n        this._inputColor = 'primary';\n        this.changed = new Array();\n        this.touched = new Array();\n        this.type = 'text';\n        this._classes = {};\n    }\n    Object.defineProperty(LyInput.prototype, \"withColor\", {\n        get: function () {\n            return this._withColor;\n        },\n        set: function (val) {\n            this._withColor = val;\n            this.updateColor(val);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(LyInput.prototype, \"isFloatingLabel\", {\n        get: function () {\n            return this.currentValueState || this.labelAbove || this.isDefault || this.focusState;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(LyInput.prototype, \"placeholderState\", {\n        get: function () {\n            return !this.currentValueState && this.focusState || !this.currentValueState && !this.focusState && this.isFloatingLabel;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(LyInput.prototype, \"defaultOff\", {\n        get: function () {\n            return this.currentValue === this.default && !this.focusState || !this.currentValueState && !this.focusState;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(LyInput.prototype, \"disabled\", {\n        get: function () { return this._field.disabled; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(LyInput.prototype, \"required\", {\n        get: function () { return this._field.required; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(LyInput.prototype, \"currentValueState\", {\n        get: function () {\n            return (\"\" + this.currentValue).length !== 0 && this.currentValue != null;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    LyInput.prototype._valueBoolean = function (val) {\n        return !(val === null || val === undefined || val === false || val === '');\n    };\n    LyInput.prototype._isErrorState = function () {\n        if (this._field) {\n            return this._field._ngControl.invalid && this._field._ngControl.touched || this._errorState;\n        }\n    };\n    LyInput.prototype.updateError = function () {\n        this._errorState = this._field._ngControl.invalid;\n    };\n    LyInput.prototype.value = function () {\n        return this.currentValue;\n    };\n    LyInput.prototype.updateColor = function (val) {\n        var _this = this;\n        var inputColor = function () { return _this.theme.colorOf(val); };\n        this._classes.caretColor = this.theme.setStyle(\"input:caret\" + val, function () { return (\"caret-color:\" + inputColor()); });\n        this._classes.withColor = this.theme.setStyle(\"input:\" + val, function () {\n            return (\"color:\" + inputColor() + \";\" +\n                (\"background-color:\" + _this.theme.palette[\"input\"].underline + \";\"));\n        });\n    };\n    LyInput.prototype.toBoolean = function (val) {\n        return toBoolean(val);\n    };\n    Object.defineProperty(LyInput.prototype, \"isPlaceholder\", {\n        get: function () {\n            return toBoolean(this.placeholder) || !!this.lyPlaceholder;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(LyInput.prototype, \"isDefault\", {\n        get: function () {\n            return toBoolean(this.default) || !!this.lyDefault;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(LyInput.prototype, \"isLabel\", {\n        get: function () {\n            return toBoolean(this.label) || !!this.lyLabel;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    LyInput.prototype.ngOnInit = function () {\n        var _this = this;\n        if (!this.withColor) {\n            this.updateColor(this.theme.palette[\"input\"].withColor);\n        }\n        this.focusStateSuscription = this._field.focusState.subscribe(function (fState) {\n            _this.focusState = fState;\n        });\n        if (this._field._parent()) {\n            this._field._parent().ngSubmit.subscribe(function (submit) {\n                _this.updateError();\n            });\n        }\n    };\n    LyInput.prototype.ngAfterViewInit = function () {\n    };\n    LyInput.prototype.ngAfterContentInit = function () {\n        var _this = this;\n        if (this._field) {\n            this.currentValue = this._field._ngControl.value;\n            if (this._field._ngControl && this._field._ngControl.valueChanges) {\n                this._field._ngControl.valueChanges.subscribe(function (val) {\n                    _this.currentValue = val;\n                    _this._errorState = false;\n                    _this._changeDetectorRef.markForCheck();\n                });\n            }\n            this._field.focusState.subscribe(function (isFocused) {\n                if (_this.isDefault) {\n                    if (!_this.currentValueState) {\n                        _this.currentValue = _this.default;\n                        _this._field._ngControl.valueAccessor.writeValue(_this.default);\n                        _this._field._ngControl.viewToModelUpdate(_this.default);\n                    }\n                }\n                _this._field.markForCheck();\n                _this._changeDetectorRef.markForCheck();\n            });\n        }\n        else {\n            console.warn('LyInput: Require input native');\n        }\n    };\n    LyInput.prototype._shouldForward = function (prop) {\n        var control = this._field ? this._field._ngControl : null;\n        return control && ((control))[prop];\n    };\n    LyInput.prototype.ngOnChanges = function (changes) {\n        if (changes[\"default\"]) {\n            if (this.isDefault && !this.currentValueState) {\n                this.currentValue = this.default;\n                this._field._ngControl.viewToModelUpdate(this.default);\n            }\n        }\n    };\n    LyInput.prototype.ngOnDestroy = function () {\n        this.focusStateSuscription.unsubscribe();\n    };\n    return LyInput;\n}());\n__decorate([\n    IsBoolean(),\n    __metadata(\"design:type\", Boolean)\n], LyInput.prototype, \"labelAbove\", void 0);\nvar LyInputModule = /** @class */ /*@__PURE__*/ (function () {\n    function LyInputModule() {\n    }\n    return LyInputModule;\n}());\nexport { LyInputCommon, LyPlaceholder, LyDefault, LyLabel, LyInput, LyInputModule, LyInputContents, LyFieldDirective, InputService as ɵa };\n//# sourceMappingURL=alyle-ui-input.js.map\n",null]}