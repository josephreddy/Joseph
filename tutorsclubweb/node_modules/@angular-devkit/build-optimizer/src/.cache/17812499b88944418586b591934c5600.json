{"remainingRequest":"D:\\Integration\\TutorClubLatest(31-07-2018)\\TutorClubLatest(31-07-2018)\\TrainersClub\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js??ref--8-1!D:\\Integration\\TutorClubLatest(31-07-2018)\\TutorClubLatest(31-07-2018)\\TrainersClub\\node_modules\\ng2-timezone-selector\\ng2-timezone-selector.umd.js","dependencies":[{"path":"D:\\Integration\\TutorClubLatest(31-07-2018)\\TutorClubLatest(31-07-2018)\\TrainersClub\\node_modules\\ng2-timezone-selector\\ng2-timezone-selector.umd.js","mtime":1524006334000},{"path":"D:\\Integration\\TutorClubLatest(31-07-2018)\\TutorClubLatest(31-07-2018)\\TrainersClub\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1531986122000},{"path":"D:\\Integration\\TutorClubLatest(31-07-2018)\\TutorClubLatest(31-07-2018)\\TrainersClub\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js","mtime":1528256844000}],"contextDependencies":[],"result":["(function (global, factory) {\n    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@angular/common'), require('moment-timezone'), require('jquery'), require('select2')) :\n        typeof define === 'function' && define.amd ? define(['exports', '@angular/core', '@angular/common', 'moment-timezone', 'jquery', 'select2'], factory) :\n            (factory((global['ng2-timezone-selector'] = {}), global.core, global.common, global.moment, global.$));\n}(this, (function (exports, core, common, moment, $) {\n    'use strict';\n    $ = $ && $.hasOwnProperty('default') ? $['default'] : $;\n    /**\n     * @fileoverview added by tsickle\n     * @suppress {checkTypes} checked by tsc\n     */\n    /**\n     * @record\n     */\n    var TimezonePickerService = /*@__PURE__*/ (function () {\n        function TimezonePickerService() {\n        }\n        /**\n         * Convert country ISO code to country name (in english)\n         */\n        /**\n         * Convert country ISO code to country name (in english)\n         * @param {?} iso\n         * @return {?}\n         */\n        TimezonePickerService.prototype.iso2country = /**\n         * Convert country ISO code to country name (in english)\n         * @param {?} iso\n         * @return {?}\n         */\n            function (iso) {\n                return countryList[iso] ? countryList[iso] : iso;\n            };\n        /**\n         * Gets the list of ISO-codes for all countries\n         */\n        /**\n         * Gets the list of ISO-codes for all countries\n         * @return {?}\n         */\n        TimezonePickerService.prototype.getCountries = /**\n         * Gets the list of ISO-codes for all countries\n         * @return {?}\n         */\n            function () {\n                var /** @type {?} */ res = [];\n                for (var _i = 0, _a = Object.keys(countryList); _i < _a.length; _i++) {\n                    var prop = _a[_i];\n                    res.push(prop);\n                }\n                return res;\n            };\n        /**\n         * Get the timezones for each country\n         */\n        /**\n         * Get the timezones for each country\n         * @return {?}\n         */\n        TimezonePickerService.prototype.getZones = /**\n         * Get the timezones for each country\n         * @return {?}\n         */\n            function () {\n                var /** @type {?} */ res = [];\n                for (var _i = 0, _a = Object.keys(zones); _i < _a.length; _i++) {\n                    var prop = _a[_i];\n                    res.push({\n                        iso: prop,\n                        zones: zones[prop]\n                    });\n                }\n                return res;\n            };\n        TimezonePickerService.decorators = [\n            { type: core.Injectable },\n        ];\n        /** @nocollapse */\n        TimezonePickerService.ctorParameters = function () { return []; };\n        return TimezonePickerService;\n    }());\n    var zones = {\n        AD: ['Europe/Andorra'],\n        AE: ['Asia/Dubai'],\n        AF: ['Asia/Kabul'],\n        AG: ['America/Antigua'],\n        AI: ['America/Anguilla'],\n        AL: ['Europe/Tirane'],\n        AM: ['Asia/Yerevan'],\n        AO: ['Africa/Luanda'],\n        AQ: [\n            'Antarctica/McMurdo',\n            'Antarctica/Rothera',\n            'Antarctica/Palmer',\n            'Antarctica/Mawson',\n            'Antarctica/Davis',\n            'Antarctica/Casey',\n            'Antarctica/Vostok',\n            'Antarctica/DumontDUrville',\n            'Antarctica/Syowa',\n            'Antarctica/Troll'\n        ],\n        AR: [\n            'America/Argentina/Buenos_Aires',\n            'America/Argentina/Cordoba',\n            'America/Argentina/Salta',\n            'America/Argentina/Jujuy',\n            'America/Argentina/Tucuman',\n            'America/Argentina/Catamarca',\n            'America/Argentina/La_Rioja',\n            'America/Argentina/San_Juan',\n            'America/Argentina/Mendoza',\n            'America/Argentina/San_Luis',\n            'America/Argentina/Rio_Gallegos',\n            'America/Argentina/Ushuaia'\n        ],\n        AS: ['Pacific/Pago_Pago', 'Pacific/Samoa'],\n        AT: ['Europe/Vienna'],\n        AU: [\n            'Australia/Lord_Howe',\n            'Antarctica/Macquarie',\n            'Australia/Hobart',\n            'Australia/Currie',\n            'Australia/Melbourne',\n            'Australia/Sydney',\n            'Australia/Broken_Hill',\n            'Australia/Brisbane',\n            'Australia/Lindeman',\n            'Australia/Adelaide',\n            'Australia/Darwin',\n            'Australia/Perth',\n            'Australia/Eucla',\n            'Australia/Canberra',\n            'Australia/Queensland',\n            'Australia/Tasmania',\n            'Australia/Victoria'\n        ],\n        AW: ['America/Aruba'],\n        AX: ['Europe/Mariehamn'],\n        AZ: ['Asia/Baku'],\n        BA: ['Europe/Sarajevo'],\n        BB: ['America/Barbados'],\n        BD: ['Asia/Dhaka'],\n        BE: ['Europe/Brussels'],\n        BF: ['Africa/Ouagadougou'],\n        BG: ['Europe/Sofia'],\n        BH: ['Asia/Bahrain'],\n        BI: ['Africa/Bujumbura'],\n        BJ: ['Africa/Porto-Novo'],\n        BL: ['America/St_Barthelemy'],\n        BM: ['Atlantic/Bermuda'],\n        BN: ['Asia/Brunei'],\n        BO: ['America/La_Paz'],\n        BQ: ['America/Kralendijk'],\n        BR: [\n            'America/Noronha',\n            'America/Belem',\n            'America/Fortaleza',\n            'America/Recife',\n            'America/Araguaina',\n            'America/Maceio',\n            'America/Bahia',\n            'America/Sao_Paulo',\n            'America/Campo_Grande',\n            'America/Cuiaba',\n            'America/Santarem',\n            'America/Porto_Velho',\n            'America/Boa_Vista',\n            'America/Manaus',\n            'America/Eirunepe',\n            'America/Rio_Branco'\n        ],\n        BS: ['America/Nassau'],\n        BT: ['Asia/Thimphu'],\n        BW: ['Africa/Gaborone'],\n        BY: ['Europe/Minsk'],\n        BZ: ['America/Belize'],\n        CA: [\n            'America/St_Johns',\n            'America/Halifax',\n            'America/Glace_Bay',\n            'America/Moncton',\n            'America/Goose_Bay',\n            'America/Blanc-Sablon',\n            'America/Toronto',\n            'America/Nipigon',\n            'America/Thunder_Bay',\n            'America/Iqaluit',\n            'America/Pangnirtung',\n            'America/Resolute',\n            'America/Atikokan',\n            'America/Rankin_Inlet',\n            'America/Winnipeg',\n            'America/Rainy_River',\n            'America/Regina',\n            'America/Swift_Current',\n            'America/Edmonton',\n            'America/Cambridge_Bay',\n            'America/Yellowknife',\n            'America/Inuvik',\n            'America/Creston',\n            'America/Dawson_Creek',\n            'America/Vancouver',\n            'America/Whitehorse',\n            'America/Dawson',\n            'America/Montreal',\n            'Canada/Atlantic',\n            'Canada/Central',\n            'Canada/Eastern',\n            'Canada/Mountain',\n            'Canada/Newfoundland',\n            'Canada/Pacific',\n            'Canada/Saskatchewan',\n            'Canada/Yukon'\n        ],\n        CC: ['Indian/Cocos'],\n        CD: ['Africa/Kinshasa', 'Africa/Lubumbashi'],\n        CF: ['Africa/Bangui'],\n        CG: ['Africa/Brazzaville'],\n        CH: ['Europe/Zurich'],\n        CI: ['Africa/Abidjan'],\n        CK: ['Pacific/Rarotonga'],\n        CL: [\n            'America/Santiago',\n            'Pacific/Easter',\n            'Chile/Continental',\n            'Chile/EasterIsland'\n        ],\n        CM: ['Africa/Douala'],\n        CN: [\n            'Asia/Shanghai',\n            'Asia/Harbin',\n            'Asia/Chongqing',\n            'Asia/Urumqi',\n            'Asia/Kashgar'\n        ],\n        CO: ['America/Bogota'],\n        CR: ['America/Costa_Rica'],\n        CU: ['America/Havana'],\n        CV: ['Atlantic/Cape_Verde'],\n        CW: ['America/Curacao'],\n        CX: ['Indian/Christmas'],\n        CY: ['Asia/Nicosia'],\n        CZ: ['Europe/Prague'],\n        DE: ['Europe/Berlin'],\n        DJ: ['Africa/Djibouti'],\n        DK: ['Europe/Copenhagen'],\n        DM: ['America/Dominica'],\n        DO: ['America/Santo_Domingo'],\n        DZ: ['Africa/Algiers'],\n        EC: ['America/Guayaquil', 'Pacific/Galapagos'],\n        EE: ['Europe/Tallinn'],\n        EG: ['Egypt'],\n        EH: ['Africa/El_Aaiun'],\n        ER: ['Africa/Asmara'],\n        ES: ['Europe/Madrid', 'Africa/Ceuta', 'Atlantic/Canary'],\n        ET: ['Africa/Addis_Ababa'],\n        FI: ['Europe/Helsinki'],\n        FJ: ['Pacific/Fiji'],\n        FK: ['Atlantic/Stanley'],\n        FM: ['Pacific/Chuuk', 'Pacific/Pohnpei', 'Pacific/Kosrae'],\n        FO: ['Atlantic/Faroe'],\n        FR: ['Europe/Paris'],\n        GA: ['Africa/Libreville'],\n        GB: ['Europe/London'],\n        GD: ['America/Grenada'],\n        GE: ['Asia/Tbilisi'],\n        GF: ['America/Cayenne'],\n        GG: ['Europe/Guernsey'],\n        GH: ['Africa/Accra'],\n        GI: ['Europe/Gibraltar'],\n        GL: [\n            'America/Godthab',\n            'America/Danmarkshavn',\n            'America/Scoresbysund',\n            'America/Thule'\n        ],\n        GM: ['Africa/Banjul'],\n        GN: ['Africa/Conakry'],\n        GP: ['America/Guadeloupe'],\n        GQ: ['Africa/Malabo'],\n        GR: ['Europe/Athens'],\n        GS: ['Atlantic/South_Georgia'],\n        GT: ['America/Guatemala'],\n        GU: ['Pacific/Guam'],\n        GW: ['Africa/Bissau'],\n        GY: ['America/Guyana'],\n        HK: ['Asia/Hong_Kong'],\n        HN: ['America/Tegucigalpa'],\n        HR: ['Europe/Zagreb'],\n        HT: ['America/Port-au-Prince'],\n        HU: ['Europe/Budapest'],\n        ID: ['Asia/Jakarta', 'Asia/Pontianak', 'Asia/Makassar', 'Asia/Jayapura'],\n        IE: ['Europe/Dublin'],\n        IL: ['Asia/Jerusalem'],\n        IM: ['Europe/Isle_of_Man'],\n        IN: ['Asia/Kolkata'],\n        IO: ['Indian/Chagos'],\n        IQ: ['Asia/Baghdad'],\n        IR: ['Asia/Tehran'],\n        IS: ['Atlantic/Reykjavik'],\n        IT: ['Europe/Rome'],\n        JE: ['Europe/Jersey'],\n        JM: ['America/Jamaica'],\n        JO: ['Asia/Amman'],\n        JP: ['Asia/Tokyo'],\n        KE: ['Africa/Nairobi'],\n        KG: ['Asia/Bishkek'],\n        KH: ['Asia/Phnom_Penh'],\n        KI: ['Pacific/Tarawa', 'Pacific/Enderbury', 'Pacific/Kiritimati'],\n        KM: ['Indian/Comoro'],\n        KN: ['America/St_Kitts'],\n        KP: ['Asia/Pyongyang'],\n        KR: ['Asia/Seoul'],\n        KW: ['Asia/Kuwait'],\n        KY: ['America/Cayman'],\n        KZ: [\n            'Asia/Almaty',\n            'Asia/Qyzylorda',\n            'Asia/Aqtobe',\n            'Asia/Aqtau',\n            'Asia/Oral'\n        ],\n        LA: ['Asia/Vientiane'],\n        LB: ['Asia/Beirut'],\n        LC: ['America/St_Lucia'],\n        LI: ['Europe/Vaduz'],\n        LK: ['Asia/Colombo'],\n        LR: ['Africa/Monrovia'],\n        LS: ['Africa/Maseru'],\n        LT: ['Europe/Vilnius'],\n        LU: ['Europe/Luxembourg'],\n        LV: ['Europe/Riga'],\n        LY: ['Africa/Tripoli'],\n        MA: ['Africa/Casablanca'],\n        MC: ['Europe/Monaco'],\n        MD: ['Europe/Chisinau'],\n        ME: ['Europe/Podgorica'],\n        MF: ['America/Marigot'],\n        MG: ['Indian/Antananarivo'],\n        MH: ['Pacific/Majuro', 'Pacific/Kwajalein'],\n        MK: ['Europe/Skopje'],\n        ML: ['Africa/Bamako'],\n        MM: ['Asia/Rangoon'],\n        MN: ['Asia/Ulaanbaatar', 'Asia/Hovd', 'Asia/Choibalsan'],\n        MO: ['Asia/Macau'],\n        MP: ['Pacific/Saipan'],\n        MQ: ['America/Martinique'],\n        MR: ['Africa/Nouakchott'],\n        MS: ['America/Montserrat'],\n        MT: ['Europe/Malta'],\n        MU: ['Indian/Mauritius'],\n        MV: ['Indian/Maldives'],\n        MW: ['Africa/Blantyre'],\n        MX: [\n            'America/Mexico_City',\n            'America/Cancun',\n            'America/Merida',\n            'America/Monterrey',\n            'America/Matamoros',\n            'America/Mazatlan',\n            'America/Chihuahua',\n            'America/Ojinaga',\n            'America/Hermosillo',\n            'America/Tijuana',\n            'America/Santa_Isabel',\n            'America/Bahia_Banderas'\n        ],\n        MY: ['Asia/Kuala_Lumpur', 'Asia/Kuching'],\n        MZ: ['Africa/Maputo'],\n        NA: ['Africa/Windhoek'],\n        NC: ['Pacific/Noumea'],\n        NE: ['Africa/Niamey'],\n        NF: ['Pacific/Norfolk'],\n        NG: ['Africa/Lagos'],\n        NI: ['America/Managua'],\n        NL: ['Europe/Amsterdam'],\n        NO: ['Europe/Oslo'],\n        NP: ['Asia/Kathmandu'],\n        NR: ['Pacific/Nauru'],\n        NU: ['Pacific/Niue'],\n        NZ: ['Pacific/Auckland', 'Pacific/Chatham'],\n        OM: ['Asia/Muscat'],\n        PA: ['America/Panama'],\n        PE: ['America/Lima'],\n        PF: ['Pacific/Tahiti', 'Pacific/Marquesas', 'Pacific/Gambier'],\n        PG: ['Pacific/Port_Moresby'],\n        PH: ['Asia/Manila'],\n        PK: ['Asia/Karachi'],\n        PL: ['Europe/Warsaw', 'Poland'],\n        PM: ['America/Miquelon'],\n        PN: ['Pacific/Pitcairn'],\n        PR: ['America/Puerto_Rico'],\n        PS: ['Asia/Gaza', 'Asia/Hebron'],\n        PT: ['Europe/Lisbon', 'Atlantic/Madeira', 'Atlantic/Azores'],\n        PW: ['Pacific/Palau'],\n        PY: ['America/Asuncion'],\n        QA: ['Asia/Qatar'],\n        RE: ['Indian/Reunion'],\n        RO: ['Europe/Bucharest'],\n        RS: ['Europe/Belgrade'],\n        RU: [\n            'Europe/Kaliningrad',\n            'Europe/Moscow',\n            'Europe/Volgograd',\n            'Europe/Samara',\n            'Europe/Simferopol',\n            'Asia/Yekaterinburg',\n            'Asia/Omsk',\n            'Asia/Novosibirsk',\n            'Asia/Novokuznetsk',\n            'Asia/Krasnoyarsk',\n            'Asia/Irkutsk',\n            'Asia/Yakutsk',\n            'Asia/Khandyga',\n            'Asia/Vladivostok',\n            'Asia/Sakhalin',\n            'Asia/Ust-Nera',\n            'Asia/Magadan',\n            'Asia/Kamchatka',\n            'Asia/Anadyr'\n        ],\n        RW: ['Africa/Kigali'],\n        SA: ['Asia/Riyadh'],\n        SB: ['Pacific/Guadalcanal'],\n        SC: ['Indian/Mahe'],\n        SD: ['Africa/Khartoum'],\n        SE: ['Europe/Stockholm'],\n        SG: ['Asia/Singapore'],\n        SH: ['Atlantic/St_Helena'],\n        SI: ['Europe/Ljubljana'],\n        SJ: ['Arctic/Longyearbyen'],\n        SK: ['Europe/Bratislava'],\n        SL: ['Africa/Freetown'],\n        SM: ['Europe/San_Marino'],\n        SN: ['Africa/Dakar'],\n        SO: ['Africa/Mogadishu'],\n        SR: ['America/Paramaribo'],\n        SS: ['Africa/Juba'],\n        ST: ['Africa/Sao_Tome'],\n        SV: ['America/El_Salvador'],\n        SX: ['America/Lower_Princes'],\n        SY: ['Asia/Damascus'],\n        SZ: ['Africa/Mbabane'],\n        TC: ['America/Grand_Turk'],\n        TD: ['Africa/Ndjamena'],\n        TF: ['Indian/Kerguelen'],\n        TG: ['Africa/Lome'],\n        TH: ['Asia/Bangkok'],\n        TJ: ['Asia/Dushanbe'],\n        TK: ['Pacific/Fakaofo'],\n        TL: ['Asia/Dili'],\n        TM: ['Asia/Ashgabat'],\n        TN: ['Africa/Tunis'],\n        TO: ['Pacific/Tongatapu'],\n        TR: ['Europe/Istanbul'],\n        TT: ['America/Port_of_Spain'],\n        TV: ['Pacific/Funafuti'],\n        TW: ['Asia/Taipei'],\n        TZ: ['Africa/Dar_es_Salaam'],\n        UA: ['Europe/Kiev', 'Europe/Uzhgorod', 'Europe/Zaporozhye'],\n        UG: ['Africa/Kampala'],\n        UM: ['Pacific/Johnston', 'Pacific/Midway', 'Pacific/Wake'],\n        US: [\n            'America/New_York',\n            'America/Detroit',\n            'America/Kentucky/Louisville',\n            'America/Kentucky/Monticello',\n            'America/Indiana/Indianapolis',\n            'America/Indiana/Vincennes',\n            'America/Indiana/Winamac',\n            'America/Indiana/Marengo',\n            'America/Indiana/Petersburg',\n            'America/Indiana/Vevay',\n            'America/Chicago',\n            'America/Indiana/Tell_City',\n            'America/Indiana/Knox',\n            'America/Menominee',\n            'America/North_Dakota/Center',\n            'America/North_Dakota/New_Salem',\n            'America/North_Dakota/Beulah',\n            'America/Denver',\n            'America/Boise',\n            'America/Phoenix',\n            'America/Los_Angeles',\n            'America/Anchorage',\n            'America/Juneau',\n            'America/Sitka',\n            'America/Yakutat',\n            'America/Nome',\n            'America/Adak',\n            'America/Metlakatla',\n            'Pacific/Honolulu'\n        ],\n        UY: ['America/Montevideo'],\n        UZ: ['Asia/Samarkand', 'Asia/Tashkent'],\n        VA: ['Europe/Vatican'],\n        VC: ['America/St_Vincent'],\n        VE: ['America/Caracas'],\n        VG: ['America/Tortola'],\n        VI: ['America/St_Thomas'],\n        VN: ['Asia/Ho_Chi_Minh'],\n        VU: ['Pacific/Efate'],\n        WF: ['Pacific/Wallis'],\n        WS: ['Pacific/Apia'],\n        YE: ['Asia/Aden'],\n        YT: ['Indian/Mayotte'],\n        ZA: ['Africa/Johannesburg'],\n        ZM: ['Africa/Lusaka'],\n        ZW: ['Africa/Harare']\n    };\n    var countryList = {\n        AF: 'Afghanistan',\n        AX: 'Aland Islands',\n        AL: 'Albania',\n        DZ: 'Algeria',\n        AS: 'American Samoa',\n        AD: 'Andorra',\n        AO: 'Angola',\n        AI: 'Anguilla',\n        AQ: 'Antarctica',\n        AG: 'Antigua and Barbuda',\n        AR: 'Argentina',\n        AM: 'Armenia',\n        AW: 'Aruba',\n        AU: 'Australia',\n        AT: 'Austria',\n        AZ: 'Azerbaijan',\n        BS: 'Bahamas',\n        BH: 'Bahrain',\n        BD: 'Bangladesh',\n        BB: 'Barbados',\n        BY: 'Belarus',\n        BE: 'Belgium',\n        BZ: 'Belize',\n        BJ: 'Benin',\n        BM: 'Bermuda',\n        BT: 'Bhutan',\n        BO: 'Bolivia',\n        BA: 'Bosnia and Herzegovina',\n        BW: 'Botswana',\n        BV: 'Bouvet Island',\n        BR: 'Brazil',\n        VG: 'British Virgin Islands',\n        IO: 'British Indian Ocean Territory',\n        BN: 'Brunei Darussalam',\n        BG: 'Bulgaria',\n        BF: 'Burkina Faso',\n        BI: 'Burundi',\n        KH: 'Cambodia',\n        CM: 'Cameroon',\n        CA: 'Canada',\n        CV: 'Cape Verde',\n        KY: 'Cayman Islands',\n        CF: 'Central African Republic',\n        TD: 'Chad',\n        CL: 'Chile',\n        CN: 'China',\n        HK: 'Hong Kong',\n        MO: 'Macao',\n        CX: 'Christmas Island',\n        CC: 'Cocos (Keeling) Islands',\n        CO: 'Colombia',\n        KM: 'Comoros',\n        CG: 'Congo (Brazzaville)',\n        CD: 'Congo, (Kinshasa)',\n        CK: 'Cook Islands',\n        CR: 'Costa Rica',\n        CI: \"Côte d'Ivoire\",\n        HR: 'Croatia',\n        CU: 'Cuba',\n        CY: 'Cyprus',\n        CZ: 'Czech Republic',\n        DK: 'Denmark',\n        DJ: 'Djibouti',\n        DM: 'Dominica',\n        DO: 'Dominican Republic',\n        EC: 'Ecuador',\n        EG: 'Egypt',\n        SV: 'El Salvador',\n        GQ: 'Equatorial Guinea',\n        ER: 'Eritrea',\n        EE: 'Estonia',\n        ET: 'Ethiopia',\n        FK: 'Falkland Islands (Malvinas)',\n        FO: 'Faroe Islands',\n        FJ: 'Fiji',\n        FI: 'Finland',\n        FR: 'France',\n        GF: 'French Guiana',\n        PF: 'French Polynesia',\n        TF: 'French Southern Territories',\n        GA: 'Gabon',\n        GM: 'Gambia',\n        GE: 'Georgia',\n        DE: 'Germany',\n        GH: 'Ghana',\n        GI: 'Gibraltar',\n        GR: 'Greece',\n        GL: 'Greenland',\n        GD: 'Grenada',\n        GP: 'Guadeloupe',\n        GU: 'Guam',\n        GT: 'Guatemala',\n        GG: 'Guernsey',\n        GN: 'Guinea',\n        GW: 'Guinea-Bissau',\n        GY: 'Guyana',\n        HT: 'Haiti',\n        HM: 'Heard and Mcdonald Islands',\n        VA: 'Vatican City State',\n        HN: 'Honduras',\n        HU: 'Hungary',\n        IS: 'Iceland',\n        IN: 'India',\n        ID: 'Indonesia',\n        IR: 'Iran',\n        IQ: 'Iraq',\n        IE: 'Ireland',\n        IM: 'Isle of Man',\n        IL: 'Israel',\n        IT: 'Italy',\n        JM: 'Jamaica',\n        JP: 'Japan',\n        JE: 'Jersey',\n        JO: 'Jordan',\n        KZ: 'Kazakhstan',\n        KE: 'Kenya',\n        KI: 'Kiribati',\n        KP: 'Korea (North)',\n        KR: 'Korea (South)',\n        KW: 'Kuwait',\n        KG: 'Kyrgyzstan',\n        LA: 'Lao PDR',\n        LV: 'Latvia',\n        LB: 'Lebanon',\n        LS: 'Lesotho',\n        LR: 'Liberia',\n        LY: 'Libya',\n        LI: 'Liechtenstein',\n        LT: 'Lithuania',\n        LU: 'Luxembourg',\n        MK: 'Macedonia',\n        MG: 'Madagascar',\n        MW: 'Malawi',\n        MY: 'Malaysia',\n        MV: 'Maldives',\n        ML: 'Mali',\n        MT: 'Malta',\n        MH: 'Marshall Islands',\n        MQ: 'Martinique',\n        MR: 'Mauritania',\n        MU: 'Mauritius',\n        YT: 'Mayotte',\n        MX: 'Mexico',\n        FM: 'Micronesia',\n        MD: 'Moldova',\n        MC: 'Monaco',\n        MN: 'Mongolia',\n        ME: 'Montenegro',\n        MS: 'Montserrat',\n        MA: 'Morocco',\n        MZ: 'Mozambique',\n        MM: 'Myanmar',\n        NA: 'Namibia',\n        NR: 'Nauru',\n        NP: 'Nepal',\n        NL: 'Netherlands',\n        AN: 'Netherlands Antilles',\n        NC: 'New Caledonia',\n        NZ: 'New Zealand',\n        NI: 'Nicaragua',\n        NE: 'Niger',\n        NG: 'Nigeria',\n        NU: 'Niue',\n        NF: 'Norfolk Island',\n        MP: 'Northern Mariana Islands',\n        NO: 'Norway',\n        OM: 'Oman',\n        PK: 'Pakistan',\n        PW: 'Palau',\n        PS: 'Palestinian Territory',\n        PA: 'Panama',\n        PG: 'Papua New Guinea',\n        PY: 'Paraguay',\n        PE: 'Peru',\n        PH: 'Philippines',\n        PN: 'Pitcairn',\n        PL: 'Poland',\n        PT: 'Portugal',\n        PR: 'Puerto Rico',\n        QA: 'Qatar',\n        RE: 'Réunion',\n        RO: 'Romania',\n        RU: 'Russian Federation',\n        RW: 'Rwanda',\n        BL: 'Saint-Barthélemy',\n        SH: 'Saint Helena',\n        KN: 'Saint Kitts and Nevis',\n        LC: 'Saint Lucia',\n        MF: 'Saint-Martin (French part)',\n        PM: 'Saint Pierre and Miquelon',\n        VC: 'Saint Vincent and Grenadines',\n        WS: 'Samoa',\n        SM: 'San Marino',\n        ST: 'Sao Tome and Principe',\n        SA: 'Saudi Arabia',\n        SN: 'Senegal',\n        RS: 'Serbia',\n        SC: 'Seychelles',\n        SL: 'Sierra Leone',\n        SG: 'Singapore',\n        SK: 'Slovakia',\n        SI: 'Slovenia',\n        SB: 'Solomon Islands',\n        SO: 'Somalia',\n        ZA: 'South Africa',\n        GS: 'South Georgia and the South Sandwich Islands',\n        SS: 'South Sudan',\n        ES: 'Spain',\n        LK: 'Sri Lanka',\n        SD: 'Sudan',\n        SR: 'Suriname',\n        SJ: 'Svalbard and Jan Mayen Islands',\n        SZ: 'Swaziland',\n        SE: 'Sweden',\n        CH: 'Switzerland',\n        SY: 'Syria',\n        TW: 'Taiwan',\n        TJ: 'Tajikistan',\n        TZ: 'Tanzania',\n        TH: 'Thailand',\n        TL: 'Timor-Leste',\n        TG: 'Togo',\n        TK: 'Tokelau',\n        TO: 'Tonga',\n        TT: 'Trinidad and Tobago',\n        TN: 'Tunisia',\n        TR: 'Turkey',\n        TM: 'Turkmenistan',\n        TC: 'Turks and Caicos Islands',\n        TV: 'Tuvalu',\n        UG: 'Uganda',\n        UA: 'Ukraine',\n        AE: 'United Arab Emirates',\n        GB: 'United Kingdom (GB)',\n        US: 'United States of America (USA)',\n        UM: 'US Minor Outlying Islands',\n        UY: 'Uruguay',\n        UZ: 'Uzbekistan',\n        VU: 'Vanuatu',\n        VE: 'Venezuela',\n        VN: 'Viet Nam',\n        VI: 'Virgin Islands, US',\n        WF: 'Wallis and Futuna Islands',\n        EH: 'Western Sahara',\n        YE: 'Yemen',\n        ZM: 'Zambia',\n        ZW: 'Zimbabwe'\n    };\n    /**\n     * @fileoverview added by tsickle\n     * @suppress {checkTypes} checked by tsc\n     */\n    var TimezonePickerComponent = /*@__PURE__*/ (function () {\n        /**\n         * Contructor function to define all the timezones\n         */\n        function TimezonePickerComponent(service) {\n            this.service = service;\n            /**\n             * Input (optional) bound to [allowClear]\n             */\n            this.allowClear = false;\n            this.showOffset = false;\n            this.guess = false;\n            /**\n             * Input (optional) bound to [disabled]\n             */\n            this.disabled = false;\n            this.placeholderString = 'Select timezone';\n            /**\n             * Output event bound to (timezone)\n             */\n            this.timezoneChange = new core.EventEmitter();\n            /**\n             * Output event bound to (change)\n             */\n            this.change = new core.EventEmitter();\n            this.countryChange = new core.EventEmitter();\n            this.allTimezones = service.getZones();\n        }\n        Object.defineProperty(TimezonePickerComponent.prototype, \"placeholder\", {\n            set: /**\n             * Input (optional) bound to [placeholder]\n             * @param {?} placeholder\n             * @return {?}\n             */ function (placeholder) {\n                if (placeholder) {\n                    this.placeholderString = placeholder;\n                    var /** @type {?} */ placeholderElem = $(this.select.nativeElement.parentElement).find('.select2-selection__placeholder');\n                    if (placeholderElem.length > 0) {\n                        placeholderElem[0].innerText = placeholder;\n                    }\n                }\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(TimezonePickerComponent.prototype, \"timezone\", {\n            set: /**\n             * Input: string (required) bound to [timezone]\n             * @param {?} timezone\n             * @return {?}\n             */ function (timezone) {\n                if (timezone) {\n                    this.currentTimezone = timezone;\n                    this.triggerChangeEvent();\n                }\n                else if (this.guess) {\n                    this.currentTimezone = moment.tz.guess();\n                    this.triggerChangeEvent();\n                }\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(TimezonePickerComponent.prototype, \"country\", {\n            set: /**\n             * @param {?} isoCode\n             * @return {?}\n             */ function (isoCode) {\n                if (isoCode && !this.currentTimezone && !this.guess) {\n                    var /** @type {?} */ res = this.allTimezones.find(function (x) { return x.iso === isoCode; });\n                    if (res) {\n                        this.currentTimezone = res.zones[0];\n                        this.triggerChangeEvent();\n                    }\n                }\n            },\n            enumerable: true,\n            configurable: true\n        });\n        /**\n         * $ bounding of select2 framework in the selectElement\n         */\n        /**\n         * $ bounding of select2 framework in the selectElement\n         * @return {?}\n         */\n        TimezonePickerComponent.prototype.ngAfterViewInit = /**\n         * $ bounding of select2 framework in the selectElement\n         * @return {?}\n         */\n            function () {\n                var _this = this;\n                var /** @type {?} */ selectElement = $(this.select.nativeElement);\n                selectElement.select2({\n                    placeholder: this.placeholderString,\n                    allowClear: this.allowClear,\n                    matcher: function (term, text) { return _this.matcher(term, text); }\n                });\n                if (this.currentTimezone) {\n                    $(selectElement)\n                        .val(this.currentTimezone)\n                        .trigger('change');\n                }\n                selectElement.on('change', function (e) {\n                    _this.onChange($(e.target).val());\n                });\n            };\n        /**\n         * @return {?}\n         */\n        TimezonePickerComponent.prototype.triggerChangeEvent = /**\n         * @return {?}\n         */\n            function () {\n                var _this = this;\n                $(this.select.nativeElement)\n                    .val(this.currentTimezone)\n                    .trigger('change');\n                this.timezoneChange.emit(this.currentTimezone);\n                this.change.emit(this.currentTimezone);\n                this.countryChange.emit(this.allTimezones.find(function (x) { return x.zones.indexOf(_this.currentTimezone) >= 0; })\n                    .iso);\n            };\n        /**\n         * @param {?} zone\n         * @return {?}\n         */\n        TimezonePickerComponent.prototype.formatTimezoneString = /**\n         * @param {?} zone\n         * @return {?}\n         */\n            function (zone) {\n                var /** @type {?} */ arr = zone.split('/');\n                return arr[arr.length - 1].replace('_', ' ');\n            };\n        /**\n         * @param {?} zone\n         * @return {?}\n         */\n        TimezonePickerComponent.prototype.offsetOfTimezone = /**\n         * @param {?} zone\n         * @return {?}\n         */\n            function (zone) {\n                var /** @type {?} */ offset = moment.tz(zone).utcOffset();\n                var /** @type {?} */ neg = offset < 0;\n                if (neg) {\n                    offset = -1 * offset;\n                }\n                var /** @type {?} */ hours = Math.floor(offset / 60);\n                var /** @type {?} */ minutes = (offset / 60 - hours) * 60;\n                return \"(GMT\" + (neg ? '-' : '+') + this.rjust(hours.toString(), 2) + \":\" + this.rjust(minutes.toString(), 2) + \")\";\n            };\n        /**\n         * onChange function called by the \"select\" element\n         * @param {?} timezone The timezone string selected\n         * @return {?}\n         */\n        TimezonePickerComponent.prototype.onChange = /**\n         * onChange function called by the \"select\" element\n         * @param {?} timezone The timezone string selected\n         * @return {?}\n         */\n            function (timezone) {\n                this.currentTimezone = timezone;\n                this.timezoneChange.emit(timezone);\n                this.change.emit(timezone);\n            };\n        /**\n         * Matcher function to search in the select options\n         * @param {?} params contains the search term\n         * @param {?} data contains the data of each row\n         * @return {?}\n         */\n        TimezonePickerComponent.prototype.matcher = /**\n         * Matcher function to search in the select options\n         * @param {?} params contains the search term\n         * @param {?} data contains the data of each row\n         * @return {?}\n         */\n            function (params, data) {\n                // Always return the object if there is nothing to compare\n                if ($.trim(params.term) === '') {\n                    return data;\n                }\n                var /** @type {?} */ original = data.text.toUpperCase();\n                var /** @type {?} */ term = params.term.toUpperCase();\n                // Replace '_' with ' ' to be able to search for 'New York'\n                if (original.indexOf('_') !== -1) {\n                    original += original.replace('_', ' ');\n                }\n                // Check if the text contains the term\n                if (original.indexOf(term) > -1) {\n                    return data;\n                }\n                // Do a recursive check for options with children\n                if (data.children && data.children.length > 0) {\n                    // Clone the data object if there are children\n                    // This is required as we modify the object to remove any non-matches\n                    var /** @type {?} */ match = $.extend(true, {}, data);\n                    // Check each child of the option\n                    for (var /** @type {?} */ c = data.children.length - 1; c >= 0; c--) {\n                        var /** @type {?} */ child = data.children[c];\n                        var /** @type {?} */ matches = this.matcher(params, child);\n                        // If there wasn't a match, remove the object in the array\n                        if (matches == null) {\n                            match.children.splice(c, 1);\n                        }\n                    }\n                    // If any children matched, return the new object\n                    if (match.children.length > 0) {\n                        return match;\n                    }\n                    // If there were no matching children, check just the plain object\n                    return this.matcher(params, match);\n                }\n                // If it doesn't contain the term, don't return anything\n                return null;\n            };\n        /**\n         * @param {?} string\n         * @param {?} width\n         * @param {?=} padding\n         * @return {?}\n         */\n        TimezonePickerComponent.prototype.rjust = /**\n         * @param {?} string\n         * @param {?} width\n         * @param {?=} padding\n         * @return {?}\n         */\n            function (string, width, padding) {\n                if (padding === void 0) {\n                    padding = '0';\n                }\n                padding = padding || ' ';\n                padding = padding.substr(0, 1);\n                if (string.length < width) {\n                    return padding.repeat(width - string.length) + string;\n                }\n                else {\n                    return string;\n                }\n            };\n        TimezonePickerComponent.decorators = [\n            { type: core.Component, args: [{\n                        selector: 'ng2-timezone-picker',\n                        template: \"\\n  <select #select id=\\\"select\\\" style=\\\"width: 100%\\\" class=\\\"form-control\\\" [disabled]=\\\"disabled\\\">\\n    <option></option>\\n    <ng-template let-c ngFor [ngForOf]=\\\"allTimezones\\\">\\n      <optgroup *ngIf=\\\"c.zones.length > 1\\\" [label]=\\\"c.iso | iso2CountryPipe\\\">\\n        <option *ngFor=\\\"let t of c.zones\\\" [value]=\\\"t\\\">{{c.iso | iso2CountryPipe}} - {{formatTimezoneString(t)}}\\n            <span *ngIf=\\\"showOffset\\\">{{offsetOfTimezone(t)}}</span>\\n        </option>\\n      </optgroup>\\n        <option *ngIf=\\\"c.zones.length === 1\\\" [value]=\\\"c.zones[0]\\\">{{c.iso | iso2CountryPipe}}\\n          <span *ngIf=\\\"showOffset\\\">{{offsetOfTimezone(c.zones[0])}}</span>\\n      </option>\\n    </ng-template>\\n  </select>\"\n                    },] },\n        ];\n        /** @nocollapse */\n        TimezonePickerComponent.ctorParameters = function () {\n            return [\n                { type: TimezonePickerService, },\n            ];\n        };\n        TimezonePickerComponent.propDecorators = {\n            \"select\": [{ type: core.ViewChild, args: ['select',] },],\n            \"allowClear\": [{ type: core.Input },],\n            \"showOffset\": [{ type: core.Input },],\n            \"guess\": [{ type: core.Input },],\n            \"disabled\": [{ type: core.Input },],\n            \"placeholder\": [{ type: core.Input },],\n            \"timezone\": [{ type: core.Input },],\n            \"country\": [{ type: core.Input },],\n            \"timezoneChange\": [{ type: core.Output },],\n            \"change\": [{ type: core.Output },],\n            \"countryChange\": [{ type: core.Output },],\n        };\n        return TimezonePickerComponent;\n    }());\n    /**\n     * @fileoverview added by tsickle\n     * @suppress {checkTypes} checked by tsc\n     */\n    /**\n     * Transforms any input value\n     */\n    var TimezonePickerPipe = /*@__PURE__*/ (function () {\n        function TimezonePickerPipe(service) {\n            this.service = service;\n        }\n        /**\n         * @param {?} value\n         * @return {?}\n         */\n        TimezonePickerPipe.prototype.transform = /**\n         * @param {?} value\n         * @return {?}\n         */\n            function (value) {\n                return this.service.iso2country(value);\n                // return countryList[value] ? countryList[value] : value;\n            };\n        TimezonePickerPipe.decorators = [\n            { type: core.Pipe, args: [{\n                        name: 'iso2CountryPipe'\n                    },] },\n            { type: core.Injectable },\n        ];\n        /** @nocollapse */\n        TimezonePickerPipe.ctorParameters = function () {\n            return [\n                { type: TimezonePickerService, },\n            ];\n        };\n        return TimezonePickerPipe;\n    }());\n    /**\n     * @fileoverview added by tsickle\n     * @suppress {checkTypes} checked by tsc\n     */\n    var TimezonePickerModule = /*@__PURE__*/ (function () {\n        function TimezonePickerModule() {\n        }\n        /**\n         * @return {?}\n         */\n        TimezonePickerModule.forRoot = /**\n         * @return {?}\n         */\n            function () {\n                return {\n                    ngModule: TimezonePickerModule,\n                    providers: [TimezonePickerService]\n                };\n            };\n        TimezonePickerModule.decorators = [\n            { type: core.NgModule, args: [{\n                        imports: [common.CommonModule],\n                        declarations: [TimezonePickerComponent, TimezonePickerPipe],\n                        providers: [TimezonePickerService],\n                        exports: [TimezonePickerComponent, TimezonePickerPipe]\n                    },] },\n        ];\n        /** @nocollapse */\n        TimezonePickerModule.ctorParameters = function () { return []; };\n        return TimezonePickerModule;\n    }());\n    exports.TimezonePickerModule = TimezonePickerModule;\n    exports.TimezonePickerComponent = TimezonePickerComponent;\n    exports.TimezonePickerPipe = TimezonePickerPipe;\n    exports.TimezonePickerService = TimezonePickerService;\n    Object.defineProperty(exports, '__esModule', { value: true });\n})));\n",null]}