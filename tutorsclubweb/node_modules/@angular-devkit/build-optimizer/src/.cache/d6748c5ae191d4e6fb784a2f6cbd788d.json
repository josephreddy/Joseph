{"remainingRequest":"D:\\TutorsClubBitBucket\\tutorsclubweb\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js??ref--8-1!D:\\TutorsClubBitBucket\\tutorsclubweb\\node_modules\\chroma-js\\chroma.js","dependencies":[{"path":"D:\\TutorsClubBitBucket\\tutorsclubweb\\node_modules\\chroma-js\\chroma.js","mtime":1533191680864},{"path":"D:\\TutorsClubBitBucket\\tutorsclubweb\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1533191679839},{"path":"D:\\TutorsClubBitBucket\\tutorsclubweb\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js","mtime":1533191671924}],"contextDependencies":[],"result":["\r\n/**\r\n * @license\r\n *\r\n * chroma.js - JavaScript library for color conversions\r\n * \r\n * Copyright (c) 2011-2017, Gregor Aisch\r\n * All rights reserved.\r\n * \r\n * Redistribution and use in source and binary forms, with or without\r\n * modification, are permitted provided that the following conditions are met:\r\n * \r\n * 1. Redistributions of source code must retain the above copyright notice, this\r\n *    list of conditions and the following disclaimer.\r\n * \r\n * 2. Redistributions in binary form must reproduce the above copyright notice,\r\n *    this list of conditions and the following disclaimer in the documentation\r\n *    and/or other materials provided with the distribution.\r\n * \r\n * 3. The name Gregor Aisch may not be used to endorse or promote products\r\n *    derived from this software without specific prior written permission.\r\n * \r\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\r\n * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\r\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\r\n * DISCLAIMED. IN NO EVENT SHALL GREGOR AISCH OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,\r\n * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\r\n * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY\r\n * OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING\r\n * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,\r\n * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\r\n *\r\n */\r\n\r\n(function() {\r\n  var Color, DEG2RAD, LAB_CONSTANTS, PI, PITHIRD, RAD2DEG, TWOPI, _average_lrgb, _guess_formats, _guess_formats_sorted, _input, _interpolators, abs, atan2, bezier, blend, blend_f, brewer, burn, chroma, clip_rgb, cmyk2rgb, colors, cos, css2rgb, darken, dodge, each, floor, hcg2rgb, hex2rgb, hsi2rgb, hsl2css, hsl2rgb, hsv2rgb, interpolate, interpolate_hsx, interpolate_lab, interpolate_lrgb, interpolate_num, interpolate_rgb, lab2lch, lab2rgb, lab_xyz, lch2lab, lch2rgb, lighten, limit, log, luminance_x, m, max, multiply, normal, num2rgb, overlay, pow, rgb2cmyk, rgb2css, rgb2hcg, rgb2hex, rgb2hsi, rgb2hsl, rgb2hsv, rgb2lab, rgb2lch, rgb2luminance, rgb2num, rgb2temperature, rgb2xyz, rgb_xyz, rnd, root, round, screen, sin, sqrt, temperature2rgb, type, unpack, w3cx11, xyz_lab, xyz_rgb,\r\n    slice = [].slice;\r\n\r\n  type = (function() {\r\n\r\n    /*\r\n    for browser-safe type checking+\r\n    ported from jQuery's $.type\r\n     */\r\n    var classToType, len, name, o, ref;\r\n    classToType = {};\r\n    ref = \"Boolean Number String Function Array Date RegExp Undefined Null\".split(\" \");\r\n    for (o = 0, len = ref.length; o < len; o++) {\r\n      name = ref[o];\r\n      classToType[\"[object \" + name + \"]\"] = name.toLowerCase();\r\n    }\r\n    return function(obj) {\r\n      var strType;\r\n      strType = Object.prototype.toString.call(obj);\r\n      return classToType[strType] || \"object\";\r\n    };\r\n  })();\r\n\r\n  limit = function(x, min, max) {\r\n    if (min == null) {\r\n      min = 0;\r\n    }\r\n    if (max == null) {\r\n      max = 1;\r\n    }\r\n    if (x < min) {\r\n      x = min;\r\n    }\r\n    if (x > max) {\r\n      x = max;\r\n    }\r\n    return x;\r\n  };\r\n\r\n  unpack = function(args) {\r\n    if (args.length >= 3) {\r\n      return Array.prototype.slice.call(args);\r\n    } else {\r\n      return args[0];\r\n    }\r\n  };\r\n\r\n  clip_rgb = function(rgb) {\r\n    var i, o;\r\n    rgb._clipped = false;\r\n    rgb._unclipped = rgb.slice(0);\r\n    for (i = o = 0; o < 3; i = ++o) {\r\n      if (i < 3) {\r\n        if (rgb[i] < 0 || rgb[i] > 255) {\r\n          rgb._clipped = true;\r\n        }\r\n        if (rgb[i] < 0) {\r\n          rgb[i] = 0;\r\n        }\r\n        if (rgb[i] > 255) {\r\n          rgb[i] = 255;\r\n        }\r\n      } else if (i === 3) {\r\n        if (rgb[i] < 0) {\r\n          rgb[i] = 0;\r\n        }\r\n        if (rgb[i] > 1) {\r\n          rgb[i] = 1;\r\n        }\r\n      }\r\n    }\r\n    if (!rgb._clipped) {\r\n      delete rgb._unclipped;\r\n    }\r\n    return rgb;\r\n  };\r\n\r\n  PI = Math.PI, round = Math.round, cos = Math.cos, floor = Math.floor, pow = Math.pow, log = Math.log, sin = Math.sin, sqrt = Math.sqrt, atan2 = Math.atan2, max = Math.max, abs = Math.abs;\r\n\r\n  TWOPI = PI * 2;\r\n\r\n  PITHIRD = PI / 3;\r\n\r\n  DEG2RAD = PI / 180;\r\n\r\n  RAD2DEG = 180 / PI;\r\n\r\n  chroma = function() {\r\n    if (arguments[0] instanceof Color) {\r\n      return arguments[0];\r\n    }\r\n    return (function(func, args, ctor) {\r\n      ctor.prototype = func.prototype;\r\n      var child = new ctor, result = func.apply(child, args);\r\n      return Object(result) === result ? result : child;\r\n    })(Color, arguments, function(){});\r\n  };\r\n\r\n  chroma[\"default\"] = chroma;\r\n\r\n  _interpolators = [];\r\n\r\n  if ((typeof module !== \"undefined\" && module !== null) && (module.exports != null)) {\r\n    module.exports = chroma;\r\n  }\r\n\r\n  if (typeof define === 'function' && define.amd) {\r\n    define([], function() {\r\n      return chroma;\r\n    });\r\n  } else {\r\n    root = typeof exports !== \"undefined\" && exports !== null ? exports : this;\r\n    root.chroma = chroma;\r\n  }\r\n\r\n  chroma.version = '1.3.7';\r\n\r\n  _input = {};\r\n\r\n  _guess_formats = [];\r\n\r\n  _guess_formats_sorted = false;\r\n\r\n  Color = (function() {\r\n    function Color() {\r\n      var arg, args, chk, len, len1, me, mode, o, w;\r\n      me = this;\r\n      args = [];\r\n      for (o = 0, len = arguments.length; o < len; o++) {\r\n        arg = arguments[o];\r\n        if (arg != null) {\r\n          args.push(arg);\r\n        }\r\n      }\r\n      if (args.length > 1) {\r\n        mode = args[args.length - 1];\r\n      }\r\n      if (_input[mode] != null) {\r\n        me._rgb = clip_rgb(_input[mode](unpack(args.slice(0, -1))));\r\n      } else {\r\n        if (!_guess_formats_sorted) {\r\n          _guess_formats = _guess_formats.sort(function(a, b) {\r\n            return b.p - a.p;\r\n          });\r\n          _guess_formats_sorted = true;\r\n        }\r\n        for (w = 0, len1 = _guess_formats.length; w < len1; w++) {\r\n          chk = _guess_formats[w];\r\n          mode = chk.test.apply(chk, args);\r\n          if (mode) {\r\n            break;\r\n          }\r\n        }\r\n        if (mode) {\r\n          me._rgb = clip_rgb(_input[mode].apply(_input, args));\r\n        }\r\n      }\r\n      if (me._rgb == null) {\r\n        console.warn('unknown format: ' + args);\r\n      }\r\n      if (me._rgb == null) {\r\n        me._rgb = [0, 0, 0];\r\n      }\r\n      if (me._rgb.length === 3) {\r\n        me._rgb.push(1);\r\n      }\r\n    }\r\n\r\n    Color.prototype.toString = function() {\r\n      return this.hex();\r\n    };\r\n\r\n    Color.prototype.clone = function() {\r\n      return chroma(me._rgb);\r\n    };\r\n\r\n    return Color;\r\n\r\n  })();\r\n\r\n  chroma._input = _input;\r\n\r\n\r\n  /**\r\n  \tColorBrewer colors for chroma.js\r\n  \r\n  \tCopyright (c) 2002 Cynthia Brewer, Mark Harrower, and The \r\n  \tPennsylvania State University.\r\n  \r\n  \tLicensed under the Apache License, Version 2.0 (the \"License\"); \r\n  \tyou may not use this file except in compliance with the License.\r\n  \tYou may obtain a copy of the License at\t\r\n  \thttp://www.apache.org/licenses/LICENSE-2.0\r\n  \r\n  \tUnless required by applicable law or agreed to in writing, software distributed\r\n  \tunder the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\r\n  \tCONDITIONS OF ANY KIND, either express or implied. See the License for the\r\n  \tspecific language governing permissions and limitations under the License.\r\n  \r\n      @preserve\r\n   */\r\n\r\n  chroma.brewer = brewer = {\r\n    OrRd: ['#fff7ec', '#fee8c8', '#fdd49e', '#fdbb84', '#fc8d59', '#ef6548', '#d7301f', '#b30000', '#7f0000'],\r\n    PuBu: ['#fff7fb', '#ece7f2', '#d0d1e6', '#a6bddb', '#74a9cf', '#3690c0', '#0570b0', '#045a8d', '#023858'],\r\n    BuPu: ['#f7fcfd', '#e0ecf4', '#bfd3e6', '#9ebcda', '#8c96c6', '#8c6bb1', '#88419d', '#810f7c', '#4d004b'],\r\n    Oranges: ['#fff5eb', '#fee6ce', '#fdd0a2', '#fdae6b', '#fd8d3c', '#f16913', '#d94801', '#a63603', '#7f2704'],\r\n    BuGn: ['#f7fcfd', '#e5f5f9', '#ccece6', '#99d8c9', '#66c2a4', '#41ae76', '#238b45', '#006d2c', '#00441b'],\r\n    YlOrBr: ['#ffffe5', '#fff7bc', '#fee391', '#fec44f', '#fe9929', '#ec7014', '#cc4c02', '#993404', '#662506'],\r\n    YlGn: ['#ffffe5', '#f7fcb9', '#d9f0a3', '#addd8e', '#78c679', '#41ab5d', '#238443', '#006837', '#004529'],\r\n    Reds: ['#fff5f0', '#fee0d2', '#fcbba1', '#fc9272', '#fb6a4a', '#ef3b2c', '#cb181d', '#a50f15', '#67000d'],\r\n    RdPu: ['#fff7f3', '#fde0dd', '#fcc5c0', '#fa9fb5', '#f768a1', '#dd3497', '#ae017e', '#7a0177', '#49006a'],\r\n    Greens: ['#f7fcf5', '#e5f5e0', '#c7e9c0', '#a1d99b', '#74c476', '#41ab5d', '#238b45', '#006d2c', '#00441b'],\r\n    YlGnBu: ['#ffffd9', '#edf8b1', '#c7e9b4', '#7fcdbb', '#41b6c4', '#1d91c0', '#225ea8', '#253494', '#081d58'],\r\n    Purples: ['#fcfbfd', '#efedf5', '#dadaeb', '#bcbddc', '#9e9ac8', '#807dba', '#6a51a3', '#54278f', '#3f007d'],\r\n    GnBu: ['#f7fcf0', '#e0f3db', '#ccebc5', '#a8ddb5', '#7bccc4', '#4eb3d3', '#2b8cbe', '#0868ac', '#084081'],\r\n    Greys: ['#ffffff', '#f0f0f0', '#d9d9d9', '#bdbdbd', '#969696', '#737373', '#525252', '#252525', '#000000'],\r\n    YlOrRd: ['#ffffcc', '#ffeda0', '#fed976', '#feb24c', '#fd8d3c', '#fc4e2a', '#e31a1c', '#bd0026', '#800026'],\r\n    PuRd: ['#f7f4f9', '#e7e1ef', '#d4b9da', '#c994c7', '#df65b0', '#e7298a', '#ce1256', '#980043', '#67001f'],\r\n    Blues: ['#f7fbff', '#deebf7', '#c6dbef', '#9ecae1', '#6baed6', '#4292c6', '#2171b5', '#08519c', '#08306b'],\r\n    PuBuGn: ['#fff7fb', '#ece2f0', '#d0d1e6', '#a6bddb', '#67a9cf', '#3690c0', '#02818a', '#016c59', '#014636'],\r\n    Viridis: ['#440154', '#482777', '#3f4a8a', '#31678e', '#26838f', '#1f9d8a', '#6cce5a', '#b6de2b', '#fee825'],\r\n    Spectral: ['#9e0142', '#d53e4f', '#f46d43', '#fdae61', '#fee08b', '#ffffbf', '#e6f598', '#abdda4', '#66c2a5', '#3288bd', '#5e4fa2'],\r\n    RdYlGn: ['#a50026', '#d73027', '#f46d43', '#fdae61', '#fee08b', '#ffffbf', '#d9ef8b', '#a6d96a', '#66bd63', '#1a9850', '#006837'],\r\n    RdBu: ['#67001f', '#b2182b', '#d6604d', '#f4a582', '#fddbc7', '#f7f7f7', '#d1e5f0', '#92c5de', '#4393c3', '#2166ac', '#053061'],\r\n    PiYG: ['#8e0152', '#c51b7d', '#de77ae', '#f1b6da', '#fde0ef', '#f7f7f7', '#e6f5d0', '#b8e186', '#7fbc41', '#4d9221', '#276419'],\r\n    PRGn: ['#40004b', '#762a83', '#9970ab', '#c2a5cf', '#e7d4e8', '#f7f7f7', '#d9f0d3', '#a6dba0', '#5aae61', '#1b7837', '#00441b'],\r\n    RdYlBu: ['#a50026', '#d73027', '#f46d43', '#fdae61', '#fee090', '#ffffbf', '#e0f3f8', '#abd9e9', '#74add1', '#4575b4', '#313695'],\r\n    BrBG: ['#543005', '#8c510a', '#bf812d', '#dfc27d', '#f6e8c3', '#f5f5f5', '#c7eae5', '#80cdc1', '#35978f', '#01665e', '#003c30'],\r\n    RdGy: ['#67001f', '#b2182b', '#d6604d', '#f4a582', '#fddbc7', '#ffffff', '#e0e0e0', '#bababa', '#878787', '#4d4d4d', '#1a1a1a'],\r\n    PuOr: ['#7f3b08', '#b35806', '#e08214', '#fdb863', '#fee0b6', '#f7f7f7', '#d8daeb', '#b2abd2', '#8073ac', '#542788', '#2d004b'],\r\n    Set2: ['#66c2a5', '#fc8d62', '#8da0cb', '#e78ac3', '#a6d854', '#ffd92f', '#e5c494', '#b3b3b3'],\r\n    Accent: ['#7fc97f', '#beaed4', '#fdc086', '#ffff99', '#386cb0', '#f0027f', '#bf5b17', '#666666'],\r\n    Set1: ['#e41a1c', '#377eb8', '#4daf4a', '#984ea3', '#ff7f00', '#ffff33', '#a65628', '#f781bf', '#999999'],\r\n    Set3: ['#8dd3c7', '#ffffb3', '#bebada', '#fb8072', '#80b1d3', '#fdb462', '#b3de69', '#fccde5', '#d9d9d9', '#bc80bd', '#ccebc5', '#ffed6f'],\r\n    Dark2: ['#1b9e77', '#d95f02', '#7570b3', '#e7298a', '#66a61e', '#e6ab02', '#a6761d', '#666666'],\r\n    Paired: ['#a6cee3', '#1f78b4', '#b2df8a', '#33a02c', '#fb9a99', '#e31a1c', '#fdbf6f', '#ff7f00', '#cab2d6', '#6a3d9a', '#ffff99', '#b15928'],\r\n    Pastel2: ['#b3e2cd', '#fdcdac', '#cbd5e8', '#f4cae4', '#e6f5c9', '#fff2ae', '#f1e2cc', '#cccccc'],\r\n    Pastel1: ['#fbb4ae', '#b3cde3', '#ccebc5', '#decbe4', '#fed9a6', '#ffffcc', '#e5d8bd', '#fddaec', '#f2f2f2']\r\n  };\r\n\r\n  (function() {\r\n    var key, results;\r\n    results = [];\r\n    for (key in brewer) {\r\n      results.push(brewer[key.toLowerCase()] = brewer[key]);\r\n    }\r\n    return results;\r\n  })();\r\n\r\n\r\n  /**\r\n  \tX11 color names\r\n  \r\n  \thttp://www.w3.org/TR/css3-color/#svg-color\r\n   */\r\n\r\n  w3cx11 = {\r\n    aliceblue: '#f0f8ff',\r\n    antiquewhite: '#faebd7',\r\n    aqua: '#00ffff',\r\n    aquamarine: '#7fffd4',\r\n    azure: '#f0ffff',\r\n    beige: '#f5f5dc',\r\n    bisque: '#ffe4c4',\r\n    black: '#000000',\r\n    blanchedalmond: '#ffebcd',\r\n    blue: '#0000ff',\r\n    blueviolet: '#8a2be2',\r\n    brown: '#a52a2a',\r\n    burlywood: '#deb887',\r\n    cadetblue: '#5f9ea0',\r\n    chartreuse: '#7fff00',\r\n    chocolate: '#d2691e',\r\n    coral: '#ff7f50',\r\n    cornflower: '#6495ed',\r\n    cornflowerblue: '#6495ed',\r\n    cornsilk: '#fff8dc',\r\n    crimson: '#dc143c',\r\n    cyan: '#00ffff',\r\n    darkblue: '#00008b',\r\n    darkcyan: '#008b8b',\r\n    darkgoldenrod: '#b8860b',\r\n    darkgray: '#a9a9a9',\r\n    darkgreen: '#006400',\r\n    darkgrey: '#a9a9a9',\r\n    darkkhaki: '#bdb76b',\r\n    darkmagenta: '#8b008b',\r\n    darkolivegreen: '#556b2f',\r\n    darkorange: '#ff8c00',\r\n    darkorchid: '#9932cc',\r\n    darkred: '#8b0000',\r\n    darksalmon: '#e9967a',\r\n    darkseagreen: '#8fbc8f',\r\n    darkslateblue: '#483d8b',\r\n    darkslategray: '#2f4f4f',\r\n    darkslategrey: '#2f4f4f',\r\n    darkturquoise: '#00ced1',\r\n    darkviolet: '#9400d3',\r\n    deeppink: '#ff1493',\r\n    deepskyblue: '#00bfff',\r\n    dimgray: '#696969',\r\n    dimgrey: '#696969',\r\n    dodgerblue: '#1e90ff',\r\n    firebrick: '#b22222',\r\n    floralwhite: '#fffaf0',\r\n    forestgreen: '#228b22',\r\n    fuchsia: '#ff00ff',\r\n    gainsboro: '#dcdcdc',\r\n    ghostwhite: '#f8f8ff',\r\n    gold: '#ffd700',\r\n    goldenrod: '#daa520',\r\n    gray: '#808080',\r\n    green: '#008000',\r\n    greenyellow: '#adff2f',\r\n    grey: '#808080',\r\n    honeydew: '#f0fff0',\r\n    hotpink: '#ff69b4',\r\n    indianred: '#cd5c5c',\r\n    indigo: '#4b0082',\r\n    ivory: '#fffff0',\r\n    khaki: '#f0e68c',\r\n    laserlemon: '#ffff54',\r\n    lavender: '#e6e6fa',\r\n    lavenderblush: '#fff0f5',\r\n    lawngreen: '#7cfc00',\r\n    lemonchiffon: '#fffacd',\r\n    lightblue: '#add8e6',\r\n    lightcoral: '#f08080',\r\n    lightcyan: '#e0ffff',\r\n    lightgoldenrod: '#fafad2',\r\n    lightgoldenrodyellow: '#fafad2',\r\n    lightgray: '#d3d3d3',\r\n    lightgreen: '#90ee90',\r\n    lightgrey: '#d3d3d3',\r\n    lightpink: '#ffb6c1',\r\n    lightsalmon: '#ffa07a',\r\n    lightseagreen: '#20b2aa',\r\n    lightskyblue: '#87cefa',\r\n    lightslategray: '#778899',\r\n    lightslategrey: '#778899',\r\n    lightsteelblue: '#b0c4de',\r\n    lightyellow: '#ffffe0',\r\n    lime: '#00ff00',\r\n    limegreen: '#32cd32',\r\n    linen: '#faf0e6',\r\n    magenta: '#ff00ff',\r\n    maroon: '#800000',\r\n    maroon2: '#7f0000',\r\n    maroon3: '#b03060',\r\n    mediumaquamarine: '#66cdaa',\r\n    mediumblue: '#0000cd',\r\n    mediumorchid: '#ba55d3',\r\n    mediumpurple: '#9370db',\r\n    mediumseagreen: '#3cb371',\r\n    mediumslateblue: '#7b68ee',\r\n    mediumspringgreen: '#00fa9a',\r\n    mediumturquoise: '#48d1cc',\r\n    mediumvioletred: '#c71585',\r\n    midnightblue: '#191970',\r\n    mintcream: '#f5fffa',\r\n    mistyrose: '#ffe4e1',\r\n    moccasin: '#ffe4b5',\r\n    navajowhite: '#ffdead',\r\n    navy: '#000080',\r\n    oldlace: '#fdf5e6',\r\n    olive: '#808000',\r\n    olivedrab: '#6b8e23',\r\n    orange: '#ffa500',\r\n    orangered: '#ff4500',\r\n    orchid: '#da70d6',\r\n    palegoldenrod: '#eee8aa',\r\n    palegreen: '#98fb98',\r\n    paleturquoise: '#afeeee',\r\n    palevioletred: '#db7093',\r\n    papayawhip: '#ffefd5',\r\n    peachpuff: '#ffdab9',\r\n    peru: '#cd853f',\r\n    pink: '#ffc0cb',\r\n    plum: '#dda0dd',\r\n    powderblue: '#b0e0e6',\r\n    purple: '#800080',\r\n    purple2: '#7f007f',\r\n    purple3: '#a020f0',\r\n    rebeccapurple: '#663399',\r\n    red: '#ff0000',\r\n    rosybrown: '#bc8f8f',\r\n    royalblue: '#4169e1',\r\n    saddlebrown: '#8b4513',\r\n    salmon: '#fa8072',\r\n    sandybrown: '#f4a460',\r\n    seagreen: '#2e8b57',\r\n    seashell: '#fff5ee',\r\n    sienna: '#a0522d',\r\n    silver: '#c0c0c0',\r\n    skyblue: '#87ceeb',\r\n    slateblue: '#6a5acd',\r\n    slategray: '#708090',\r\n    slategrey: '#708090',\r\n    snow: '#fffafa',\r\n    springgreen: '#00ff7f',\r\n    steelblue: '#4682b4',\r\n    tan: '#d2b48c',\r\n    teal: '#008080',\r\n    thistle: '#d8bfd8',\r\n    tomato: '#ff6347',\r\n    turquoise: '#40e0d0',\r\n    violet: '#ee82ee',\r\n    wheat: '#f5deb3',\r\n    white: '#ffffff',\r\n    whitesmoke: '#f5f5f5',\r\n    yellow: '#ffff00',\r\n    yellowgreen: '#9acd32'\r\n  };\r\n\r\n  chroma.colors = colors = w3cx11;\r\n\r\n  lab2rgb = function() {\r\n    var a, args, b, g, l, r, x, y, z;\r\n    args = unpack(arguments);\r\n    l = args[0], a = args[1], b = args[2];\r\n    y = (l + 16) / 116;\r\n    x = isNaN(a) ? y : y + a / 500;\r\n    z = isNaN(b) ? y : y - b / 200;\r\n    y = LAB_CONSTANTS.Yn * lab_xyz(y);\r\n    x = LAB_CONSTANTS.Xn * lab_xyz(x);\r\n    z = LAB_CONSTANTS.Zn * lab_xyz(z);\r\n    r = xyz_rgb(3.2404542 * x - 1.5371385 * y - 0.4985314 * z);\r\n    g = xyz_rgb(-0.9692660 * x + 1.8760108 * y + 0.0415560 * z);\r\n    b = xyz_rgb(0.0556434 * x - 0.2040259 * y + 1.0572252 * z);\r\n    return [r, g, b, args.length > 3 ? args[3] : 1];\r\n  };\r\n\r\n  xyz_rgb = function(r) {\r\n    return 255 * (r <= 0.00304 ? 12.92 * r : 1.055 * pow(r, 1 / 2.4) - 0.055);\r\n  };\r\n\r\n  lab_xyz = function(t) {\r\n    if (t > LAB_CONSTANTS.t1) {\r\n      return t * t * t;\r\n    } else {\r\n      return LAB_CONSTANTS.t2 * (t - LAB_CONSTANTS.t0);\r\n    }\r\n  };\r\n\r\n  LAB_CONSTANTS = {\r\n    Kn: 18,\r\n    Xn: 0.950470,\r\n    Yn: 1,\r\n    Zn: 1.088830,\r\n    t0: 0.137931034,\r\n    t1: 0.206896552,\r\n    t2: 0.12841855,\r\n    t3: 0.008856452\r\n  };\r\n\r\n  rgb2lab = function() {\r\n    var b, g, r, ref, ref1, x, y, z;\r\n    ref = unpack(arguments), r = ref[0], g = ref[1], b = ref[2];\r\n    ref1 = rgb2xyz(r, g, b), x = ref1[0], y = ref1[1], z = ref1[2];\r\n    return [116 * y - 16, 500 * (x - y), 200 * (y - z)];\r\n  };\r\n\r\n  rgb_xyz = function(r) {\r\n    if ((r /= 255) <= 0.04045) {\r\n      return r / 12.92;\r\n    } else {\r\n      return pow((r + 0.055) / 1.055, 2.4);\r\n    }\r\n  };\r\n\r\n  xyz_lab = function(t) {\r\n    if (t > LAB_CONSTANTS.t3) {\r\n      return pow(t, 1 / 3);\r\n    } else {\r\n      return t / LAB_CONSTANTS.t2 + LAB_CONSTANTS.t0;\r\n    }\r\n  };\r\n\r\n  rgb2xyz = function() {\r\n    var b, g, r, ref, x, y, z;\r\n    ref = unpack(arguments), r = ref[0], g = ref[1], b = ref[2];\r\n    r = rgb_xyz(r);\r\n    g = rgb_xyz(g);\r\n    b = rgb_xyz(b);\r\n    x = xyz_lab((0.4124564 * r + 0.3575761 * g + 0.1804375 * b) / LAB_CONSTANTS.Xn);\r\n    y = xyz_lab((0.2126729 * r + 0.7151522 * g + 0.0721750 * b) / LAB_CONSTANTS.Yn);\r\n    z = xyz_lab((0.0193339 * r + 0.1191920 * g + 0.9503041 * b) / LAB_CONSTANTS.Zn);\r\n    return [x, y, z];\r\n  };\r\n\r\n  chroma.lab = function() {\r\n    return (function(func, args, ctor) {\r\n      ctor.prototype = func.prototype;\r\n      var child = new ctor, result = func.apply(child, args);\r\n      return Object(result) === result ? result : child;\r\n    })(Color, slice.call(arguments).concat(['lab']), function(){});\r\n  };\r\n\r\n  _input.lab = lab2rgb;\r\n\r\n  Color.prototype.lab = function() {\r\n    return rgb2lab(this._rgb);\r\n  };\r\n\r\n  bezier = function(colors) {\r\n    var I, I0, I1, c, lab0, lab1, lab2, lab3, ref, ref1, ref2;\r\n    colors = (function() {\r\n      var len, o, results;\r\n      results = [];\r\n      for (o = 0, len = colors.length; o < len; o++) {\r\n        c = colors[o];\r\n        results.push(chroma(c));\r\n      }\r\n      return results;\r\n    })();\r\n    if (colors.length === 2) {\r\n      ref = (function() {\r\n        var len, o, results;\r\n        results = [];\r\n        for (o = 0, len = colors.length; o < len; o++) {\r\n          c = colors[o];\r\n          results.push(c.lab());\r\n        }\r\n        return results;\r\n      })(), lab0 = ref[0], lab1 = ref[1];\r\n      I = function(t) {\r\n        var i, lab;\r\n        lab = (function() {\r\n          var o, results;\r\n          results = [];\r\n          for (i = o = 0; o <= 2; i = ++o) {\r\n            results.push(lab0[i] + t * (lab1[i] - lab0[i]));\r\n          }\r\n          return results;\r\n        })();\r\n        return chroma.lab.apply(chroma, lab);\r\n      };\r\n    } else if (colors.length === 3) {\r\n      ref1 = (function() {\r\n        var len, o, results;\r\n        results = [];\r\n        for (o = 0, len = colors.length; o < len; o++) {\r\n          c = colors[o];\r\n          results.push(c.lab());\r\n        }\r\n        return results;\r\n      })(), lab0 = ref1[0], lab1 = ref1[1], lab2 = ref1[2];\r\n      I = function(t) {\r\n        var i, lab;\r\n        lab = (function() {\r\n          var o, results;\r\n          results = [];\r\n          for (i = o = 0; o <= 2; i = ++o) {\r\n            results.push((1 - t) * (1 - t) * lab0[i] + 2 * (1 - t) * t * lab1[i] + t * t * lab2[i]);\r\n          }\r\n          return results;\r\n        })();\r\n        return chroma.lab.apply(chroma, lab);\r\n      };\r\n    } else if (colors.length === 4) {\r\n      ref2 = (function() {\r\n        var len, o, results;\r\n        results = [];\r\n        for (o = 0, len = colors.length; o < len; o++) {\r\n          c = colors[o];\r\n          results.push(c.lab());\r\n        }\r\n        return results;\r\n      })(), lab0 = ref2[0], lab1 = ref2[1], lab2 = ref2[2], lab3 = ref2[3];\r\n      I = function(t) {\r\n        var i, lab;\r\n        lab = (function() {\r\n          var o, results;\r\n          results = [];\r\n          for (i = o = 0; o <= 2; i = ++o) {\r\n            results.push((1 - t) * (1 - t) * (1 - t) * lab0[i] + 3 * (1 - t) * (1 - t) * t * lab1[i] + 3 * (1 - t) * t * t * lab2[i] + t * t * t * lab3[i]);\r\n          }\r\n          return results;\r\n        })();\r\n        return chroma.lab.apply(chroma, lab);\r\n      };\r\n    } else if (colors.length === 5) {\r\n      I0 = bezier(colors.slice(0, 3));\r\n      I1 = bezier(colors.slice(2, 5));\r\n      I = function(t) {\r\n        if (t < 0.5) {\r\n          return I0(t * 2);\r\n        } else {\r\n          return I1((t - 0.5) * 2);\r\n        }\r\n      };\r\n    }\r\n    return I;\r\n  };\r\n\r\n  chroma.bezier = function(colors) {\r\n    var f;\r\n    f = bezier(colors);\r\n    f.scale = function() {\r\n      return chroma.scale(f);\r\n    };\r\n    return f;\r\n  };\r\n\r\n\r\n  /*\r\n      chroma.js\r\n  \r\n      Copyright (c) 2011-2013, Gregor Aisch\r\n      All rights reserved.\r\n  \r\n      Redistribution and use in source and binary forms, with or without\r\n      modification, are permitted provided that the following conditions are met:\r\n  \r\n      * Redistributions of source code must retain the above copyright notice, this\r\n        list of conditions and the following disclaimer.\r\n  \r\n      * Redistributions in binary form must reproduce the above copyright notice,\r\n        this list of conditions and the following disclaimer in the documentation\r\n        and/or other materials provided with the distribution.\r\n  \r\n      * The name Gregor Aisch may not be used to endorse or promote products\r\n        derived from this software without specific prior written permission.\r\n  \r\n      THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\r\n      AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\r\n      IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\r\n      DISCLAIMED. IN NO EVENT SHALL GREGOR AISCH OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n      INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,\r\n      BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\r\n      DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY\r\n      OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING\r\n      NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,\r\n      EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\r\n  \r\n      @source: https://github.com/gka/chroma.js\r\n   */\r\n\r\n  chroma.cubehelix = function(start, rotations, hue, gamma, lightness) {\r\n    var dh, dl, f;\r\n    if (start == null) {\r\n      start = 300;\r\n    }\r\n    if (rotations == null) {\r\n      rotations = -1.5;\r\n    }\r\n    if (hue == null) {\r\n      hue = 1;\r\n    }\r\n    if (gamma == null) {\r\n      gamma = 1;\r\n    }\r\n    if (lightness == null) {\r\n      lightness = [0, 1];\r\n    }\r\n    dh = 0;\r\n    if (type(lightness) === 'array') {\r\n      dl = lightness[1] - lightness[0];\r\n    } else {\r\n      dl = 0;\r\n      lightness = [lightness, lightness];\r\n    }\r\n    f = function(fract) {\r\n      var a, amp, b, cos_a, g, h, l, r, sin_a;\r\n      a = TWOPI * ((start + 120) / 360 + rotations * fract);\r\n      l = pow(lightness[0] + dl * fract, gamma);\r\n      h = dh !== 0 ? hue[0] + fract * dh : hue;\r\n      amp = h * l * (1 - l) / 2;\r\n      cos_a = cos(a);\r\n      sin_a = sin(a);\r\n      r = l + amp * (-0.14861 * cos_a + 1.78277 * sin_a);\r\n      g = l + amp * (-0.29227 * cos_a - 0.90649 * sin_a);\r\n      b = l + amp * (+1.97294 * cos_a);\r\n      return chroma(clip_rgb([r * 255, g * 255, b * 255]));\r\n    };\r\n    f.start = function(s) {\r\n      if (s == null) {\r\n        return start;\r\n      }\r\n      start = s;\r\n      return f;\r\n    };\r\n    f.rotations = function(r) {\r\n      if (r == null) {\r\n        return rotations;\r\n      }\r\n      rotations = r;\r\n      return f;\r\n    };\r\n    f.gamma = function(g) {\r\n      if (g == null) {\r\n        return gamma;\r\n      }\r\n      gamma = g;\r\n      return f;\r\n    };\r\n    f.hue = function(h) {\r\n      if (h == null) {\r\n        return hue;\r\n      }\r\n      hue = h;\r\n      if (type(hue) === 'array') {\r\n        dh = hue[1] - hue[0];\r\n        if (dh === 0) {\r\n          hue = hue[1];\r\n        }\r\n      } else {\r\n        dh = 0;\r\n      }\r\n      return f;\r\n    };\r\n    f.lightness = function(h) {\r\n      if (h == null) {\r\n        return lightness;\r\n      }\r\n      if (type(h) === 'array') {\r\n        lightness = h;\r\n        dl = h[1] - h[0];\r\n      } else {\r\n        lightness = [h, h];\r\n        dl = 0;\r\n      }\r\n      return f;\r\n    };\r\n    f.scale = function() {\r\n      return chroma.scale(f);\r\n    };\r\n    f.hue(hue);\r\n    return f;\r\n  };\r\n\r\n  chroma.random = function() {\r\n    var code, digits, i, o;\r\n    digits = '0123456789abcdef';\r\n    code = '#';\r\n    for (i = o = 0; o < 6; i = ++o) {\r\n      code += digits.charAt(floor(Math.random() * 16));\r\n    }\r\n    return new Color(code);\r\n  };\r\n\r\n  _interpolators = [];\r\n\r\n  interpolate = function(col1, col2, f, m) {\r\n    var interpol, len, o, res;\r\n    if (f == null) {\r\n      f = 0.5;\r\n    }\r\n    if (m == null) {\r\n      m = 'rgb';\r\n    }\r\n\r\n    /*\r\n    interpolates between colors\r\n    f = 0 --> me\r\n    f = 1 --> col\r\n     */\r\n    if (type(col1) !== 'object') {\r\n      col1 = chroma(col1);\r\n    }\r\n    if (type(col2) !== 'object') {\r\n      col2 = chroma(col2);\r\n    }\r\n    for (o = 0, len = _interpolators.length; o < len; o++) {\r\n      interpol = _interpolators[o];\r\n      if (m === interpol[0]) {\r\n        res = interpol[1](col1, col2, f, m);\r\n        break;\r\n      }\r\n    }\r\n    if (res == null) {\r\n      throw \"color mode \" + m + \" is not supported\";\r\n    }\r\n    return res.alpha(col1.alpha() + f * (col2.alpha() - col1.alpha()));\r\n  };\r\n\r\n  chroma.interpolate = interpolate;\r\n\r\n  Color.prototype.interpolate = function(col2, f, m) {\r\n    return interpolate(this, col2, f, m);\r\n  };\r\n\r\n  chroma.mix = interpolate;\r\n\r\n  Color.prototype.mix = Color.prototype.interpolate;\r\n\r\n  _input.rgb = function() {\r\n    var k, ref, results, v;\r\n    ref = unpack(arguments);\r\n    results = [];\r\n    for (k in ref) {\r\n      v = ref[k];\r\n      results.push(v);\r\n    }\r\n    return results;\r\n  };\r\n\r\n  chroma.rgb = function() {\r\n    return (function(func, args, ctor) {\r\n      ctor.prototype = func.prototype;\r\n      var child = new ctor, result = func.apply(child, args);\r\n      return Object(result) === result ? result : child;\r\n    })(Color, slice.call(arguments).concat(['rgb']), function(){});\r\n  };\r\n\r\n  Color.prototype.rgb = function(round) {\r\n    if (round == null) {\r\n      round = true;\r\n    }\r\n    if (round) {\r\n      return this._rgb.map(Math.round).slice(0, 3);\r\n    } else {\r\n      return this._rgb.slice(0, 3);\r\n    }\r\n  };\r\n\r\n  Color.prototype.rgba = function(round) {\r\n    if (round == null) {\r\n      round = true;\r\n    }\r\n    if (!round) {\r\n      return this._rgb.slice(0);\r\n    }\r\n    return [Math.round(this._rgb[0]), Math.round(this._rgb[1]), Math.round(this._rgb[2]), this._rgb[3]];\r\n  };\r\n\r\n  _guess_formats.push({\r\n    p: 3,\r\n    test: function(n) {\r\n      var a;\r\n      a = unpack(arguments);\r\n      if (type(a) === 'array' && a.length === 3) {\r\n        return 'rgb';\r\n      }\r\n      if (a.length === 4 && type(a[3]) === \"number\" && a[3] >= 0 && a[3] <= 1) {\r\n        return 'rgb';\r\n      }\r\n    }\r\n  });\r\n\r\n  _input.lrgb = _input.rgb;\r\n\r\n  interpolate_lrgb = function(col1, col2, f, m) {\r\n    var xyz0, xyz1;\r\n    xyz0 = col1._rgb;\r\n    xyz1 = col2._rgb;\r\n    return new Color(sqrt(pow(xyz0[0], 2) * (1 - f) + pow(xyz1[0], 2) * f), sqrt(pow(xyz0[1], 2) * (1 - f) + pow(xyz1[1], 2) * f), sqrt(pow(xyz0[2], 2) * (1 - f) + pow(xyz1[2], 2) * f), m);\r\n  };\r\n\r\n  _average_lrgb = function(colors) {\r\n    var col, f, len, o, rgb, xyz;\r\n    f = 1 / colors.length;\r\n    xyz = [0, 0, 0, 0];\r\n    for (o = 0, len = colors.length; o < len; o++) {\r\n      col = colors[o];\r\n      rgb = col._rgb;\r\n      xyz[0] += pow(rgb[0], 2) * f;\r\n      xyz[1] += pow(rgb[1], 2) * f;\r\n      xyz[2] += pow(rgb[2], 2) * f;\r\n      xyz[3] += rgb[3] * f;\r\n    }\r\n    xyz[0] = sqrt(xyz[0]);\r\n    xyz[1] = sqrt(xyz[1]);\r\n    xyz[2] = sqrt(xyz[2]);\r\n    return new Color(xyz);\r\n  };\r\n\r\n  _interpolators.push(['lrgb', interpolate_lrgb]);\r\n\r\n  chroma.average = function(colors, mode) {\r\n    var A, alpha, c, cnt, dx, dy, first, i, l, len, o, xyz, xyz2;\r\n    if (mode == null) {\r\n      mode = 'rgb';\r\n    }\r\n    l = colors.length;\r\n    colors = colors.map(function(c) {\r\n      return chroma(c);\r\n    });\r\n    first = colors.splice(0, 1)[0];\r\n    if (mode === 'lrgb') {\r\n      return _average_lrgb(colors);\r\n    }\r\n    xyz = first.get(mode);\r\n    cnt = [];\r\n    dx = 0;\r\n    dy = 0;\r\n    for (i in xyz) {\r\n      xyz[i] = xyz[i] || 0;\r\n      cnt.push(isNaN(xyz[i]) ? 0 : 1);\r\n      if (mode.charAt(i) === 'h' && !isNaN(xyz[i])) {\r\n        A = xyz[i] / 180 * PI;\r\n        dx += cos(A);\r\n        dy += sin(A);\r\n      }\r\n    }\r\n    alpha = first.alpha();\r\n    for (o = 0, len = colors.length; o < len; o++) {\r\n      c = colors[o];\r\n      xyz2 = c.get(mode);\r\n      alpha += c.alpha();\r\n      for (i in xyz) {\r\n        if (!isNaN(xyz2[i])) {\r\n          cnt[i] += 1;\r\n          if (mode.charAt(i) === 'h') {\r\n            A = xyz2[i] / 180 * PI;\r\n            dx += cos(A);\r\n            dy += sin(A);\r\n          } else {\r\n            xyz[i] += xyz2[i];\r\n          }\r\n        }\r\n      }\r\n    }\r\n    for (i in xyz) {\r\n      if (mode.charAt(i) === 'h') {\r\n        A = atan2(dy / cnt[i], dx / cnt[i]) / PI * 180;\r\n        while (A < 0) {\r\n          A += 360;\r\n        }\r\n        while (A >= 360) {\r\n          A -= 360;\r\n        }\r\n        xyz[i] = A;\r\n      } else {\r\n        xyz[i] = xyz[i] / cnt[i];\r\n      }\r\n    }\r\n    return chroma(xyz, mode).alpha(alpha / l);\r\n  };\r\n\r\n  hex2rgb = function(hex) {\r\n    var a, b, g, r, rgb, u;\r\n    if (hex.match(/^#?([A-Fa-f0-9]{6}|[A-Fa-f0-9]{3})$/)) {\r\n      if (hex.length === 4 || hex.length === 7) {\r\n        hex = hex.substr(1);\r\n      }\r\n      if (hex.length === 3) {\r\n        hex = hex.split(\"\");\r\n        hex = hex[0] + hex[0] + hex[1] + hex[1] + hex[2] + hex[2];\r\n      }\r\n      u = parseInt(hex, 16);\r\n      r = u >> 16;\r\n      g = u >> 8 & 0xFF;\r\n      b = u & 0xFF;\r\n      return [r, g, b, 1];\r\n    }\r\n    if (hex.match(/^#?([A-Fa-f0-9]{8})$/)) {\r\n      if (hex.length === 9) {\r\n        hex = hex.substr(1);\r\n      }\r\n      u = parseInt(hex, 16);\r\n      r = u >> 24 & 0xFF;\r\n      g = u >> 16 & 0xFF;\r\n      b = u >> 8 & 0xFF;\r\n      a = round((u & 0xFF) / 0xFF * 100) / 100;\r\n      return [r, g, b, a];\r\n    }\r\n    if ((_input.css != null) && (rgb = _input.css(hex))) {\r\n      return rgb;\r\n    }\r\n    throw \"unknown color: \" + hex;\r\n  };\r\n\r\n  rgb2hex = function(channels, mode) {\r\n    var a, b, g, hxa, r, str, u;\r\n    if (mode == null) {\r\n      mode = 'rgb';\r\n    }\r\n    r = channels[0], g = channels[1], b = channels[2], a = channels[3];\r\n    r = Math.round(r);\r\n    g = Math.round(g);\r\n    b = Math.round(b);\r\n    u = r << 16 | g << 8 | b;\r\n    str = \"000000\" + u.toString(16);\r\n    str = str.substr(str.length - 6);\r\n    hxa = '0' + round(a * 255).toString(16);\r\n    hxa = hxa.substr(hxa.length - 2);\r\n    return \"#\" + (function() {\r\n      switch (mode.toLowerCase()) {\r\n        case 'rgba':\r\n          return str + hxa;\r\n        case 'argb':\r\n          return hxa + str;\r\n        default:\r\n          return str;\r\n      }\r\n    })();\r\n  };\r\n\r\n  _input.hex = function(h) {\r\n    return hex2rgb(h);\r\n  };\r\n\r\n  chroma.hex = function() {\r\n    return (function(func, args, ctor) {\r\n      ctor.prototype = func.prototype;\r\n      var child = new ctor, result = func.apply(child, args);\r\n      return Object(result) === result ? result : child;\r\n    })(Color, slice.call(arguments).concat(['hex']), function(){});\r\n  };\r\n\r\n  Color.prototype.hex = function(mode) {\r\n    if (mode == null) {\r\n      mode = 'rgb';\r\n    }\r\n    return rgb2hex(this._rgb, mode);\r\n  };\r\n\r\n  _guess_formats.push({\r\n    p: 4,\r\n    test: function(n) {\r\n      if (arguments.length === 1 && type(n) === \"string\") {\r\n        return 'hex';\r\n      }\r\n    }\r\n  });\r\n\r\n  hsl2rgb = function() {\r\n    var args, b, c, g, h, i, l, o, r, ref, s, t1, t2, t3;\r\n    args = unpack(arguments);\r\n    h = args[0], s = args[1], l = args[2];\r\n    if (s === 0) {\r\n      r = g = b = l * 255;\r\n    } else {\r\n      t3 = [0, 0, 0];\r\n      c = [0, 0, 0];\r\n      t2 = l < 0.5 ? l * (1 + s) : l + s - l * s;\r\n      t1 = 2 * l - t2;\r\n      h /= 360;\r\n      t3[0] = h + 1 / 3;\r\n      t3[1] = h;\r\n      t3[2] = h - 1 / 3;\r\n      for (i = o = 0; o <= 2; i = ++o) {\r\n        if (t3[i] < 0) {\r\n          t3[i] += 1;\r\n        }\r\n        if (t3[i] > 1) {\r\n          t3[i] -= 1;\r\n        }\r\n        if (6 * t3[i] < 1) {\r\n          c[i] = t1 + (t2 - t1) * 6 * t3[i];\r\n        } else if (2 * t3[i] < 1) {\r\n          c[i] = t2;\r\n        } else if (3 * t3[i] < 2) {\r\n          c[i] = t1 + (t2 - t1) * ((2 / 3) - t3[i]) * 6;\r\n        } else {\r\n          c[i] = t1;\r\n        }\r\n      }\r\n      ref = [round(c[0] * 255), round(c[1] * 255), round(c[2] * 255)], r = ref[0], g = ref[1], b = ref[2];\r\n    }\r\n    if (args.length > 3) {\r\n      return [r, g, b, args[3]];\r\n    } else {\r\n      return [r, g, b];\r\n    }\r\n  };\r\n\r\n  rgb2hsl = function(r, g, b) {\r\n    var h, l, min, ref, s;\r\n    if (r !== void 0 && r.length >= 3) {\r\n      ref = r, r = ref[0], g = ref[1], b = ref[2];\r\n    }\r\n    r /= 255;\r\n    g /= 255;\r\n    b /= 255;\r\n    min = Math.min(r, g, b);\r\n    max = Math.max(r, g, b);\r\n    l = (max + min) / 2;\r\n    if (max === min) {\r\n      s = 0;\r\n      h = Number.NaN;\r\n    } else {\r\n      s = l < 0.5 ? (max - min) / (max + min) : (max - min) / (2 - max - min);\r\n    }\r\n    if (r === max) {\r\n      h = (g - b) / (max - min);\r\n    } else if (g === max) {\r\n      h = 2 + (b - r) / (max - min);\r\n    } else if (b === max) {\r\n      h = 4 + (r - g) / (max - min);\r\n    }\r\n    h *= 60;\r\n    if (h < 0) {\r\n      h += 360;\r\n    }\r\n    return [h, s, l];\r\n  };\r\n\r\n  chroma.hsl = function() {\r\n    return (function(func, args, ctor) {\r\n      ctor.prototype = func.prototype;\r\n      var child = new ctor, result = func.apply(child, args);\r\n      return Object(result) === result ? result : child;\r\n    })(Color, slice.call(arguments).concat(['hsl']), function(){});\r\n  };\r\n\r\n  _input.hsl = hsl2rgb;\r\n\r\n  Color.prototype.hsl = function() {\r\n    return rgb2hsl(this._rgb);\r\n  };\r\n\r\n  hsv2rgb = function() {\r\n    var args, b, f, g, h, i, p, q, r, ref, ref1, ref2, ref3, ref4, ref5, s, t, v;\r\n    args = unpack(arguments);\r\n    h = args[0], s = args[1], v = args[2];\r\n    v *= 255;\r\n    if (s === 0) {\r\n      r = g = b = v;\r\n    } else {\r\n      if (h === 360) {\r\n        h = 0;\r\n      }\r\n      if (h > 360) {\r\n        h -= 360;\r\n      }\r\n      if (h < 0) {\r\n        h += 360;\r\n      }\r\n      h /= 60;\r\n      i = floor(h);\r\n      f = h - i;\r\n      p = v * (1 - s);\r\n      q = v * (1 - s * f);\r\n      t = v * (1 - s * (1 - f));\r\n      switch (i) {\r\n        case 0:\r\n          ref = [v, t, p], r = ref[0], g = ref[1], b = ref[2];\r\n          break;\r\n        case 1:\r\n          ref1 = [q, v, p], r = ref1[0], g = ref1[1], b = ref1[2];\r\n          break;\r\n        case 2:\r\n          ref2 = [p, v, t], r = ref2[0], g = ref2[1], b = ref2[2];\r\n          break;\r\n        case 3:\r\n          ref3 = [p, q, v], r = ref3[0], g = ref3[1], b = ref3[2];\r\n          break;\r\n        case 4:\r\n          ref4 = [t, p, v], r = ref4[0], g = ref4[1], b = ref4[2];\r\n          break;\r\n        case 5:\r\n          ref5 = [v, p, q], r = ref5[0], g = ref5[1], b = ref5[2];\r\n      }\r\n    }\r\n    return [r, g, b, args.length > 3 ? args[3] : 1];\r\n  };\r\n\r\n  rgb2hsv = function() {\r\n    var b, delta, g, h, min, r, ref, s, v;\r\n    ref = unpack(arguments), r = ref[0], g = ref[1], b = ref[2];\r\n    min = Math.min(r, g, b);\r\n    max = Math.max(r, g, b);\r\n    delta = max - min;\r\n    v = max / 255.0;\r\n    if (max === 0) {\r\n      h = Number.NaN;\r\n      s = 0;\r\n    } else {\r\n      s = delta / max;\r\n      if (r === max) {\r\n        h = (g - b) / delta;\r\n      }\r\n      if (g === max) {\r\n        h = 2 + (b - r) / delta;\r\n      }\r\n      if (b === max) {\r\n        h = 4 + (r - g) / delta;\r\n      }\r\n      h *= 60;\r\n      if (h < 0) {\r\n        h += 360;\r\n      }\r\n    }\r\n    return [h, s, v];\r\n  };\r\n\r\n  chroma.hsv = function() {\r\n    return (function(func, args, ctor) {\r\n      ctor.prototype = func.prototype;\r\n      var child = new ctor, result = func.apply(child, args);\r\n      return Object(result) === result ? result : child;\r\n    })(Color, slice.call(arguments).concat(['hsv']), function(){});\r\n  };\r\n\r\n  _input.hsv = hsv2rgb;\r\n\r\n  Color.prototype.hsv = function() {\r\n    return rgb2hsv(this._rgb);\r\n  };\r\n\r\n  num2rgb = function(num) {\r\n    var b, g, r;\r\n    if (type(num) === \"number\" && num >= 0 && num <= 0xFFFFFF) {\r\n      r = num >> 16;\r\n      g = (num >> 8) & 0xFF;\r\n      b = num & 0xFF;\r\n      return [r, g, b, 1];\r\n    }\r\n    console.warn(\"unknown num color: \" + num);\r\n    return [0, 0, 0, 1];\r\n  };\r\n\r\n  rgb2num = function() {\r\n    var b, g, r, ref;\r\n    ref = unpack(arguments), r = ref[0], g = ref[1], b = ref[2];\r\n    return (r << 16) + (g << 8) + b;\r\n  };\r\n\r\n  chroma.num = function(num) {\r\n    return new Color(num, 'num');\r\n  };\r\n\r\n  Color.prototype.num = function(mode) {\r\n    if (mode == null) {\r\n      mode = 'rgb';\r\n    }\r\n    return rgb2num(this._rgb, mode);\r\n  };\r\n\r\n  _input.num = num2rgb;\r\n\r\n  _guess_formats.push({\r\n    p: 1,\r\n    test: function(n) {\r\n      if (arguments.length === 1 && type(n) === \"number\" && n >= 0 && n <= 0xFFFFFF) {\r\n        return 'num';\r\n      }\r\n    }\r\n  });\r\n\r\n  hcg2rgb = function() {\r\n    var _c, _g, args, b, c, f, g, h, i, p, q, r, ref, ref1, ref2, ref3, ref4, ref5, t, v;\r\n    args = unpack(arguments);\r\n    h = args[0], c = args[1], _g = args[2];\r\n    c = c / 100;\r\n    g = g / 100 * 255;\r\n    _c = c * 255;\r\n    if (c === 0) {\r\n      r = g = b = _g;\r\n    } else {\r\n      if (h === 360) {\r\n        h = 0;\r\n      }\r\n      if (h > 360) {\r\n        h -= 360;\r\n      }\r\n      if (h < 0) {\r\n        h += 360;\r\n      }\r\n      h /= 60;\r\n      i = floor(h);\r\n      f = h - i;\r\n      p = _g * (1 - c);\r\n      q = p + _c * (1 - f);\r\n      t = p + _c * f;\r\n      v = p + _c;\r\n      switch (i) {\r\n        case 0:\r\n          ref = [v, t, p], r = ref[0], g = ref[1], b = ref[2];\r\n          break;\r\n        case 1:\r\n          ref1 = [q, v, p], r = ref1[0], g = ref1[1], b = ref1[2];\r\n          break;\r\n        case 2:\r\n          ref2 = [p, v, t], r = ref2[0], g = ref2[1], b = ref2[2];\r\n          break;\r\n        case 3:\r\n          ref3 = [p, q, v], r = ref3[0], g = ref3[1], b = ref3[2];\r\n          break;\r\n        case 4:\r\n          ref4 = [t, p, v], r = ref4[0], g = ref4[1], b = ref4[2];\r\n          break;\r\n        case 5:\r\n          ref5 = [v, p, q], r = ref5[0], g = ref5[1], b = ref5[2];\r\n      }\r\n    }\r\n    return [r, g, b, args.length > 3 ? args[3] : 1];\r\n  };\r\n\r\n  rgb2hcg = function() {\r\n    var _g, b, c, delta, g, h, min, r, ref;\r\n    ref = unpack(arguments), r = ref[0], g = ref[1], b = ref[2];\r\n    min = Math.min(r, g, b);\r\n    max = Math.max(r, g, b);\r\n    delta = max - min;\r\n    c = delta * 100 / 255;\r\n    _g = min / (255 - delta) * 100;\r\n    if (delta === 0) {\r\n      h = Number.NaN;\r\n    } else {\r\n      if (r === max) {\r\n        h = (g - b) / delta;\r\n      }\r\n      if (g === max) {\r\n        h = 2 + (b - r) / delta;\r\n      }\r\n      if (b === max) {\r\n        h = 4 + (r - g) / delta;\r\n      }\r\n      h *= 60;\r\n      if (h < 0) {\r\n        h += 360;\r\n      }\r\n    }\r\n    return [h, c, _g];\r\n  };\r\n\r\n  chroma.hcg = function() {\r\n    return (function(func, args, ctor) {\r\n      ctor.prototype = func.prototype;\r\n      var child = new ctor, result = func.apply(child, args);\r\n      return Object(result) === result ? result : child;\r\n    })(Color, slice.call(arguments).concat(['hcg']), function(){});\r\n  };\r\n\r\n  _input.hcg = hcg2rgb;\r\n\r\n  Color.prototype.hcg = function() {\r\n    return rgb2hcg(this._rgb);\r\n  };\r\n\r\n  css2rgb = function(css) {\r\n    var aa, ab, hsl, i, m, o, rgb, w;\r\n    css = css.toLowerCase();\r\n    if ((chroma.colors != null) && chroma.colors[css]) {\r\n      return hex2rgb(chroma.colors[css]);\r\n    }\r\n    if (m = css.match(/rgb\\(\\s*(\\-?\\d+),\\s*(\\-?\\d+)\\s*,\\s*(\\-?\\d+)\\s*\\)/)) {\r\n      rgb = m.slice(1, 4);\r\n      for (i = o = 0; o <= 2; i = ++o) {\r\n        rgb[i] = +rgb[i];\r\n      }\r\n      rgb[3] = 1;\r\n    } else if (m = css.match(/rgba\\(\\s*(\\-?\\d+),\\s*(\\-?\\d+)\\s*,\\s*(\\-?\\d+)\\s*,\\s*([01]|[01]?\\.\\d+)\\)/)) {\r\n      rgb = m.slice(1, 5);\r\n      for (i = w = 0; w <= 3; i = ++w) {\r\n        rgb[i] = +rgb[i];\r\n      }\r\n    } else if (m = css.match(/rgb\\(\\s*(\\-?\\d+(?:\\.\\d+)?)%,\\s*(\\-?\\d+(?:\\.\\d+)?)%\\s*,\\s*(\\-?\\d+(?:\\.\\d+)?)%\\s*\\)/)) {\r\n      rgb = m.slice(1, 4);\r\n      for (i = aa = 0; aa <= 2; i = ++aa) {\r\n        rgb[i] = round(rgb[i] * 2.55);\r\n      }\r\n      rgb[3] = 1;\r\n    } else if (m = css.match(/rgba\\(\\s*(\\-?\\d+(?:\\.\\d+)?)%,\\s*(\\-?\\d+(?:\\.\\d+)?)%\\s*,\\s*(\\-?\\d+(?:\\.\\d+)?)%\\s*,\\s*([01]|[01]?\\.\\d+)\\)/)) {\r\n      rgb = m.slice(1, 5);\r\n      for (i = ab = 0; ab <= 2; i = ++ab) {\r\n        rgb[i] = round(rgb[i] * 2.55);\r\n      }\r\n      rgb[3] = +rgb[3];\r\n    } else if (m = css.match(/hsl\\(\\s*(\\-?\\d+(?:\\.\\d+)?),\\s*(\\-?\\d+(?:\\.\\d+)?)%\\s*,\\s*(\\-?\\d+(?:\\.\\d+)?)%\\s*\\)/)) {\r\n      hsl = m.slice(1, 4);\r\n      hsl[1] *= 0.01;\r\n      hsl[2] *= 0.01;\r\n      rgb = hsl2rgb(hsl);\r\n      rgb[3] = 1;\r\n    } else if (m = css.match(/hsla\\(\\s*(\\-?\\d+(?:\\.\\d+)?),\\s*(\\-?\\d+(?:\\.\\d+)?)%\\s*,\\s*(\\-?\\d+(?:\\.\\d+)?)%\\s*,\\s*([01]|[01]?\\.\\d+)\\)/)) {\r\n      hsl = m.slice(1, 4);\r\n      hsl[1] *= 0.01;\r\n      hsl[2] *= 0.01;\r\n      rgb = hsl2rgb(hsl);\r\n      rgb[3] = +m[4];\r\n    }\r\n    return rgb;\r\n  };\r\n\r\n  rgb2css = function(rgba) {\r\n    var mode;\r\n    mode = rgba[3] < 1 ? 'rgba' : 'rgb';\r\n    if (mode === 'rgb') {\r\n      return mode + '(' + rgba.slice(0, 3).map(round).join(',') + ')';\r\n    } else if (mode === 'rgba') {\r\n      return mode + '(' + rgba.slice(0, 3).map(round).join(',') + ',' + rgba[3] + ')';\r\n    } else {\r\n\r\n    }\r\n  };\r\n\r\n  rnd = function(a) {\r\n    return round(a * 100) / 100;\r\n  };\r\n\r\n  hsl2css = function(hsl, alpha) {\r\n    var mode;\r\n    mode = alpha < 1 ? 'hsla' : 'hsl';\r\n    hsl[0] = rnd(hsl[0] || 0);\r\n    hsl[1] = rnd(hsl[1] * 100) + '%';\r\n    hsl[2] = rnd(hsl[2] * 100) + '%';\r\n    if (mode === 'hsla') {\r\n      hsl[3] = alpha;\r\n    }\r\n    return mode + '(' + hsl.join(',') + ')';\r\n  };\r\n\r\n  _input.css = function(h) {\r\n    return css2rgb(h);\r\n  };\r\n\r\n  chroma.css = function() {\r\n    return (function(func, args, ctor) {\r\n      ctor.prototype = func.prototype;\r\n      var child = new ctor, result = func.apply(child, args);\r\n      return Object(result) === result ? result : child;\r\n    })(Color, slice.call(arguments).concat(['css']), function(){});\r\n  };\r\n\r\n  Color.prototype.css = function(mode) {\r\n    if (mode == null) {\r\n      mode = 'rgb';\r\n    }\r\n    if (mode.slice(0, 3) === 'rgb') {\r\n      return rgb2css(this._rgb);\r\n    } else if (mode.slice(0, 3) === 'hsl') {\r\n      return hsl2css(this.hsl(), this.alpha());\r\n    }\r\n  };\r\n\r\n  _input.named = function(name) {\r\n    return hex2rgb(w3cx11[name]);\r\n  };\r\n\r\n  _guess_formats.push({\r\n    p: 5,\r\n    test: function(n) {\r\n      if (arguments.length === 1 && (w3cx11[n] != null)) {\r\n        return 'named';\r\n      }\r\n    }\r\n  });\r\n\r\n  Color.prototype.name = function(n) {\r\n    var h, k;\r\n    if (arguments.length) {\r\n      if (w3cx11[n]) {\r\n        this._rgb = hex2rgb(w3cx11[n]);\r\n      }\r\n      this._rgb[3] = 1;\r\n      this;\r\n    }\r\n    h = this.hex();\r\n    for (k in w3cx11) {\r\n      if (h === w3cx11[k]) {\r\n        return k;\r\n      }\r\n    }\r\n    return h;\r\n  };\r\n\r\n  lch2lab = function() {\r\n\r\n    /*\r\n    Convert from a qualitative parameter h and a quantitative parameter l to a 24-bit pixel.\r\n    These formulas were invented by David Dalrymple to obtain maximum contrast without going\r\n    out of gamut if the parameters are in the range 0-1.\r\n    \r\n    A saturation multiplier was added by Gregor Aisch\r\n     */\r\n    var c, h, l, ref;\r\n    ref = unpack(arguments), l = ref[0], c = ref[1], h = ref[2];\r\n    h = h * DEG2RAD;\r\n    return [l, cos(h) * c, sin(h) * c];\r\n  };\r\n\r\n  lch2rgb = function() {\r\n    var L, a, args, b, c, g, h, l, r, ref, ref1;\r\n    args = unpack(arguments);\r\n    l = args[0], c = args[1], h = args[2];\r\n    ref = lch2lab(l, c, h), L = ref[0], a = ref[1], b = ref[2];\r\n    ref1 = lab2rgb(L, a, b), r = ref1[0], g = ref1[1], b = ref1[2];\r\n    return [r, g, b, args.length > 3 ? args[3] : 1];\r\n  };\r\n\r\n  lab2lch = function() {\r\n    var a, b, c, h, l, ref;\r\n    ref = unpack(arguments), l = ref[0], a = ref[1], b = ref[2];\r\n    c = sqrt(a * a + b * b);\r\n    h = (atan2(b, a) * RAD2DEG + 360) % 360;\r\n    if (round(c * 10000) === 0) {\r\n      h = Number.NaN;\r\n    }\r\n    return [l, c, h];\r\n  };\r\n\r\n  rgb2lch = function() {\r\n    var a, b, g, l, r, ref, ref1;\r\n    ref = unpack(arguments), r = ref[0], g = ref[1], b = ref[2];\r\n    ref1 = rgb2lab(r, g, b), l = ref1[0], a = ref1[1], b = ref1[2];\r\n    return lab2lch(l, a, b);\r\n  };\r\n\r\n  chroma.lch = function() {\r\n    var args;\r\n    args = unpack(arguments);\r\n    return new Color(args, 'lch');\r\n  };\r\n\r\n  chroma.hcl = function() {\r\n    var args;\r\n    args = unpack(arguments);\r\n    return new Color(args, 'hcl');\r\n  };\r\n\r\n  _input.lch = lch2rgb;\r\n\r\n  _input.hcl = function() {\r\n    var c, h, l, ref;\r\n    ref = unpack(arguments), h = ref[0], c = ref[1], l = ref[2];\r\n    return lch2rgb([l, c, h]);\r\n  };\r\n\r\n  Color.prototype.lch = function() {\r\n    return rgb2lch(this._rgb);\r\n  };\r\n\r\n  Color.prototype.hcl = function() {\r\n    return rgb2lch(this._rgb).reverse();\r\n  };\r\n\r\n  rgb2cmyk = function(mode) {\r\n    var b, c, f, g, k, m, r, ref, y;\r\n    if (mode == null) {\r\n      mode = 'rgb';\r\n    }\r\n    ref = unpack(arguments), r = ref[0], g = ref[1], b = ref[2];\r\n    r = r / 255;\r\n    g = g / 255;\r\n    b = b / 255;\r\n    k = 1 - Math.max(r, Math.max(g, b));\r\n    f = k < 1 ? 1 / (1 - k) : 0;\r\n    c = (1 - r - k) * f;\r\n    m = (1 - g - k) * f;\r\n    y = (1 - b - k) * f;\r\n    return [c, m, y, k];\r\n  };\r\n\r\n  cmyk2rgb = function() {\r\n    var alpha, args, b, c, g, k, m, r, y;\r\n    args = unpack(arguments);\r\n    c = args[0], m = args[1], y = args[2], k = args[3];\r\n    alpha = args.length > 4 ? args[4] : 1;\r\n    if (k === 1) {\r\n      return [0, 0, 0, alpha];\r\n    }\r\n    r = c >= 1 ? 0 : 255 * (1 - c) * (1 - k);\r\n    g = m >= 1 ? 0 : 255 * (1 - m) * (1 - k);\r\n    b = y >= 1 ? 0 : 255 * (1 - y) * (1 - k);\r\n    return [r, g, b, alpha];\r\n  };\r\n\r\n  _input.cmyk = function() {\r\n    return cmyk2rgb(unpack(arguments));\r\n  };\r\n\r\n  chroma.cmyk = function() {\r\n    return (function(func, args, ctor) {\r\n      ctor.prototype = func.prototype;\r\n      var child = new ctor, result = func.apply(child, args);\r\n      return Object(result) === result ? result : child;\r\n    })(Color, slice.call(arguments).concat(['cmyk']), function(){});\r\n  };\r\n\r\n  Color.prototype.cmyk = function() {\r\n    return rgb2cmyk(this._rgb);\r\n  };\r\n\r\n  _input.gl = function() {\r\n    var i, k, o, rgb, v;\r\n    rgb = (function() {\r\n      var ref, results;\r\n      ref = unpack(arguments);\r\n      results = [];\r\n      for (k in ref) {\r\n        v = ref[k];\r\n        results.push(v);\r\n      }\r\n      return results;\r\n    }).apply(this, arguments);\r\n    for (i = o = 0; o <= 2; i = ++o) {\r\n      rgb[i] *= 255;\r\n    }\r\n    return rgb;\r\n  };\r\n\r\n  chroma.gl = function() {\r\n    return (function(func, args, ctor) {\r\n      ctor.prototype = func.prototype;\r\n      var child = new ctor, result = func.apply(child, args);\r\n      return Object(result) === result ? result : child;\r\n    })(Color, slice.call(arguments).concat(['gl']), function(){});\r\n  };\r\n\r\n  Color.prototype.gl = function() {\r\n    var rgb;\r\n    rgb = this._rgb;\r\n    return [rgb[0] / 255, rgb[1] / 255, rgb[2] / 255, rgb[3]];\r\n  };\r\n\r\n  rgb2luminance = function(r, g, b) {\r\n    var ref;\r\n    ref = unpack(arguments), r = ref[0], g = ref[1], b = ref[2];\r\n    r = luminance_x(r);\r\n    g = luminance_x(g);\r\n    b = luminance_x(b);\r\n    return 0.2126 * r + 0.7152 * g + 0.0722 * b;\r\n  };\r\n\r\n  luminance_x = function(x) {\r\n    x /= 255;\r\n    if (x <= 0.03928) {\r\n      return x / 12.92;\r\n    } else {\r\n      return pow((x + 0.055) / 1.055, 2.4);\r\n    }\r\n  };\r\n\r\n  interpolate_rgb = function(col1, col2, f, m) {\r\n    var xyz0, xyz1;\r\n    xyz0 = col1._rgb;\r\n    xyz1 = col2._rgb;\r\n    return new Color(xyz0[0] + f * (xyz1[0] - xyz0[0]), xyz0[1] + f * (xyz1[1] - xyz0[1]), xyz0[2] + f * (xyz1[2] - xyz0[2]), m);\r\n  };\r\n\r\n  _interpolators.push(['rgb', interpolate_rgb]);\r\n\r\n  Color.prototype.luminance = function(lum, mode) {\r\n    var cur_lum, eps, max_iter, rgba, test;\r\n    if (mode == null) {\r\n      mode = 'rgb';\r\n    }\r\n    if (!arguments.length) {\r\n      return rgb2luminance(this._rgb);\r\n    }\r\n    rgba = this._rgb;\r\n    if (lum === 0) {\r\n      rgba = [0, 0, 0, this._rgb[3]];\r\n    } else if (lum === 1) {\r\n      rgba = [255, 255, 255, this[3]];\r\n    } else {\r\n      cur_lum = rgb2luminance(this._rgb);\r\n      eps = 1e-7;\r\n      max_iter = 20;\r\n      test = function(l, h) {\r\n        var lm, m;\r\n        m = l.interpolate(h, 0.5, mode);\r\n        lm = m.luminance();\r\n        if (Math.abs(lum - lm) < eps || !max_iter--) {\r\n          return m;\r\n        }\r\n        if (lm > lum) {\r\n          return test(l, m);\r\n        }\r\n        return test(m, h);\r\n      };\r\n      if (cur_lum > lum) {\r\n        rgba = test(chroma('black'), this).rgba();\r\n      } else {\r\n        rgba = test(this, chroma('white')).rgba();\r\n      }\r\n    }\r\n    return chroma(rgba).alpha(this.alpha());\r\n  };\r\n\r\n  temperature2rgb = function(kelvin) {\r\n    var b, g, r, temp;\r\n    temp = kelvin / 100;\r\n    if (temp < 66) {\r\n      r = 255;\r\n      g = -155.25485562709179 - 0.44596950469579133 * (g = temp - 2) + 104.49216199393888 * log(g);\r\n      b = temp < 20 ? 0 : -254.76935184120902 + 0.8274096064007395 * (b = temp - 10) + 115.67994401066147 * log(b);\r\n    } else {\r\n      r = 351.97690566805693 + 0.114206453784165 * (r = temp - 55) - 40.25366309332127 * log(r);\r\n      g = 325.4494125711974 + 0.07943456536662342 * (g = temp - 50) - 28.0852963507957 * log(g);\r\n      b = 255;\r\n    }\r\n    return [r, g, b];\r\n  };\r\n\r\n  rgb2temperature = function() {\r\n    var b, eps, g, maxTemp, minTemp, r, ref, rgb, temp;\r\n    ref = unpack(arguments), r = ref[0], g = ref[1], b = ref[2];\r\n    minTemp = 1000;\r\n    maxTemp = 40000;\r\n    eps = 0.4;\r\n    while (maxTemp - minTemp > eps) {\r\n      temp = (maxTemp + minTemp) * 0.5;\r\n      rgb = temperature2rgb(temp);\r\n      if ((rgb[2] / rgb[0]) >= (b / r)) {\r\n        maxTemp = temp;\r\n      } else {\r\n        minTemp = temp;\r\n      }\r\n    }\r\n    return round(temp);\r\n  };\r\n\r\n  chroma.temperature = chroma.kelvin = function() {\r\n    return (function(func, args, ctor) {\r\n      ctor.prototype = func.prototype;\r\n      var child = new ctor, result = func.apply(child, args);\r\n      return Object(result) === result ? result : child;\r\n    })(Color, slice.call(arguments).concat(['temperature']), function(){});\r\n  };\r\n\r\n  _input.temperature = _input.kelvin = _input.K = temperature2rgb;\r\n\r\n  Color.prototype.temperature = function() {\r\n    return rgb2temperature(this._rgb);\r\n  };\r\n\r\n  Color.prototype.kelvin = Color.prototype.temperature;\r\n\r\n  chroma.contrast = function(a, b) {\r\n    var l1, l2, ref, ref1;\r\n    if ((ref = type(a)) === 'string' || ref === 'number') {\r\n      a = new Color(a);\r\n    }\r\n    if ((ref1 = type(b)) === 'string' || ref1 === 'number') {\r\n      b = new Color(b);\r\n    }\r\n    l1 = a.luminance();\r\n    l2 = b.luminance();\r\n    if (l1 > l2) {\r\n      return (l1 + 0.05) / (l2 + 0.05);\r\n    } else {\r\n      return (l2 + 0.05) / (l1 + 0.05);\r\n    }\r\n  };\r\n\r\n  chroma.distance = function(a, b, mode) {\r\n    var d, i, l1, l2, ref, ref1, sum_sq;\r\n    if (mode == null) {\r\n      mode = 'lab';\r\n    }\r\n    if ((ref = type(a)) === 'string' || ref === 'number') {\r\n      a = new Color(a);\r\n    }\r\n    if ((ref1 = type(b)) === 'string' || ref1 === 'number') {\r\n      b = new Color(b);\r\n    }\r\n    l1 = a.get(mode);\r\n    l2 = b.get(mode);\r\n    sum_sq = 0;\r\n    for (i in l1) {\r\n      d = (l1[i] || 0) - (l2[i] || 0);\r\n      sum_sq += d * d;\r\n    }\r\n    return Math.sqrt(sum_sq);\r\n  };\r\n\r\n  chroma.deltaE = function(a, b, L, C) {\r\n    var L1, L2, a1, a2, b1, b2, c1, c2, c4, dH2, delA, delB, delC, delL, f, h1, ref, ref1, ref2, ref3, sc, sh, sl, t, v1, v2, v3;\r\n    if (L == null) {\r\n      L = 1;\r\n    }\r\n    if (C == null) {\r\n      C = 1;\r\n    }\r\n    if ((ref = type(a)) === 'string' || ref === 'number') {\r\n      a = new Color(a);\r\n    }\r\n    if ((ref1 = type(b)) === 'string' || ref1 === 'number') {\r\n      b = new Color(b);\r\n    }\r\n    ref2 = a.lab(), L1 = ref2[0], a1 = ref2[1], b1 = ref2[2];\r\n    ref3 = b.lab(), L2 = ref3[0], a2 = ref3[1], b2 = ref3[2];\r\n    c1 = sqrt(a1 * a1 + b1 * b1);\r\n    c2 = sqrt(a2 * a2 + b2 * b2);\r\n    sl = L1 < 16.0 ? 0.511 : (0.040975 * L1) / (1.0 + 0.01765 * L1);\r\n    sc = (0.0638 * c1) / (1.0 + 0.0131 * c1) + 0.638;\r\n    h1 = c1 < 0.000001 ? 0.0 : (atan2(b1, a1) * 180.0) / PI;\r\n    while (h1 < 0) {\r\n      h1 += 360;\r\n    }\r\n    while (h1 >= 360) {\r\n      h1 -= 360;\r\n    }\r\n    t = (h1 >= 164.0) && (h1 <= 345.0) ? 0.56 + abs(0.2 * cos((PI * (h1 + 168.0)) / 180.0)) : 0.36 + abs(0.4 * cos((PI * (h1 + 35.0)) / 180.0));\r\n    c4 = c1 * c1 * c1 * c1;\r\n    f = sqrt(c4 / (c4 + 1900.0));\r\n    sh = sc * (f * t + 1.0 - f);\r\n    delL = L1 - L2;\r\n    delC = c1 - c2;\r\n    delA = a1 - a2;\r\n    delB = b1 - b2;\r\n    dH2 = delA * delA + delB * delB - delC * delC;\r\n    v1 = delL / (L * sl);\r\n    v2 = delC / (C * sc);\r\n    v3 = sh;\r\n    return sqrt(v1 * v1 + v2 * v2 + (dH2 / (v3 * v3)));\r\n  };\r\n\r\n  Color.prototype.get = function(modechan) {\r\n    var channel, i, me, mode, ref, src;\r\n    me = this;\r\n    ref = modechan.split('.'), mode = ref[0], channel = ref[1];\r\n    src = me[mode]();\r\n    if (channel) {\r\n      i = mode.indexOf(channel);\r\n      if (i > -1) {\r\n        return src[i];\r\n      } else {\r\n        return console.warn('unknown channel ' + channel + ' in mode ' + mode);\r\n      }\r\n    } else {\r\n      return src;\r\n    }\r\n  };\r\n\r\n  Color.prototype.set = function(modechan, value) {\r\n    var channel, i, me, mode, ref, src;\r\n    me = this;\r\n    ref = modechan.split('.'), mode = ref[0], channel = ref[1];\r\n    if (channel) {\r\n      src = me[mode]();\r\n      i = mode.indexOf(channel);\r\n      if (i > -1) {\r\n        if (type(value) === 'string') {\r\n          switch (value.charAt(0)) {\r\n            case '+':\r\n              src[i] += +value;\r\n              break;\r\n            case '-':\r\n              src[i] += +value;\r\n              break;\r\n            case '*':\r\n              src[i] *= +(value.substr(1));\r\n              break;\r\n            case '/':\r\n              src[i] /= +(value.substr(1));\r\n              break;\r\n            default:\r\n              src[i] = +value;\r\n          }\r\n        } else {\r\n          src[i] = value;\r\n        }\r\n      } else {\r\n        console.warn('unknown channel ' + channel + ' in mode ' + mode);\r\n      }\r\n    } else {\r\n      src = value;\r\n    }\r\n    return chroma(src, mode).alpha(me.alpha());\r\n  };\r\n\r\n  Color.prototype.clipped = function() {\r\n    return this._rgb._clipped || false;\r\n  };\r\n\r\n  Color.prototype.alpha = function(a) {\r\n    if (arguments.length) {\r\n      return chroma.rgb([this._rgb[0], this._rgb[1], this._rgb[2], a]);\r\n    }\r\n    return this._rgb[3];\r\n  };\r\n\r\n  Color.prototype.darken = function(amount) {\r\n    var lab, me;\r\n    if (amount == null) {\r\n      amount = 1;\r\n    }\r\n    me = this;\r\n    lab = me.lab();\r\n    lab[0] -= LAB_CONSTANTS.Kn * amount;\r\n    return chroma.lab(lab).alpha(me.alpha());\r\n  };\r\n\r\n  Color.prototype.brighten = function(amount) {\r\n    if (amount == null) {\r\n      amount = 1;\r\n    }\r\n    return this.darken(-amount);\r\n  };\r\n\r\n  Color.prototype.darker = Color.prototype.darken;\r\n\r\n  Color.prototype.brighter = Color.prototype.brighten;\r\n\r\n  Color.prototype.saturate = function(amount) {\r\n    var lch, me;\r\n    if (amount == null) {\r\n      amount = 1;\r\n    }\r\n    me = this;\r\n    lch = me.lch();\r\n    lch[1] += amount * LAB_CONSTANTS.Kn;\r\n    if (lch[1] < 0) {\r\n      lch[1] = 0;\r\n    }\r\n    return chroma.lch(lch).alpha(me.alpha());\r\n  };\r\n\r\n  Color.prototype.desaturate = function(amount) {\r\n    if (amount == null) {\r\n      amount = 1;\r\n    }\r\n    return this.saturate(-amount);\r\n  };\r\n\r\n  Color.prototype.premultiply = function() {\r\n    var a, rgb;\r\n    rgb = this.rgb();\r\n    a = this.alpha();\r\n    return chroma(rgb[0] * a, rgb[1] * a, rgb[2] * a, a);\r\n  };\r\n\r\n  blend = function(bottom, top, mode) {\r\n    if (!blend[mode]) {\r\n      throw 'unknown blend mode ' + mode;\r\n    }\r\n    return blend[mode](bottom, top);\r\n  };\r\n\r\n  blend_f = function(f) {\r\n    return function(bottom, top) {\r\n      var c0, c1;\r\n      c0 = chroma(top).rgb();\r\n      c1 = chroma(bottom).rgb();\r\n      return chroma(f(c0, c1), 'rgb');\r\n    };\r\n  };\r\n\r\n  each = function(f) {\r\n    return function(c0, c1) {\r\n      var i, o, out;\r\n      out = [];\r\n      for (i = o = 0; o <= 3; i = ++o) {\r\n        out[i] = f(c0[i], c1[i]);\r\n      }\r\n      return out;\r\n    };\r\n  };\r\n\r\n  normal = function(a, b) {\r\n    return a;\r\n  };\r\n\r\n  multiply = function(a, b) {\r\n    return a * b / 255;\r\n  };\r\n\r\n  darken = function(a, b) {\r\n    if (a > b) {\r\n      return b;\r\n    } else {\r\n      return a;\r\n    }\r\n  };\r\n\r\n  lighten = function(a, b) {\r\n    if (a > b) {\r\n      return a;\r\n    } else {\r\n      return b;\r\n    }\r\n  };\r\n\r\n  screen = function(a, b) {\r\n    return 255 * (1 - (1 - a / 255) * (1 - b / 255));\r\n  };\r\n\r\n  overlay = function(a, b) {\r\n    if (b < 128) {\r\n      return 2 * a * b / 255;\r\n    } else {\r\n      return 255 * (1 - 2 * (1 - a / 255) * (1 - b / 255));\r\n    }\r\n  };\r\n\r\n  burn = function(a, b) {\r\n    return 255 * (1 - (1 - b / 255) / (a / 255));\r\n  };\r\n\r\n  dodge = function(a, b) {\r\n    if (a === 255) {\r\n      return 255;\r\n    }\r\n    a = 255 * (b / 255) / (1 - a / 255);\r\n    if (a > 255) {\r\n      return 255;\r\n    } else {\r\n      return a;\r\n    }\r\n  };\r\n\r\n  blend.normal = blend_f(each(normal));\r\n\r\n  blend.multiply = blend_f(each(multiply));\r\n\r\n  blend.screen = blend_f(each(screen));\r\n\r\n  blend.overlay = blend_f(each(overlay));\r\n\r\n  blend.darken = blend_f(each(darken));\r\n\r\n  blend.lighten = blend_f(each(lighten));\r\n\r\n  blend.dodge = blend_f(each(dodge));\r\n\r\n  blend.burn = blend_f(each(burn));\r\n\r\n  chroma.blend = blend;\r\n\r\n  chroma.analyze = function(data) {\r\n    var len, o, r, val;\r\n    r = {\r\n      min: Number.MAX_VALUE,\r\n      max: Number.MAX_VALUE * -1,\r\n      sum: 0,\r\n      values: [],\r\n      count: 0\r\n    };\r\n    for (o = 0, len = data.length; o < len; o++) {\r\n      val = data[o];\r\n      if ((val != null) && !isNaN(val)) {\r\n        r.values.push(val);\r\n        r.sum += val;\r\n        if (val < r.min) {\r\n          r.min = val;\r\n        }\r\n        if (val > r.max) {\r\n          r.max = val;\r\n        }\r\n        r.count += 1;\r\n      }\r\n    }\r\n    r.domain = [r.min, r.max];\r\n    r.limits = function(mode, num) {\r\n      return chroma.limits(r, mode, num);\r\n    };\r\n    return r;\r\n  };\r\n\r\n  chroma.scale = function(colors, positions) {\r\n    var _classes, _colorCache, _colors, _correctLightness, _domain, _fixed, _gamma, _max, _min, _mode, _nacol, _out, _padding, _pos, _spread, _useCache, classifyValue, f, getClass, getColor, resetCache, setColors, tmap;\r\n    _mode = 'rgb';\r\n    _nacol = chroma('#ccc');\r\n    _spread = 0;\r\n    _fixed = false;\r\n    _domain = [0, 1];\r\n    _pos = [];\r\n    _padding = [0, 0];\r\n    _classes = false;\r\n    _colors = [];\r\n    _out = false;\r\n    _min = 0;\r\n    _max = 1;\r\n    _correctLightness = false;\r\n    _colorCache = {};\r\n    _useCache = true;\r\n    _gamma = 1;\r\n    setColors = function(colors) {\r\n      var c, col, o, ref, ref1, w;\r\n      if (colors == null) {\r\n        colors = ['#fff', '#000'];\r\n      }\r\n      if ((colors != null) && type(colors) === 'string' && (chroma.brewer != null)) {\r\n        colors = chroma.brewer[colors] || chroma.brewer[colors.toLowerCase()] || colors;\r\n      }\r\n      if (type(colors) === 'array') {\r\n        colors = colors.slice(0);\r\n        for (c = o = 0, ref = colors.length - 1; 0 <= ref ? o <= ref : o >= ref; c = 0 <= ref ? ++o : --o) {\r\n          col = colors[c];\r\n          if (type(col) === \"string\") {\r\n            colors[c] = chroma(col);\r\n          }\r\n        }\r\n        _pos.length = 0;\r\n        for (c = w = 0, ref1 = colors.length - 1; 0 <= ref1 ? w <= ref1 : w >= ref1; c = 0 <= ref1 ? ++w : --w) {\r\n          _pos.push(c / (colors.length - 1));\r\n        }\r\n      }\r\n      resetCache();\r\n      return _colors = colors;\r\n    };\r\n    getClass = function(value) {\r\n      var i, n;\r\n      if (_classes != null) {\r\n        n = _classes.length - 1;\r\n        i = 0;\r\n        while (i < n && value >= _classes[i]) {\r\n          i++;\r\n        }\r\n        return i - 1;\r\n      }\r\n      return 0;\r\n    };\r\n    tmap = function(t) {\r\n      return t;\r\n    };\r\n    classifyValue = function(value) {\r\n      var i, maxc, minc, n, val;\r\n      val = value;\r\n      if (_classes.length > 2) {\r\n        n = _classes.length - 1;\r\n        i = getClass(value);\r\n        minc = _classes[0] + (_classes[1] - _classes[0]) * (0 + _spread * 0.5);\r\n        maxc = _classes[n - 1] + (_classes[n] - _classes[n - 1]) * (1 - _spread * 0.5);\r\n        val = _min + ((_classes[i] + (_classes[i + 1] - _classes[i]) * 0.5 - minc) / (maxc - minc)) * (_max - _min);\r\n      }\r\n      return val;\r\n    };\r\n    getColor = function(val, bypassMap) {\r\n      var c, col, i, k, o, p, ref, t;\r\n      if (bypassMap == null) {\r\n        bypassMap = false;\r\n      }\r\n      if (isNaN(val)) {\r\n        return _nacol;\r\n      }\r\n      if (!bypassMap) {\r\n        if (_classes && _classes.length > 2) {\r\n          c = getClass(val);\r\n          t = c / (_classes.length - 2);\r\n        } else if (_max !== _min) {\r\n          t = (val - _min) / (_max - _min);\r\n        } else {\r\n          t = 1;\r\n        }\r\n      } else {\r\n        t = val;\r\n      }\r\n      if (!bypassMap) {\r\n        t = tmap(t);\r\n      }\r\n      if (_gamma !== 1) {\r\n        t = pow(t, _gamma);\r\n      }\r\n      t = _padding[0] + (t * (1 - _padding[0] - _padding[1]));\r\n      t = Math.min(1, Math.max(0, t));\r\n      k = Math.floor(t * 10000);\r\n      if (_useCache && _colorCache[k]) {\r\n        col = _colorCache[k];\r\n      } else {\r\n        if (type(_colors) === 'array') {\r\n          for (i = o = 0, ref = _pos.length - 1; 0 <= ref ? o <= ref : o >= ref; i = 0 <= ref ? ++o : --o) {\r\n            p = _pos[i];\r\n            if (t <= p) {\r\n              col = _colors[i];\r\n              break;\r\n            }\r\n            if (t >= p && i === _pos.length - 1) {\r\n              col = _colors[i];\r\n              break;\r\n            }\r\n            if (t > p && t < _pos[i + 1]) {\r\n              t = (t - p) / (_pos[i + 1] - p);\r\n              col = chroma.interpolate(_colors[i], _colors[i + 1], t, _mode);\r\n              break;\r\n            }\r\n          }\r\n        } else if (type(_colors) === 'function') {\r\n          col = _colors(t);\r\n        }\r\n        if (_useCache) {\r\n          _colorCache[k] = col;\r\n        }\r\n      }\r\n      return col;\r\n    };\r\n    resetCache = function() {\r\n      return _colorCache = {};\r\n    };\r\n    setColors(colors);\r\n    f = function(v) {\r\n      var c;\r\n      c = chroma(getColor(v));\r\n      if (_out && c[_out]) {\r\n        return c[_out]();\r\n      } else {\r\n        return c;\r\n      }\r\n    };\r\n    f.classes = function(classes) {\r\n      var d;\r\n      if (classes != null) {\r\n        if (type(classes) === 'array') {\r\n          _classes = classes;\r\n          _domain = [classes[0], classes[classes.length - 1]];\r\n        } else {\r\n          d = chroma.analyze(_domain);\r\n          if (classes === 0) {\r\n            _classes = [d.min, d.max];\r\n          } else {\r\n            _classes = chroma.limits(d, 'e', classes);\r\n          }\r\n        }\r\n        return f;\r\n      }\r\n      return _classes;\r\n    };\r\n    f.domain = function(domain) {\r\n      var c, d, k, len, o, ref, w;\r\n      if (!arguments.length) {\r\n        return _domain;\r\n      }\r\n      _min = domain[0];\r\n      _max = domain[domain.length - 1];\r\n      _pos = [];\r\n      k = _colors.length;\r\n      if (domain.length === k && _min !== _max) {\r\n        for (o = 0, len = domain.length; o < len; o++) {\r\n          d = domain[o];\r\n          _pos.push((d - _min) / (_max - _min));\r\n        }\r\n      } else {\r\n        for (c = w = 0, ref = k - 1; 0 <= ref ? w <= ref : w >= ref; c = 0 <= ref ? ++w : --w) {\r\n          _pos.push(c / (k - 1));\r\n        }\r\n      }\r\n      _domain = [_min, _max];\r\n      return f;\r\n    };\r\n    f.mode = function(_m) {\r\n      if (!arguments.length) {\r\n        return _mode;\r\n      }\r\n      _mode = _m;\r\n      resetCache();\r\n      return f;\r\n    };\r\n    f.range = function(colors, _pos) {\r\n      setColors(colors, _pos);\r\n      return f;\r\n    };\r\n    f.out = function(_o) {\r\n      _out = _o;\r\n      return f;\r\n    };\r\n    f.spread = function(val) {\r\n      if (!arguments.length) {\r\n        return _spread;\r\n      }\r\n      _spread = val;\r\n      return f;\r\n    };\r\n    f.correctLightness = function(v) {\r\n      if (v == null) {\r\n        v = true;\r\n      }\r\n      _correctLightness = v;\r\n      resetCache();\r\n      if (_correctLightness) {\r\n        tmap = function(t) {\r\n          var L0, L1, L_actual, L_diff, L_ideal, max_iter, pol, t0, t1;\r\n          L0 = getColor(0, true).lab()[0];\r\n          L1 = getColor(1, true).lab()[0];\r\n          pol = L0 > L1;\r\n          L_actual = getColor(t, true).lab()[0];\r\n          L_ideal = L0 + (L1 - L0) * t;\r\n          L_diff = L_actual - L_ideal;\r\n          t0 = 0;\r\n          t1 = 1;\r\n          max_iter = 20;\r\n          while (Math.abs(L_diff) > 1e-2 && max_iter-- > 0) {\r\n            (function() {\r\n              if (pol) {\r\n                L_diff *= -1;\r\n              }\r\n              if (L_diff < 0) {\r\n                t0 = t;\r\n                t += (t1 - t) * 0.5;\r\n              } else {\r\n                t1 = t;\r\n                t += (t0 - t) * 0.5;\r\n              }\r\n              L_actual = getColor(t, true).lab()[0];\r\n              return L_diff = L_actual - L_ideal;\r\n            })();\r\n          }\r\n          return t;\r\n        };\r\n      } else {\r\n        tmap = function(t) {\r\n          return t;\r\n        };\r\n      }\r\n      return f;\r\n    };\r\n    f.padding = function(p) {\r\n      if (p != null) {\r\n        if (type(p) === 'number') {\r\n          p = [p, p];\r\n        }\r\n        _padding = p;\r\n        return f;\r\n      } else {\r\n        return _padding;\r\n      }\r\n    };\r\n    f.colors = function(numColors, out) {\r\n      var dd, dm, i, o, ref, result, results, samples, w;\r\n      if (arguments.length < 2) {\r\n        out = 'hex';\r\n      }\r\n      result = [];\r\n      if (arguments.length === 0) {\r\n        result = _colors.slice(0);\r\n      } else if (numColors === 1) {\r\n        result = [f(0.5)];\r\n      } else if (numColors > 1) {\r\n        dm = _domain[0];\r\n        dd = _domain[1] - dm;\r\n        result = (function() {\r\n          results = [];\r\n          for (var o = 0; 0 <= numColors ? o < numColors : o > numColors; 0 <= numColors ? o++ : o--){ results.push(o); }\r\n          return results;\r\n        }).apply(this).map(function(i) {\r\n          return f(dm + i / (numColors - 1) * dd);\r\n        });\r\n      } else {\r\n        colors = [];\r\n        samples = [];\r\n        if (_classes && _classes.length > 2) {\r\n          for (i = w = 1, ref = _classes.length; 1 <= ref ? w < ref : w > ref; i = 1 <= ref ? ++w : --w) {\r\n            samples.push((_classes[i - 1] + _classes[i]) * 0.5);\r\n          }\r\n        } else {\r\n          samples = _domain;\r\n        }\r\n        result = samples.map(function(v) {\r\n          return f(v);\r\n        });\r\n      }\r\n      if (chroma[out]) {\r\n        result = result.map(function(c) {\r\n          return c[out]();\r\n        });\r\n      }\r\n      return result;\r\n    };\r\n    f.cache = function(c) {\r\n      if (c != null) {\r\n        _useCache = c;\r\n        return f;\r\n      } else {\r\n        return _useCache;\r\n      }\r\n    };\r\n    f.gamma = function(g) {\r\n      if (g != null) {\r\n        _gamma = g;\r\n        return f;\r\n      } else {\r\n        return _gamma;\r\n      }\r\n    };\r\n    return f;\r\n  };\r\n\r\n  if (chroma.scales == null) {\r\n    chroma.scales = {};\r\n  }\r\n\r\n  chroma.scales.cool = function() {\r\n    return chroma.scale([chroma.hsl(180, 1, .9), chroma.hsl(250, .7, .4)]);\r\n  };\r\n\r\n  chroma.scales.hot = function() {\r\n    return chroma.scale(['#000', '#f00', '#ff0', '#fff'], [0, .25, .75, 1]).mode('rgb');\r\n  };\r\n\r\n  chroma.analyze = function(data, key, filter) {\r\n    var add, k, len, o, r, val, visit;\r\n    r = {\r\n      min: Number.MAX_VALUE,\r\n      max: Number.MAX_VALUE * -1,\r\n      sum: 0,\r\n      values: [],\r\n      count: 0\r\n    };\r\n    if (filter == null) {\r\n      filter = function() {\r\n        return true;\r\n      };\r\n    }\r\n    add = function(val) {\r\n      if ((val != null) && !isNaN(val)) {\r\n        r.values.push(val);\r\n        r.sum += val;\r\n        if (val < r.min) {\r\n          r.min = val;\r\n        }\r\n        if (val > r.max) {\r\n          r.max = val;\r\n        }\r\n        r.count += 1;\r\n      }\r\n    };\r\n    visit = function(val, k) {\r\n      if (filter(val, k)) {\r\n        if ((key != null) && type(key) === 'function') {\r\n          return add(key(val));\r\n        } else if ((key != null) && type(key) === 'string' || type(key) === 'number') {\r\n          return add(val[key]);\r\n        } else {\r\n          return add(val);\r\n        }\r\n      }\r\n    };\r\n    if (type(data) === 'array') {\r\n      for (o = 0, len = data.length; o < len; o++) {\r\n        val = data[o];\r\n        visit(val);\r\n      }\r\n    } else {\r\n      for (k in data) {\r\n        val = data[k];\r\n        visit(val, k);\r\n      }\r\n    }\r\n    r.domain = [r.min, r.max];\r\n    r.limits = function(mode, num) {\r\n      return chroma.limits(r, mode, num);\r\n    };\r\n    return r;\r\n  };\r\n\r\n  chroma.limits = function(data, mode, num) {\r\n    var aa, ab, ac, ad, ae, af, ag, ah, ai, aj, ak, al, am, assignments, best, centroids, cluster, clusterSizes, dist, i, j, kClusters, limits, max_log, min, min_log, mindist, n, nb_iters, newCentroids, o, p, pb, pr, ref, ref1, ref10, ref11, ref12, ref13, ref14, ref2, ref3, ref4, ref5, ref6, ref7, ref8, ref9, repeat, sum, tmpKMeansBreaks, v, value, values, w;\r\n    if (mode == null) {\r\n      mode = 'equal';\r\n    }\r\n    if (num == null) {\r\n      num = 7;\r\n    }\r\n    if (type(data) === 'array') {\r\n      data = chroma.analyze(data);\r\n    }\r\n    min = data.min;\r\n    max = data.max;\r\n    sum = data.sum;\r\n    values = data.values.sort(function(a, b) {\r\n      return a - b;\r\n    });\r\n    if (num === 1) {\r\n      return [min, max];\r\n    }\r\n    limits = [];\r\n    if (mode.substr(0, 1) === 'c') {\r\n      limits.push(min);\r\n      limits.push(max);\r\n    }\r\n    if (mode.substr(0, 1) === 'e') {\r\n      limits.push(min);\r\n      for (i = o = 1, ref = num - 1; 1 <= ref ? o <= ref : o >= ref; i = 1 <= ref ? ++o : --o) {\r\n        limits.push(min + (i / num) * (max - min));\r\n      }\r\n      limits.push(max);\r\n    } else if (mode.substr(0, 1) === 'l') {\r\n      if (min <= 0) {\r\n        throw 'Logarithmic scales are only possible for values > 0';\r\n      }\r\n      min_log = Math.LOG10E * log(min);\r\n      max_log = Math.LOG10E * log(max);\r\n      limits.push(min);\r\n      for (i = w = 1, ref1 = num - 1; 1 <= ref1 ? w <= ref1 : w >= ref1; i = 1 <= ref1 ? ++w : --w) {\r\n        limits.push(pow(10, min_log + (i / num) * (max_log - min_log)));\r\n      }\r\n      limits.push(max);\r\n    } else if (mode.substr(0, 1) === 'q') {\r\n      limits.push(min);\r\n      for (i = aa = 1, ref2 = num - 1; 1 <= ref2 ? aa <= ref2 : aa >= ref2; i = 1 <= ref2 ? ++aa : --aa) {\r\n        p = (values.length - 1) * i / num;\r\n        pb = floor(p);\r\n        if (pb === p) {\r\n          limits.push(values[pb]);\r\n        } else {\r\n          pr = p - pb;\r\n          limits.push(values[pb] * (1 - pr) + values[pb + 1] * pr);\r\n        }\r\n      }\r\n      limits.push(max);\r\n    } else if (mode.substr(0, 1) === 'k') {\r\n\r\n      /*\r\n      implementation based on\r\n      http://code.google.com/p/figue/source/browse/trunk/figue.js#336\r\n      simplified for 1-d input values\r\n       */\r\n      n = values.length;\r\n      assignments = new Array(n);\r\n      clusterSizes = new Array(num);\r\n      repeat = true;\r\n      nb_iters = 0;\r\n      centroids = null;\r\n      centroids = [];\r\n      centroids.push(min);\r\n      for (i = ab = 1, ref3 = num - 1; 1 <= ref3 ? ab <= ref3 : ab >= ref3; i = 1 <= ref3 ? ++ab : --ab) {\r\n        centroids.push(min + (i / num) * (max - min));\r\n      }\r\n      centroids.push(max);\r\n      while (repeat) {\r\n        for (j = ac = 0, ref4 = num - 1; 0 <= ref4 ? ac <= ref4 : ac >= ref4; j = 0 <= ref4 ? ++ac : --ac) {\r\n          clusterSizes[j] = 0;\r\n        }\r\n        for (i = ad = 0, ref5 = n - 1; 0 <= ref5 ? ad <= ref5 : ad >= ref5; i = 0 <= ref5 ? ++ad : --ad) {\r\n          value = values[i];\r\n          mindist = Number.MAX_VALUE;\r\n          for (j = ae = 0, ref6 = num - 1; 0 <= ref6 ? ae <= ref6 : ae >= ref6; j = 0 <= ref6 ? ++ae : --ae) {\r\n            dist = abs(centroids[j] - value);\r\n            if (dist < mindist) {\r\n              mindist = dist;\r\n              best = j;\r\n            }\r\n          }\r\n          clusterSizes[best]++;\r\n          assignments[i] = best;\r\n        }\r\n        newCentroids = new Array(num);\r\n        for (j = af = 0, ref7 = num - 1; 0 <= ref7 ? af <= ref7 : af >= ref7; j = 0 <= ref7 ? ++af : --af) {\r\n          newCentroids[j] = null;\r\n        }\r\n        for (i = ag = 0, ref8 = n - 1; 0 <= ref8 ? ag <= ref8 : ag >= ref8; i = 0 <= ref8 ? ++ag : --ag) {\r\n          cluster = assignments[i];\r\n          if (newCentroids[cluster] === null) {\r\n            newCentroids[cluster] = values[i];\r\n          } else {\r\n            newCentroids[cluster] += values[i];\r\n          }\r\n        }\r\n        for (j = ah = 0, ref9 = num - 1; 0 <= ref9 ? ah <= ref9 : ah >= ref9; j = 0 <= ref9 ? ++ah : --ah) {\r\n          newCentroids[j] *= 1 / clusterSizes[j];\r\n        }\r\n        repeat = false;\r\n        for (j = ai = 0, ref10 = num - 1; 0 <= ref10 ? ai <= ref10 : ai >= ref10; j = 0 <= ref10 ? ++ai : --ai) {\r\n          if (newCentroids[j] !== centroids[i]) {\r\n            repeat = true;\r\n            break;\r\n          }\r\n        }\r\n        centroids = newCentroids;\r\n        nb_iters++;\r\n        if (nb_iters > 200) {\r\n          repeat = false;\r\n        }\r\n      }\r\n      kClusters = {};\r\n      for (j = aj = 0, ref11 = num - 1; 0 <= ref11 ? aj <= ref11 : aj >= ref11; j = 0 <= ref11 ? ++aj : --aj) {\r\n        kClusters[j] = [];\r\n      }\r\n      for (i = ak = 0, ref12 = n - 1; 0 <= ref12 ? ak <= ref12 : ak >= ref12; i = 0 <= ref12 ? ++ak : --ak) {\r\n        cluster = assignments[i];\r\n        kClusters[cluster].push(values[i]);\r\n      }\r\n      tmpKMeansBreaks = [];\r\n      for (j = al = 0, ref13 = num - 1; 0 <= ref13 ? al <= ref13 : al >= ref13; j = 0 <= ref13 ? ++al : --al) {\r\n        tmpKMeansBreaks.push(kClusters[j][0]);\r\n        tmpKMeansBreaks.push(kClusters[j][kClusters[j].length - 1]);\r\n      }\r\n      tmpKMeansBreaks = tmpKMeansBreaks.sort(function(a, b) {\r\n        return a - b;\r\n      });\r\n      limits.push(tmpKMeansBreaks[0]);\r\n      for (i = am = 1, ref14 = tmpKMeansBreaks.length - 1; am <= ref14; i = am += 2) {\r\n        v = tmpKMeansBreaks[i];\r\n        if (!isNaN(v) && limits.indexOf(v) === -1) {\r\n          limits.push(v);\r\n        }\r\n      }\r\n    }\r\n    return limits;\r\n  };\r\n\r\n  hsi2rgb = function(h, s, i) {\r\n\r\n    /*\r\n    borrowed from here:\r\n    http://hummer.stanford.edu/museinfo/doc/examples/humdrum/keyscape2/hsi2rgb.cpp\r\n     */\r\n    var args, b, g, r;\r\n    args = unpack(arguments);\r\n    h = args[0], s = args[1], i = args[2];\r\n    if (isNaN(h)) {\r\n      h = 0;\r\n    }\r\n    h /= 360;\r\n    if (h < 1 / 3) {\r\n      b = (1 - s) / 3;\r\n      r = (1 + s * cos(TWOPI * h) / cos(PITHIRD - TWOPI * h)) / 3;\r\n      g = 1 - (b + r);\r\n    } else if (h < 2 / 3) {\r\n      h -= 1 / 3;\r\n      r = (1 - s) / 3;\r\n      g = (1 + s * cos(TWOPI * h) / cos(PITHIRD - TWOPI * h)) / 3;\r\n      b = 1 - (r + g);\r\n    } else {\r\n      h -= 2 / 3;\r\n      g = (1 - s) / 3;\r\n      b = (1 + s * cos(TWOPI * h) / cos(PITHIRD - TWOPI * h)) / 3;\r\n      r = 1 - (g + b);\r\n    }\r\n    r = limit(i * r * 3);\r\n    g = limit(i * g * 3);\r\n    b = limit(i * b * 3);\r\n    return [r * 255, g * 255, b * 255, args.length > 3 ? args[3] : 1];\r\n  };\r\n\r\n  rgb2hsi = function() {\r\n\r\n    /*\r\n    borrowed from here:\r\n    http://hummer.stanford.edu/museinfo/doc/examples/humdrum/keyscape2/rgb2hsi.cpp\r\n     */\r\n    var b, g, h, i, min, r, ref, s;\r\n    ref = unpack(arguments), r = ref[0], g = ref[1], b = ref[2];\r\n    TWOPI = Math.PI * 2;\r\n    r /= 255;\r\n    g /= 255;\r\n    b /= 255;\r\n    min = Math.min(r, g, b);\r\n    i = (r + g + b) / 3;\r\n    s = 1 - min / i;\r\n    if (s === 0) {\r\n      h = 0;\r\n    } else {\r\n      h = ((r - g) + (r - b)) / 2;\r\n      h /= Math.sqrt((r - g) * (r - g) + (r - b) * (g - b));\r\n      h = Math.acos(h);\r\n      if (b > g) {\r\n        h = TWOPI - h;\r\n      }\r\n      h /= TWOPI;\r\n    }\r\n    return [h * 360, s, i];\r\n  };\r\n\r\n  chroma.hsi = function() {\r\n    return (function(func, args, ctor) {\r\n      ctor.prototype = func.prototype;\r\n      var child = new ctor, result = func.apply(child, args);\r\n      return Object(result) === result ? result : child;\r\n    })(Color, slice.call(arguments).concat(['hsi']), function(){});\r\n  };\r\n\r\n  _input.hsi = hsi2rgb;\r\n\r\n  Color.prototype.hsi = function() {\r\n    return rgb2hsi(this._rgb);\r\n  };\r\n\r\n  interpolate_hsx = function(col1, col2, f, m) {\r\n    var dh, hue, hue0, hue1, lbv, lbv0, lbv1, res, sat, sat0, sat1, xyz0, xyz1;\r\n    if (m === 'hsl') {\r\n      xyz0 = col1.hsl();\r\n      xyz1 = col2.hsl();\r\n    } else if (m === 'hsv') {\r\n      xyz0 = col1.hsv();\r\n      xyz1 = col2.hsv();\r\n    } else if (m === 'hcg') {\r\n      xyz0 = col1.hcg();\r\n      xyz1 = col2.hcg();\r\n    } else if (m === 'hsi') {\r\n      xyz0 = col1.hsi();\r\n      xyz1 = col2.hsi();\r\n    } else if (m === 'lch' || m === 'hcl') {\r\n      m = 'hcl';\r\n      xyz0 = col1.hcl();\r\n      xyz1 = col2.hcl();\r\n    }\r\n    if (m.substr(0, 1) === 'h') {\r\n      hue0 = xyz0[0], sat0 = xyz0[1], lbv0 = xyz0[2];\r\n      hue1 = xyz1[0], sat1 = xyz1[1], lbv1 = xyz1[2];\r\n    }\r\n    if (!isNaN(hue0) && !isNaN(hue1)) {\r\n      if (hue1 > hue0 && hue1 - hue0 > 180) {\r\n        dh = hue1 - (hue0 + 360);\r\n      } else if (hue1 < hue0 && hue0 - hue1 > 180) {\r\n        dh = hue1 + 360 - hue0;\r\n      } else {\r\n        dh = hue1 - hue0;\r\n      }\r\n      hue = hue0 + f * dh;\r\n    } else if (!isNaN(hue0)) {\r\n      hue = hue0;\r\n      if ((lbv1 === 1 || lbv1 === 0) && m !== 'hsv') {\r\n        sat = sat0;\r\n      }\r\n    } else if (!isNaN(hue1)) {\r\n      hue = hue1;\r\n      if ((lbv0 === 1 || lbv0 === 0) && m !== 'hsv') {\r\n        sat = sat1;\r\n      }\r\n    } else {\r\n      hue = Number.NaN;\r\n    }\r\n    if (sat == null) {\r\n      sat = sat0 + f * (sat1 - sat0);\r\n    }\r\n    lbv = lbv0 + f * (lbv1 - lbv0);\r\n    return res = chroma[m](hue, sat, lbv);\r\n  };\r\n\r\n  _interpolators = _interpolators.concat((function() {\r\n    var len, o, ref, results;\r\n    ref = ['hsv', 'hsl', 'hsi', 'hcl', 'lch', 'hcg'];\r\n    results = [];\r\n    for (o = 0, len = ref.length; o < len; o++) {\r\n      m = ref[o];\r\n      results.push([m, interpolate_hsx]);\r\n    }\r\n    return results;\r\n  })());\r\n\r\n  interpolate_num = function(col1, col2, f, m) {\r\n    var n1, n2;\r\n    n1 = col1.num();\r\n    n2 = col2.num();\r\n    return chroma.num(n1 + (n2 - n1) * f, 'num');\r\n  };\r\n\r\n  _interpolators.push(['num', interpolate_num]);\r\n\r\n  interpolate_lab = function(col1, col2, f, m) {\r\n    var res, xyz0, xyz1;\r\n    xyz0 = col1.lab();\r\n    xyz1 = col2.lab();\r\n    return res = new Color(xyz0[0] + f * (xyz1[0] - xyz0[0]), xyz0[1] + f * (xyz1[1] - xyz0[1]), xyz0[2] + f * (xyz1[2] - xyz0[2]), m);\r\n  };\r\n\r\n  _interpolators.push(['lab', interpolate_lab]);\r\n\r\n}).call(this);\r\n",null]}