{"remainingRequest":"D:\\TutorsClubBitBucket\\tutorsclubweb\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js??ref--8-1!D:\\TutorsClubBitBucket\\tutorsclubweb\\node_modules\\@alyle\\ui\\button\\esm5\\alyle-ui-button.js","dependencies":[{"path":"D:\\TutorsClubBitBucket\\tutorsclubweb\\node_modules\\@alyle\\ui\\button\\esm5\\alyle-ui-button.js","mtime":1533191670901},{"path":"D:\\TutorsClubBitBucket\\tutorsclubweb\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1533191679839},{"path":"D:\\TutorsClubBitBucket\\tutorsclubweb\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js","mtime":1533191671924}],"contextDependencies":[],"result":["import { LyTheme, ProvidedInTheme, Platform, toBoolean, LyBgColorAndRaised, LyCommonModule, AlyleUIModule } from '@alyle/ui';\nimport { Injectable, ChangeDetectionStrategy, Component, ElementRef, Input, Optional, Renderer2, ViewChild, NgZone, NgModule, defineInjectable, inject } from '@angular/core';\nimport { Ripple, LyRippleService, LyRippleModule } from '@alyle/ui/ripple';\nimport { CommonModule } from '@angular/common';\nvar LyButtonService = /** @class */ /*@__PURE__*/ (function () {\n    function LyButtonService(theme) {\n        this.theme = theme;\n        this.classes = {\n            root: this.theme.setRootStyle('rbtn', rootStyle),\n            outlined: this.theme.setRootStyle('btntlnd', function () { return (\"border: 1px solid currentColor\"); }),\n            buttonContent: this.theme.setRootStyle('buttonContent', function () {\n                return (\"padding:0;\" +\n                    \"display:flex;\" +\n                    \"justify-content:inherit;\" +\n                    \"align-items:inherit;\" +\n                    \"align-content:inherit;\" +\n                    \"width: 100%;\" +\n                    \"height: 100%;\" +\n                    \"box-sizing: border-box;\");\n            })\n        };\n        this.themeClassName = this.theme.setStyle('btn', this.style.bind(this));\n    }\n    LyButtonService.prototype.applyTheme = function (renderer, elementRef) {\n        renderer.addClass(elementRef.nativeElement, this.classes.root);\n        renderer.addClass(elementRef.nativeElement, this.themeClassName);\n    };\n    LyButtonService.prototype.style = function () {\n        return \"font-family:\" + this.theme.palette[\"typography\"].fontFamily + \";\" +\n            (\"font-size:\" + this.theme.palette[\"typography\"].fontSize + \"px;\") +\n            (\"color:\" + this.theme.palette[\"text\"].default + \";\");\n    };\n    LyButtonService.ngInjectableDef = defineInjectable({ factory: function LyButtonService_Factory() { return new LyButtonService(inject(LyTheme)); }, token: LyButtonService, providedIn: AlyleUIModule });\n    return LyButtonService;\n}());\nfunction rootStyle() {\n    return '-webkit-tap-highlight-color:transparent;' +\n        'background-color:rgba(0, 0, 0, 0);' +\n        'border:0;' +\n        'padding:0 16px;' +\n        '-moz-appearance:none;' +\n        'min-height:36px;' +\n        'height:36px;' +\n        'margin:0;' +\n        'border-radius:3px;' +\n        'outline:none;' +\n        'font-weight:500;' +\n        'min-width:88px;' +\n        'box-sizing:border-box;' +\n        'position:relative;' +\n        \"justify-content:center;\" +\n        \"align-items:center;\" +\n        \"align-content:center;\" +\n        'display:inline-flex;' +\n        'cursor:pointer;' +\n        '-webkit-user-select:none;' +\n        '-moz-user-select:none;' +\n        '-ms-user-select:none;' +\n        'user-select:none;' +\n        'text-decoration-line:none;' +\n        '-webkit-text-decoration-line:none;' +\n        'transition:all 375ms cubic-bezier(0.23, 1, 0.32, 1) 0ms;' +\n        \"overflow: hidden;\";\n}\nvar LyButton = /** @class */ /*@__PURE__*/ (function () {\n    function LyButton(elementRef, renderer, theme, rippleStyles, buttonService, _ngZone, bgAndColor) {\n        this.elementRef = elementRef;\n        this.renderer = renderer;\n        this.theme = theme;\n        this.rippleStyles = rippleStyles;\n        this.buttonService = buttonService;\n        this.bgAndColor = bgAndColor;\n        this._disabled = false;\n        this._rippleSensitive = false;\n        if (bgAndColor) {\n            bgAndColor.setAutoContrast();\n        }\n        this.buttonService.applyTheme(renderer, elementRef);\n        if (Platform.isBrowser) {\n            var el = elementRef.nativeElement;\n            this._rippleContainer = new Ripple(_ngZone, rippleStyles.stylesData, el);\n        }\n    }\n    Object.defineProperty(LyButton.prototype, \"outlined\", {\n        set: function (val) {\n            var classname = toBoolean(val) === true ? this.buttonService.classes.outlined : '';\n            this.theme.updateClassName(this.elementRef.nativeElement, this.renderer, classname, this._outlinedClassName);\n            this._outlinedClassName = classname;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(LyButton.prototype, \"rippleSensitive\", {\n        get: function () {\n            return this._rippleSensitive;\n        },\n        set: function (value) {\n            this._rippleSensitive = toBoolean(value);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(LyButton.prototype, \"disabled\", {\n        get: function () {\n            return this._disabled;\n        },\n        set: function (value) {\n            var key = this.bgAndColor && (this.bgAndColor.raised || this.bgAndColor.bg) ? 'r' : 'f';\n            this._disabledClassName = this.theme.setStyle(\"btn\" + key, this.disableStyle.bind(this));\n            this._disabled = toBoolean(value);\n            if (this._disabled) {\n                this.renderer.addClass(this.elementRef.nativeElement, this._disabledClassName);\n            }\n            else {\n                this.renderer.removeClass(this.elementRef.nativeElement, this._disabledClassName);\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    LyButton.prototype.focused = function () {\n        this.elementRef.nativeElement.focus();\n    };\n    LyButton.prototype.ngAfterViewInit = function () {\n        var classes = this.buttonService.classes;\n        ((this.buttonContent.nativeElement)).classList.add(classes.buttonContent);\n    };\n    LyButton.prototype.disableStyle = function () {\n        var style = \"box-shadow: 0 0 0 rgba(0, 0, 0, 0) !important;\" +\n            \"cursor: default;\" +\n            (\"color: \" + this.theme.palette[\"text\"].disabled + \" !important;\") +\n            \"pointer-events: none;\";\n        if (this.bgAndColor && (this.bgAndColor.raised || this.bgAndColor.bg)) {\n            style += \"background-color: \" + this.theme.palette[\"button\"].disabled + \" !important;\";\n        }\n        return style;\n    };\n    LyButton.prototype.ngOnDestroy = function () {\n        if (Platform.isBrowser) {\n            this._rippleContainer.removeEvents();\n        }\n    };\n    return LyButton;\n}());\nvar LyButtonModule = /** @class */ /*@__PURE__*/ (function () {\n    function LyButtonModule() {\n    }\n    return LyButtonModule;\n}());\nexport { LyButton, LyButtonModule, LyButtonService as Éµa };\n//# sourceMappingURL=alyle-ui-button.js.map\n",null]}