{"remainingRequest":"D:\\TutorsClubBitBucket\\tutorsclubweb\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js??ref--8-1!D:\\TutorsClubBitBucket\\tutorsclubweb\\node_modules\\ngx-mat-select-search\\esm5\\ngx-mat-select-search.js","dependencies":[{"path":"D:\\TutorsClubBitBucket\\tutorsclubweb\\node_modules\\ngx-mat-select-search\\esm5\\ngx-mat-select-search.js","mtime":499162500000},{"path":"D:\\TutorsClubBitBucket\\tutorsclubweb\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1533191679839},{"path":"D:\\TutorsClubBitBucket\\tutorsclubweb\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js","mtime":1533191671924}],"contextDependencies":[],"result":["import { Directive, ChangeDetectionStrategy, ChangeDetectorRef, Component, ElementRef, EventEmitter, forwardRef, Inject, Input, ViewChild, ContentChild, NgModule } from '@angular/core';\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { MatSelect, MatButtonModule, MatInputModule, MatIconModule } from '@angular/material';\nimport { Subject } from 'rxjs';\nimport { delay, take, takeUntil } from 'rxjs/operators';\nimport { CommonModule } from '@angular/common';\nvar MatSelectSearchClearDirective = /** @class */ /*@__PURE__*/ (function () {\n    function MatSelectSearchClearDirective() {\n    }\n    return MatSelectSearchClearDirective;\n}());\nvar MatSelectSearchComponent = /** @class */ /*@__PURE__*/ (function () {\n    function MatSelectSearchComponent(matSelect, changeDetectorRef) {\n        this.matSelect = matSelect;\n        this.changeDetectorRef = changeDetectorRef;\n        this.placeholderLabel = 'Suche';\n        this.noEntriesFoundLabel = 'Keine Optionen gefunden';\n        this.clearSearchInput = true;\n        this.onChange = function (_) { };\n        this.onTouched = function (_) { };\n        this.overlayClassSet = false;\n        this.change = new EventEmitter();\n        this._onDestroy = new Subject();\n    }\n    Object.defineProperty(MatSelectSearchComponent.prototype, \"value\", {\n        get: function () {\n            return this._value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    MatSelectSearchComponent.prototype.ngOnInit = function () {\n        var _this = this;\n        var panelClass = 'mat-select-search-panel';\n        if (this.matSelect.panelClass) {\n            if (Array.isArray(this.matSelect.panelClass)) {\n                this.matSelect.panelClass.push(panelClass);\n            }\n            else if (typeof this.matSelect.panelClass === 'string') {\n                this.matSelect.panelClass = [this.matSelect.panelClass, panelClass];\n            }\n            else if (typeof this.matSelect.panelClass === 'object') {\n                this.matSelect.panelClass[panelClass] = true;\n            }\n        }\n        else {\n            this.matSelect.panelClass = panelClass;\n        }\n        this.matSelect.openedChange\n            .pipe(delay(1), takeUntil(this._onDestroy))\n            .subscribe(function (opened) {\n            if (opened) {\n                _this.getWidth();\n                _this._focus();\n            }\n            else {\n                _this._reset();\n            }\n        });\n        this.matSelect.openedChange\n            .pipe(take(1))\n            .pipe(takeUntil(this._onDestroy))\n            .subscribe(function () {\n            _this._options = _this.matSelect.options;\n            _this._options.changes\n                .pipe(takeUntil(_this._onDestroy))\n                .subscribe(function () {\n                var keyManager = _this.matSelect._keyManager;\n                if (keyManager && _this.matSelect.panelOpen) {\n                    setTimeout(function () {\n                        keyManager.setFirstItemActive();\n                        _this.getWidth();\n                    }, 1);\n                }\n            });\n        });\n        this.change\n            .pipe(takeUntil(this._onDestroy))\n            .subscribe(function () {\n            _this.changeDetectorRef.detectChanges();\n        });\n        this.initMultipleHandling();\n    };\n    MatSelectSearchComponent.prototype.ngOnDestroy = function () {\n        this._onDestroy.next();\n        this._onDestroy.complete();\n    };\n    MatSelectSearchComponent.prototype.ngAfterViewInit = function () {\n        var _this = this;\n        this.setOverlayClass();\n        this.matSelect.options.changes\n            .pipe(takeUntil(this._onDestroy))\n            .subscribe(function () {\n            _this.changeDetectorRef.markForCheck();\n        });\n    };\n    MatSelectSearchComponent.prototype._handleKeydown = function (event) {\n        if (event.keyCode === 32) {\n            event.stopPropagation();\n        }\n    };\n    MatSelectSearchComponent.prototype.writeValue = function (value) {\n        var valueChanged = value !== this._value;\n        if (valueChanged) {\n            this._value = value;\n            this.change.emit(value);\n        }\n    };\n    MatSelectSearchComponent.prototype.onInputChange = function (value) {\n        var valueChanged = value !== this._value;\n        if (valueChanged) {\n            this.initMultiSelectedValues();\n            this._value = value;\n            this.onChange(value);\n            this.change.emit(value);\n        }\n    };\n    MatSelectSearchComponent.prototype.onBlur = function (value) {\n        this.writeValue(value);\n        this.onTouched();\n    };\n    MatSelectSearchComponent.prototype.registerOnChange = function (fn) {\n        this.onChange = fn;\n    };\n    MatSelectSearchComponent.prototype.registerOnTouched = function (fn) {\n        this.onTouched = fn;\n    };\n    MatSelectSearchComponent.prototype._focus = function () {\n        if (!this.searchSelectInput) {\n            return;\n        }\n        var panel = this.matSelect.panel.nativeElement;\n        var scrollTop = panel.scrollTop;\n        this.searchSelectInput.nativeElement.focus();\n        panel.scrollTop = scrollTop;\n    };\n    MatSelectSearchComponent.prototype._reset = function (focus) {\n        if (!this.searchSelectInput) {\n            return;\n        }\n        if (this.clearSearchInput) {\n            this.searchSelectInput.nativeElement.value = '';\n            this.onInputChange('');\n        }\n        if (focus) {\n            this._focus();\n        }\n    };\n    MatSelectSearchComponent.prototype.setOverlayClass = function () {\n        var _this = this;\n        if (this.overlayClassSet) {\n            return;\n        }\n        var overlayClass = 'cdk-overlay-pane-select-search';\n        this.matSelect.overlayDir.attach\n            .pipe(takeUntil(this._onDestroy))\n            .subscribe(function () {\n            var element = _this.searchSelectInput.nativeElement;\n            var overlayElement;\n            while (element = element.parentElement) {\n                if (element.classList.contains('cdk-overlay-pane')) {\n                    overlayElement = element;\n                    break;\n                }\n            }\n            if (overlayElement) {\n                overlayElement.classList.add(overlayClass);\n            }\n        });\n        this.overlayClassSet = true;\n    };\n    MatSelectSearchComponent.prototype.initMultipleHandling = function () {\n        var _this = this;\n        this.matSelect.valueChange\n            .pipe(takeUntil(this._onDestroy))\n            .subscribe(function (values) {\n            if (_this.matSelect.multiple) {\n                var restoreSelectedValues_1 = false;\n                if (_this._value && _this._value.length\n                    && _this.previousSelectedValues && Array.isArray(_this.previousSelectedValues)) {\n                    if (!values || !Array.isArray(values)) {\n                        values = [];\n                    }\n                    var optionValues_1 = _this.matSelect.options.map(function (option) { return option.value; });\n                    _this.previousSelectedValues.forEach(function (previousValue) {\n                        if (values.indexOf(previousValue) === -1 && optionValues_1.indexOf(previousValue) === -1) {\n                            values.push(previousValue);\n                            restoreSelectedValues_1 = true;\n                        }\n                    });\n                }\n                if (restoreSelectedValues_1) {\n                    _this.matSelect._onChange(values);\n                }\n                _this.previousSelectedValues = values;\n            }\n        });\n    };\n    MatSelectSearchComponent.prototype.getWidth = function () {\n        if (!this.innerSelectSearch || !this.innerSelectSearch.nativeElement) {\n            return;\n        }\n        var element = this.innerSelectSearch.nativeElement;\n        var panelElement;\n        while (element = element.parentElement) {\n            if (element.classList.contains('mat-select-panel')) {\n                panelElement = element;\n                break;\n            }\n        }\n        if (panelElement) {\n            this.innerSelectSearch.nativeElement.style.width = panelElement.clientWidth + 'px';\n        }\n    };\n    MatSelectSearchComponent.prototype.initMultiSelectedValues = function () {\n        if (this.matSelect.multiple && !this._value) {\n            this.previousSelectedValues = this.matSelect.options\n                .filter(function (option) { return option.selected; })\n                .map(function (option) { return option.value; });\n        }\n    };\n    return MatSelectSearchComponent;\n}());\nvar NgxMatSelectSearchModule = /** @class */ /*@__PURE__*/ (function () {\n    function NgxMatSelectSearchModule() {\n    }\n    return NgxMatSelectSearchModule;\n}());\nexport { MatSelectSearchComponent, NgxMatSelectSearchModule, MatSelectSearchClearDirective as Éµa };\n//# sourceMappingURL=ngx-mat-select-search.js.map\n",null]}