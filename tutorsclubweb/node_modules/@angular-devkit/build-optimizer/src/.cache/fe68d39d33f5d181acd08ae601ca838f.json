{"remainingRequest":"D:\\TutorsClubBitBucket\\tutorsclubweb\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js??ref--8-1!D:\\TutorsClubBitBucket\\tutorsclubweb\\node_modules\\ngx-bootstrap\\timepicker\\reducer\\timepicker.reducer.js","dependencies":[{"path":"D:\\TutorsClubBitBucket\\tutorsclubweb\\node_modules\\ngx-bootstrap\\timepicker\\reducer\\timepicker.reducer.js","mtime":499162500000},{"path":"D:\\TutorsClubBitBucket\\tutorsclubweb\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1533191679839},{"path":"D:\\TutorsClubBitBucket\\tutorsclubweb\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js","mtime":1533191671924}],"contextDependencies":[],"result":["import { canChangeHours, canChangeMinutes, canChangeSeconds, canChangeValue, timepickerControls } from '../timepicker-controls.util';\r\nimport { TimepickerConfig } from '../timepicker.config';\r\nimport { changeTime, setTime, isValidLimit } from '../timepicker.utils';\r\nimport { TimepickerActions } from './timepicker.actions';\r\nvar TimepickerState = /** @class */ /*@__PURE__*/ (function () {\r\n    function TimepickerState() {\r\n    }\r\n    return TimepickerState;\r\n}());\r\nexport { TimepickerState };\r\nexport var initialState = {\r\n    value: null,\r\n    config: new TimepickerConfig(),\r\n    controls: {\r\n        canIncrementHours: true,\r\n        canIncrementMinutes: true,\r\n        canIncrementSeconds: true,\r\n        canDecrementHours: true,\r\n        canDecrementMinutes: true,\r\n        canDecrementSeconds: true,\r\n        canToggleMeridian: true\r\n    }\r\n};\r\nexport function timepickerReducer(state, action) {\r\n    if (state === void 0) {\r\n        state = initialState;\r\n    }\r\n    switch (action.type) {\r\n        case TimepickerActions.WRITE_VALUE: {\r\n            return Object.assign({}, state, { value: action.payload });\r\n        }\r\n        case TimepickerActions.CHANGE_HOURS: {\r\n            if (!canChangeValue(state.config, action.payload) ||\r\n                !canChangeHours(action.payload, state.controls)) {\r\n                return state;\r\n            }\r\n            var _newTime = changeTime(state.value, { hour: action.payload.step });\r\n            if ((state.config.max || state.config.min) && !isValidLimit(state.config, _newTime)) {\r\n                return state;\r\n            }\r\n            return Object.assign({}, state, { value: _newTime });\r\n        }\r\n        case TimepickerActions.CHANGE_MINUTES: {\r\n            if (!canChangeValue(state.config, action.payload) ||\r\n                !canChangeMinutes(action.payload, state.controls)) {\r\n                return state;\r\n            }\r\n            var _newTime = changeTime(state.value, { minute: action.payload.step });\r\n            if ((state.config.max || state.config.min) && !isValidLimit(state.config, _newTime)) {\r\n                return state;\r\n            }\r\n            return Object.assign({}, state, { value: _newTime });\r\n        }\r\n        case TimepickerActions.CHANGE_SECONDS: {\r\n            if (!canChangeValue(state.config, action.payload) ||\r\n                !canChangeSeconds(action.payload, state.controls)) {\r\n                return state;\r\n            }\r\n            var _newTime = changeTime(state.value, {\r\n                seconds: action.payload.step\r\n            });\r\n            if ((state.config.max || state.config.min) && !isValidLimit(state.config, _newTime)) {\r\n                return state;\r\n            }\r\n            return Object.assign({}, state, { value: _newTime });\r\n        }\r\n        case TimepickerActions.SET_TIME_UNIT: {\r\n            if (!canChangeValue(state.config)) {\r\n                return state;\r\n            }\r\n            var _newTime = setTime(state.value, action.payload);\r\n            return Object.assign({}, state, { value: _newTime });\r\n        }\r\n        case TimepickerActions.UPDATE_CONTROLS: {\r\n            var _newControlsState = timepickerControls(state.value, action.payload);\r\n            var _newState = {\r\n                value: state.value,\r\n                config: action.payload,\r\n                controls: _newControlsState\r\n            };\r\n            if (state.config.showMeridian !== _newState.config.showMeridian) {\r\n                if (state.value) {\r\n                    _newState.value = new Date(state.value);\r\n                }\r\n            }\r\n            return Object.assign({}, state, _newState);\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n//# sourceMappingURL=timepicker.reducer.js.map\r\n",null]}