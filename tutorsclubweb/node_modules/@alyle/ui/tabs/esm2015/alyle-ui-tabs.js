import { Component, Directive, Renderer, ElementRef, Input, ContentChildren, ContentChild, ViewContainerRef, ViewChild, TemplateRef, forwardRef, HostBinding, Output, EventEmitter, Optional, NgModule } from '@angular/core';
import { LyTheme, NgTranscludeModule } from '@alyle/ui';
import { LyButton } from '@alyle/ui/button';
import { CommonModule } from '@angular/common';
import { LyHeaderPaginationModule } from '@alyle/ui/header-pagination';
import { LyRippleModule } from '@alyle/ui/ripple';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class LyTabGroupComponent {
    /**
     * @param {?} elementRef
     * @param {?} renderer
     * @param {?} viewContainerRef
     * @param {?} theme
     */
    constructor(elementRef, renderer, viewContainerRef, theme) {
        this.elementRef = elementRef;
        this.renderer = renderer;
        this.viewContainerRef = viewContainerRef;
        this.theme = theme;
        this._bg = 'rgba(0, 0, 0, 0)';
        this._color = 'primary';
        this.tabRows = 0;
        this._selectedIndex = 0;
        this.tabWidth = 0;
        this.tabLeft = 0;
        this._isInitialized = false;
        this.selectedIndexChange = new EventEmitter();
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set selectedIndex(value) {
        if (this.tabs) {
            if (this.tabs.toArray()[value]) {
                this.tabs.toArray()[value].setIndex(value);
            }
        }
        else {
            // this.updateTabsHeader();
            this._selectedIndex = value;
        }
        // if (value) {
        // }
        // if (this._isInitialized == true) {
        //   if (this.tabRows != this.tabs.length) {
        //     this.tabRows = this.tabs.length;
        //   }
        // }
    }
    /**
     * @return {?}
     */
    get selectedIndex() { return this._selectedIndex; }
    /**
     * @return {?}
     */
    ngAfterContentInit() {
        this.updateTabsHeader();
        this.tabRows = this.tabs.length;
    }
    /**
     * @return {?}
     */
    ngOnInit() { }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        if (changes['selectedIndex']) {
            if (!changes['selectedIndex'].firstChange) {
                const /** @type {?} */ index = changes['selectedIndex'].currentValue;
                const /** @type {?} */ tabRef = this._tabsContent.nativeElement;
            }
        }
    }
    /**
     * @return {?}
     */
    setTab() {
    }
    /**
     * @return {?}
     */
    updateTab() {
        // this.updateTabsHeader();
    }
    /**
     * @return {?}
     */
    updateTabsHeader() {
        if (!this.tabs) {
            return;
        }
    }
    /**
     * @return {?}
     */
    ngAfterContentChecked() {
        if (this.tabRows != this.tabs.length && this._isInitialized == true) {
            this.tabRows = this.tabs.length;
            // this.updateTabsHeader();
        }
    }
    /**
     * @return {?}
     */
    ngAfterViewChecked() {
        this._isInitialized = true;
    }
    /**
     * @param {?} tab
     * @return {?}
     */
    updateTabIndicator(tab) {
        if (!tab) {
            return;
        }
        Promise.resolve(null).then(() => {
            this.tabWidth = tab.offsetWidth;
            this.tabLeft = tab.offsetLeft;
        });
    }
    /**
     * @param {?} tab
     * @param {?} index
     * @return {?}
     */
    sMargin(tab, index) {
        if (index === 0) {
            this._margin = tab.offsetLeft * 2;
        }
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        /**
             * TODO: fix--> recibir el enevto del boton, crear evento del boton y actualizar line
             */
        this.tabs.forEach((item, index) => {
            this.sMargin(item.elementRef.nativeElement, index);
            item._index = index;
            const /** @type {?} */ tabRef = item.elementRef.nativeElement;
            if (this._selectedIndex == index && !!tabRef) {
                if (!!item.lyButton) {
                    // Promise.resolve(null).then(() => {
                    //   item.lyButton.buttonPadding.subscribe((val) => {
                    //     this.updateTabIndicator(tabRef);
                    //   });
                    // });
                }
                else {
                    this.updateTabIndicator(tabRef);
                }
            }
        });
        this.tabs.changes.subscribe((tabs) => {
            tabs.forEach((item, index) => {
                const /** @type {?} */ tabRef = item.elementRef.nativeElement;
                this.sMargin(tabRef, index);
                item._index = index;
                if (this._selectedIndex == index && !!tabRef) {
                    this.updateTabIndicator(tabRef);
                }
            });
        });
    }
}
LyTabGroupComponent.decorators = [
    { type: Component, args: [{
                selector: 'ly-tab-group, ly-tabs',
                styles: [`:host{position:relative;display:block}.ly-tab-header{height:48px;width:100%;position:relative}.ly-tab-header::after{content:' ';position:absolute;bottom:0;left:0;right:0;height:1px;background-color:rgba(0,0,0,.06)}.ly-tab-header-content{display:-webkit-inline-box;display:-ms-inline-flexbox;display:inline-flex}.ly-tab-indicator{position:absolute;height:2px;width:0;background:currentColor;bottom:0;-webkit-transition:all 450ms cubic-bezier(.23,1,.32,1) 0s!important;transition:all 450ms cubic-bezier(.23,1,.32,1) 0s!important}`],
                template: `<div class="ly-tab-header">
  <ly-header-pagination>
    <!-- <div class="ly-tab-header-content" [style.background]="styleBackground" #tabsContent> -->
    <div class="ly-tab-header-content" #tabsContent>
      <ng-content></ng-content>
    </div>
    <!-- <div
    class="ly-tab-indicator"
    [style.color]="styleColor"
    [style.width]="tabWidth+'px'"
    [style.left]="tabLeft+'px'"></div> -->
    <div
    class="ly-tab-indicator"
    [style.width]="tabWidth+'px'"
    [style.left]="tabLeft+'px'"></div>
  </ly-header-pagination>
</div>
<div *ngFor="let item of tabs; let i = index">
  <div [hidden]="!(i == _selectedIndex)">
    <ng-template [ngTransclude]="item.templateRef"></ng-template>
  </div>
</div>
<!-- <div [ngTransclude]="t.tabContent" *ngFor="let t of tabs">
  ehhh
</div> -->
`,
            },] },
];
/** @nocollapse */
LyTabGroupComponent.ctorParameters = () => [
    { type: ElementRef, },
    { type: Renderer, },
    { type: ViewContainerRef, },
    { type: LyTheme, },
];
LyTabGroupComponent.propDecorators = {
    "tabs": [{ type: ContentChildren, args: [forwardRef(() => LyTab),] },],
    "lyButton": [{ type: ContentChild, args: [LyButton,] },],
    "_tabsContent": [{ type: ViewChild, args: ['tabsContent',] },],
    "templateRef": [{ type: ViewChild, args: [TemplateRef,] },],
    "selectedIndex": [{ type: Input },],
    "selectedIndexChange": [{ type: Output },],
};
class LyTabContent {
}
LyTabContent.decorators = [
    { type: Directive, args: [{
                selector: '[ly-tab-content]',
            },] },
];
class LyTab {
    /**
     * @param {?} lyTabGroup
     * @param {?} elementRef
     */
    constructor(lyTabGroup, elementRef) {
        this.elementRef = elementRef;
        this._index = 0;
        this._indexGroup = 0;
        this.lyTabGroup = lyTabGroup;
        this._indexGroup = this.lyTabGroup._selectedIndex;
    }
    /**
     * @return {?}
     */
    get tabStyles() {
        return { color: 'currentColor' };
    }
    /**
     * @param {...?} arg
     * @return {?}
     */
    llOorr(...arg) {
        return arg[0] < arg[1] ? 'r' : 'l';
    }
    /**
     * @return {?}
     */
    solt() {
    }
    /**
     * @param {?} index
     * @return {?}
     */
    emitChange(index) {
        this.lyTabGroup.selectedIndexChange.emit(index);
    }
    /**
     * @param {?} elem
     * @return {?}
     */
    widthExacta(elem) {
        return elem.offsetWidth;
        // if (typeof elem.getBoundingClientRect !== typeof undefined) {
        //   return elem.getBoundingClientRect().width;
        // } else {
        //   return elem.offsetWidth;
        // }
    }
    /**
     * @param {?} num
     * @return {?}
     */
    floor(num) {
        // return Math.round(num);
        return (num);
    }
    /**
     * @param {?} index
     * @return {?}
     */
    setIndex(index) {
        const /** @type {?} */ ev = /** @type {?} */ (this.elementRef.nativeElement);
        let /** @type {?} */ restWi = 0;
        const /** @type {?} */ tabLabel = /** @type {?} */ (this.elementRef.nativeElement);
        restWi = this.widthExacta(ev) - this.widthExacta(tabLabel);
        // ev = tabLabel as HTMLElement;
        const /** @type {?} */ w = this.floor(this.lyTabGroup._tabsContent.nativeElement.offsetWidth);
        const /** @type {?} */ llOorr = this.llOorr(this.lyTabGroup._selectedIndex, index);
        let /** @type {?} */ prevIndex = this.lyTabGroup._selectedIndex;
        let /** @type {?} */ eve;
        this.lyTabGroup._selectedIndex = index;
        // this.lyTabGroup.updateTabsHeader();
        let /** @type {?} */ dW;
        let /** @type {?} */ dL;
        // let outEf: any = setTimeout(() => {});
        // clearTimeout(outEf);
        if (this.lyTabGroup.timeout) {
            // this.lyTabGroup.timeout.callback();
            clearTimeout(this.lyTabGroup.timeout);
            this.lyTabGroup.timeout = null;
        }
        // if (tabLabel.className != 'ly-tab-label-item') {
        //   eve = getParents(tabLabel, '.ly-tab-label-item');
        //   dW = getParents(tabLabel, '.ly-tab-label-item').offsetWidth;
        //   dL = getParents(tabLabel, '.ly-tab-label-item').offsetLeft;
        // } else {
        eve = ev;
        dW = this.floor(tabLabel.offsetWidth);
        dL = this.floor(tabLabel.offsetLeft);
        // }
        if (llOorr === 'r') {
            // this.lyTabGroup.tabWidth = dW;
            // this.lyTabGroup.tabLeft  = dL;
            // this.lyTabGroup.tabWidth = w - dL;
            // this.lyTabGroup.tabLeft  = dL;
            let /** @type {?} */ sibsW = 0;
            const /** @type {?} */ sibsID = [];
            const /** @type {?} */ thisW = eve.previousSibling.offsetWidth;
            // clearTimeout(outEf);
            this.lyTabGroup.timeout = setTimeout(() => {
                this.lyTabGroup.tabWidth = dW;
                this.lyTabGroup.tabLeft = dL;
                this.lyTabGroup.timeout = null;
                this.lyTabGroup.selectedIndexChange.emit(index);
            }, 475);
            while (eve = eve.previousSibling) {
                if (eve.nodeName === 'LY-TAB') {
                    sibsID.push(eve);
                }
            }
            sibsID.reverse();
            for (let /** @type {?} */ i = 0; i < sibsID.length; i++) {
                if (prevIndex <= i) {
                    sibsW = sibsID[i].offsetWidth + sibsW + (this.lyTabGroup._margin || 0);
                }
            }
            this.lyTabGroup.tabWidth = sibsW + dW;
        }
        else if (llOorr === 'l') {
            let /** @type {?} */ sibsW = 0;
            const /** @type {?} */ sibsID = [];
            // let thisW = eve.previousSibling.offsetWidth;
            prevIndex = (this.lyTabGroup.tabRows - 1) - prevIndex;
            this.lyTabGroup.timeout = setTimeout(() => {
                this.lyTabGroup.tabLeft = dL;
                this.lyTabGroup.tabWidth = dW;
                this.lyTabGroup.timeout = null;
                this.lyTabGroup.selectedIndexChange.emit(index);
            }, 475);
            while (eve = eve.nextSibling) {
                if (eve.nodeName === 'LY-TAB') {
                    sibsID.push(eve);
                }
            }
            sibsID.reverse();
            for (let /** @type {?} */ i = 0; i < sibsID.length; i++) {
                if (i >= prevIndex) {
                    sibsW = sibsID[i].offsetWidth + sibsW + (this.lyTabGroup._margin || 0);
                }
            }
            this.lyTabGroup.tabWidth = sibsW + dW;
            this.lyTabGroup.tabLeft = dL;
            // this.lyTabGroup.tabWidth = dW;
            // this.lyTabGroup.tabLeft  = dL;
        }
    }
    /**
     * @return {?}
     */
    updateTabLine() {
        // this.lyTabGroup._selectedIndex = index;
        // this.lyTabGroup.tabWidth = ev.offsetWidth;
        // this.lyTabGroup.tabLeft = ev.offsetLeft;
    }
    /**
     * @return {?}
     */
    get indexGroup() {
        this._indexGroup = this.lyTabGroup._selectedIndex;
        return this._indexGroup;
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        this.stateTab = !(this._index == this.indexGroup);
        if (this.stateTab) {
            // this.lyTabGroup.tabWidth = this.elementRef.nativeElement.offsetWidth;
            // this.lyTabGroup.tabLeft = this.elementRef.nativeElement.offsetLeft;
        }
    }
    /**
     * @return {?}
     */
    ngAfterContentInit() {
        // this.lyTabGroup.updateTabsHeader();
        this.hostStyle = this.lyTabGroup.theme.palette.primary["text"];
    }
}
LyTab.decorators = [
    { type: Component, args: [{
                selector: 'ly-tab',
                styles: [`.ly-tab-label-item{position:relative;display:inline-block;min-width:0;height:100%;overflow:hidden;text-align:center;line-height:48px;cursor:pointer;-webkit-box-sizing:border-box;box-sizing:border-box}:host{margin:0 8px}:host /deep/ [ly-tab-label]{display:block}.ly-tab-label-item /deep/{-webkit-tap-highlight-color:transparent}.ly-tab-label-item /deep/ [ly-button],.ly-tab-label-item /deep/ ly-button{height:100%;vertical-align:top;border-radius:0}.ly-tab-label-item /deep/ .ly-button-padding-left{padding-left:8px}.ly-tab-label-item /deep/ .ly-button-padding-right{padding-right:8px}.ly-tab-label-item /deep/ ly-tab-label:not([ly-button]){padding:0 8px;display:-webkit-inline-box;display:-ms-inline-flexbox;display:inline-flex;white-space:nowrap}`],
                template: `<!-- <button ly-button (mousedown)="solt()" (click)="setIndex(_index)" class="ly-tab-label-item">
  <ng-content select="ly-tab-label"></ng-content>
</button> -->
<div (mousedown)="solt()" (click)="setIndex(_index)" [ngStyle]="tabStyles" class="ly-tab-label-item" lyRipple>
  <ng-content select="ly-tab-label"></ng-content>
  <ng-content select="[ly-tab-label]"></ng-content>
</div>
<ng-template>
<div>
  <ng-content></ng-content>
</div>
</ng-template>
`,
            },] },
];
/** @nocollapse */
LyTab.ctorParameters = () => [
    { type: LyTabGroupComponent, decorators: [{ type: Optional },] },
    { type: ElementRef, },
];
LyTab.propDecorators = {
    "lyButton": [{ type: ContentChild, args: [LyButton,] },],
    "hostStyle": [{ type: HostBinding, args: ['style.color',] },],
    "templateRef": [{ type: ViewChild, args: [TemplateRef,] },],
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class LyTabLabelDirective {
}
LyTabLabelDirective.decorators = [
    { type: Directive, args: [{
                selector: 'ly-tab-label, [ly-tab-label]'
            },] },
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class LyTabsModule {
}
LyTabsModule.decorators = [
    { type: NgModule, args: [{
                imports: [CommonModule, LyRippleModule, LyHeaderPaginationModule, NgTranscludeModule],
                exports: [LyTab, LyTabGroupComponent, LyTabLabelDirective, LyTabContent],
                declarations: [LyTab, LyTabGroupComponent, LyTabLabelDirective, LyTabContent]
            },] },
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * Generated bundle index. Do not edit.
 */

export { LyTabsModule, LyTabGroupComponent, LyTabContent, LyTab, LyTabLabelDirective };
//# sourceMappingURL=alyle-ui-tabs.js.map
