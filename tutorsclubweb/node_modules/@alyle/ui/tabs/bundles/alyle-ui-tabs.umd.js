(function (global, factory) {
	typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@alyle/ui'), require('@alyle/ui/button'), require('@angular/common'), require('@alyle/ui/header-pagination'), require('@alyle/ui/ripple')) :
	typeof define === 'function' && define.amd ? define('ly.tabs', ['exports', '@angular/core', '@alyle/ui', '@alyle/ui/button', '@angular/common', '@alyle/ui/header-pagination', '@alyle/ui/ripple'], factory) :
	(factory((global.ly = global.ly || {}, global.ly.tabs = {}),global.ng.core,global.ly.core,global.ly.button,global.ng.common,global.ly.headerPagination,global.ly.ripple));
}(this, (function (exports,core,ui,button,common,headerPagination,ripple) { 'use strict';

var LyTabGroupComponent = /** @class */ (function () {
    function LyTabGroupComponent(elementRef, renderer, viewContainerRef, theme) {
        this.elementRef = elementRef;
        this.renderer = renderer;
        this.viewContainerRef = viewContainerRef;
        this.theme = theme;
        this._bg = 'rgba(0, 0, 0, 0)';
        this._color = 'primary';
        this.tabRows = 0;
        this._selectedIndex = 0;
        this.tabWidth = 0;
        this.tabLeft = 0;
        this._isInitialized = false;
        this.selectedIndexChange = new core.EventEmitter();
    }
    Object.defineProperty(LyTabGroupComponent.prototype, "selectedIndex", {
        get: function () { return this._selectedIndex; },
        set: function (value) {
            if (this.tabs) {
                if (this.tabs.toArray()[value]) {
                    this.tabs.toArray()[value].setIndex(value);
                }
            }
            else {
                this._selectedIndex = value;
            }
        },
        enumerable: true,
        configurable: true
    });
    LyTabGroupComponent.prototype.ngAfterContentInit = function () {
        this.updateTabsHeader();
        this.tabRows = this.tabs.length;
    };
    LyTabGroupComponent.prototype.ngOnInit = function () { };
    LyTabGroupComponent.prototype.ngOnChanges = function (changes) {
        if (changes['selectedIndex']) {
            if (!changes['selectedIndex'].firstChange) {
                var index = changes['selectedIndex'].currentValue;
                var tabRef = this._tabsContent.nativeElement;
            }
        }
    };
    LyTabGroupComponent.prototype.setTab = function () {
    };
    LyTabGroupComponent.prototype.updateTab = function () {
    };
    LyTabGroupComponent.prototype.updateTabsHeader = function () {
        if (!this.tabs) {
            return;
        }
    };
    LyTabGroupComponent.prototype.ngAfterContentChecked = function () {
        if (this.tabRows != this.tabs.length && this._isInitialized == true) {
            this.tabRows = this.tabs.length;
        }
    };
    LyTabGroupComponent.prototype.ngAfterViewChecked = function () {
        this._isInitialized = true;
    };
    LyTabGroupComponent.prototype.updateTabIndicator = function (tab) {
        var _this = this;
        if (!tab) {
            return;
        }
        Promise.resolve(null).then(function () {
            _this.tabWidth = tab.offsetWidth;
            _this.tabLeft = tab.offsetLeft;
        });
    };
    LyTabGroupComponent.prototype.sMargin = function (tab, index) {
        if (index === 0) {
            this._margin = tab.offsetLeft * 2;
        }
    };
    LyTabGroupComponent.prototype.ngAfterViewInit = function () {
        var _this = this;
        this.tabs.forEach(function (item, index) {
            _this.sMargin(item.elementRef.nativeElement, index);
            item._index = index;
            var tabRef = item.elementRef.nativeElement;
            if (_this._selectedIndex == index && !!tabRef) {
                if (!!item.lyButton) {
                }
                else {
                    _this.updateTabIndicator(tabRef);
                }
            }
        });
        this.tabs.changes.subscribe(function (tabs) {
            tabs.forEach(function (item, index) {
                var tabRef = item.elementRef.nativeElement;
                _this.sMargin(tabRef, index);
                item._index = index;
                if (_this._selectedIndex == index && !!tabRef) {
                    _this.updateTabIndicator(tabRef);
                }
            });
        });
    };
    return LyTabGroupComponent;
}());
LyTabGroupComponent.decorators = [
    { type: core.Component, args: [{
                selector: 'ly-tab-group, ly-tabs',
                styles: [":host{position:relative;display:block}.ly-tab-header{height:48px;width:100%;position:relative}.ly-tab-header::after{content:' ';position:absolute;bottom:0;left:0;right:0;height:1px;background-color:rgba(0,0,0,.06)}.ly-tab-header-content{display:-webkit-inline-box;display:-ms-inline-flexbox;display:inline-flex}.ly-tab-indicator{position:absolute;height:2px;width:0;background:currentColor;bottom:0;-webkit-transition:all 450ms cubic-bezier(.23,1,.32,1) 0s!important;transition:all 450ms cubic-bezier(.23,1,.32,1) 0s!important}"],
                template: "<div class=\"ly-tab-header\">\n  <ly-header-pagination>\n    <!-- <div class=\"ly-tab-header-content\" [style.background]=\"styleBackground\" #tabsContent> -->\n    <div class=\"ly-tab-header-content\" #tabsContent>\n      <ng-content></ng-content>\n    </div>\n    <!-- <div\n    class=\"ly-tab-indicator\"\n    [style.color]=\"styleColor\"\n    [style.width]=\"tabWidth+'px'\"\n    [style.left]=\"tabLeft+'px'\"></div> -->\n    <div\n    class=\"ly-tab-indicator\"\n    [style.width]=\"tabWidth+'px'\"\n    [style.left]=\"tabLeft+'px'\"></div>\n  </ly-header-pagination>\n</div>\n<div *ngFor=\"let item of tabs; let i = index\">\n  <div [hidden]=\"!(i == _selectedIndex)\">\n    <ng-template [ngTransclude]=\"item.templateRef\"></ng-template>\n  </div>\n</div>\n<!-- <div [ngTransclude]=\"t.tabContent\" *ngFor=\"let t of tabs\">\n  ehhh\n</div> -->\n",
            },] },
];
LyTabGroupComponent.ctorParameters = function () { return [
    { type: core.ElementRef, },
    { type: core.Renderer, },
    { type: core.ViewContainerRef, },
    { type: ui.LyTheme, },
]; };
LyTabGroupComponent.propDecorators = {
    "tabs": [{ type: core.ContentChildren, args: [core.forwardRef(function () { return LyTab; }),] },],
    "lyButton": [{ type: core.ContentChild, args: [button.LyButton,] },],
    "_tabsContent": [{ type: core.ViewChild, args: ['tabsContent',] },],
    "templateRef": [{ type: core.ViewChild, args: [core.TemplateRef,] },],
    "selectedIndex": [{ type: core.Input },],
    "selectedIndexChange": [{ type: core.Output },],
};
var LyTabContent = /** @class */ (function () {
    function LyTabContent() {
    }
    return LyTabContent;
}());
LyTabContent.decorators = [
    { type: core.Directive, args: [{
                selector: '[ly-tab-content]',
            },] },
];
var LyTab = /** @class */ (function () {
    function LyTab(lyTabGroup, elementRef) {
        this.elementRef = elementRef;
        this._index = 0;
        this._indexGroup = 0;
        this.lyTabGroup = lyTabGroup;
        this._indexGroup = this.lyTabGroup._selectedIndex;
    }
    Object.defineProperty(LyTab.prototype, "tabStyles", {
        get: function () {
            return { color: 'currentColor' };
        },
        enumerable: true,
        configurable: true
    });
    LyTab.prototype.llOorr = function () {
        var arg = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            arg[_i] = arguments[_i];
        }
        return arg[0] < arg[1] ? 'r' : 'l';
    };
    LyTab.prototype.solt = function () {
    };
    LyTab.prototype.emitChange = function (index) {
        this.lyTabGroup.selectedIndexChange.emit(index);
    };
    LyTab.prototype.widthExacta = function (elem) {
        return elem.offsetWidth;
    };
    LyTab.prototype.floor = function (num) {
        return (num);
    };
    LyTab.prototype.setIndex = function (index) {
        var _this = this;
        var ev = (this.elementRef.nativeElement);
        var restWi = 0;
        var tabLabel = (this.elementRef.nativeElement);
        restWi = this.widthExacta(ev) - this.widthExacta(tabLabel);
        var w = this.floor(this.lyTabGroup._tabsContent.nativeElement.offsetWidth);
        var llOorr = this.llOorr(this.lyTabGroup._selectedIndex, index);
        var prevIndex = this.lyTabGroup._selectedIndex;
        var eve;
        this.lyTabGroup._selectedIndex = index;
        var dW;
        var dL;
        if (this.lyTabGroup.timeout) {
            clearTimeout(this.lyTabGroup.timeout);
            this.lyTabGroup.timeout = null;
        }
        eve = ev;
        dW = this.floor(tabLabel.offsetWidth);
        dL = this.floor(tabLabel.offsetLeft);
        if (llOorr === 'r') {
            var sibsW = 0;
            var sibsID = [];
            var thisW = eve.previousSibling.offsetWidth;
            this.lyTabGroup.timeout = setTimeout(function () {
                _this.lyTabGroup.tabWidth = dW;
                _this.lyTabGroup.tabLeft = dL;
                _this.lyTabGroup.timeout = null;
                _this.lyTabGroup.selectedIndexChange.emit(index);
            }, 475);
            while (eve = eve.previousSibling) {
                if (eve.nodeName === 'LY-TAB') {
                    sibsID.push(eve);
                }
            }
            sibsID.reverse();
            for (var i = 0; i < sibsID.length; i++) {
                if (prevIndex <= i) {
                    sibsW = sibsID[i].offsetWidth + sibsW + (this.lyTabGroup._margin || 0);
                }
            }
            this.lyTabGroup.tabWidth = sibsW + dW;
        }
        else if (llOorr === 'l') {
            var sibsW = 0;
            var sibsID = [];
            prevIndex = (this.lyTabGroup.tabRows - 1) - prevIndex;
            this.lyTabGroup.timeout = setTimeout(function () {
                _this.lyTabGroup.tabLeft = dL;
                _this.lyTabGroup.tabWidth = dW;
                _this.lyTabGroup.timeout = null;
                _this.lyTabGroup.selectedIndexChange.emit(index);
            }, 475);
            while (eve = eve.nextSibling) {
                if (eve.nodeName === 'LY-TAB') {
                    sibsID.push(eve);
                }
            }
            sibsID.reverse();
            for (var i = 0; i < sibsID.length; i++) {
                if (i >= prevIndex) {
                    sibsW = sibsID[i].offsetWidth + sibsW + (this.lyTabGroup._margin || 0);
                }
            }
            this.lyTabGroup.tabWidth = sibsW + dW;
            this.lyTabGroup.tabLeft = dL;
        }
    };
    LyTab.prototype.updateTabLine = function () {
    };
    Object.defineProperty(LyTab.prototype, "indexGroup", {
        get: function () {
            this._indexGroup = this.lyTabGroup._selectedIndex;
            return this._indexGroup;
        },
        enumerable: true,
        configurable: true
    });
    LyTab.prototype.ngAfterViewInit = function () {
        this.stateTab = !(this._index == this.indexGroup);
        if (this.stateTab) {
        }
    };
    LyTab.prototype.ngAfterContentInit = function () {
        this.hostStyle = this.lyTabGroup.theme.palette.primary["text"];
    };
    return LyTab;
}());
LyTab.decorators = [
    { type: core.Component, args: [{
                selector: 'ly-tab',
                styles: [".ly-tab-label-item{position:relative;display:inline-block;min-width:0;height:100%;overflow:hidden;text-align:center;line-height:48px;cursor:pointer;-webkit-box-sizing:border-box;box-sizing:border-box}:host{margin:0 8px}:host /deep/ [ly-tab-label]{display:block}.ly-tab-label-item /deep/{-webkit-tap-highlight-color:transparent}.ly-tab-label-item /deep/ [ly-button],.ly-tab-label-item /deep/ ly-button{height:100%;vertical-align:top;border-radius:0}.ly-tab-label-item /deep/ .ly-button-padding-left{padding-left:8px}.ly-tab-label-item /deep/ .ly-button-padding-right{padding-right:8px}.ly-tab-label-item /deep/ ly-tab-label:not([ly-button]){padding:0 8px;display:-webkit-inline-box;display:-ms-inline-flexbox;display:inline-flex;white-space:nowrap}"],
                template: "<!-- <button ly-button (mousedown)=\"solt()\" (click)=\"setIndex(_index)\" class=\"ly-tab-label-item\">\n  <ng-content select=\"ly-tab-label\"></ng-content>\n</button> -->\n<div (mousedown)=\"solt()\" (click)=\"setIndex(_index)\" [ngStyle]=\"tabStyles\" class=\"ly-tab-label-item\" lyRipple>\n  <ng-content select=\"ly-tab-label\"></ng-content>\n  <ng-content select=\"[ly-tab-label]\"></ng-content>\n</div>\n<ng-template>\n<div>\n  <ng-content></ng-content>\n</div>\n</ng-template>\n",
            },] },
];
LyTab.ctorParameters = function () { return [
    { type: LyTabGroupComponent, decorators: [{ type: core.Optional },] },
    { type: core.ElementRef, },
]; };
LyTab.propDecorators = {
    "lyButton": [{ type: core.ContentChild, args: [button.LyButton,] },],
    "hostStyle": [{ type: core.HostBinding, args: ['style.color',] },],
    "templateRef": [{ type: core.ViewChild, args: [core.TemplateRef,] },],
};
var LyTabLabelDirective = /** @class */ (function () {
    function LyTabLabelDirective() {
    }
    return LyTabLabelDirective;
}());
LyTabLabelDirective.decorators = [
    { type: core.Directive, args: [{
                selector: 'ly-tab-label, [ly-tab-label]'
            },] },
];
var LyTabsModule = /** @class */ (function () {
    function LyTabsModule() {
    }
    return LyTabsModule;
}());
LyTabsModule.decorators = [
    { type: core.NgModule, args: [{
                imports: [common.CommonModule, ripple.LyRippleModule, headerPagination.LyHeaderPaginationModule, ui.NgTranscludeModule],
                exports: [LyTab, LyTabGroupComponent, LyTabLabelDirective, LyTabContent],
                declarations: [LyTab, LyTabGroupComponent, LyTabLabelDirective, LyTabContent]
            },] },
];

exports.LyTabsModule = LyTabsModule;
exports.LyTabGroupComponent = LyTabGroupComponent;
exports.LyTabContent = LyTabContent;
exports.LyTab = LyTab;
exports.LyTabLabelDirective = LyTabLabelDirective;

Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=alyle-ui-tabs.umd.js.map
