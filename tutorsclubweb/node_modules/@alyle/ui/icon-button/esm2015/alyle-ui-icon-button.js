import { LyTheme, ProvidedInTheme, LyBgColorAndRaised, AlyleUIModule } from '@alyle/ui';
import { Injectable, NgModule, Component, ElementRef, ViewChild, Optional, Renderer2, ChangeDetectionStrategy, defineInjectable, inject } from '@angular/core';
import { LyRipple, LyRippleModule } from '@alyle/ui/ripple';
import { CommonModule } from '@angular/common';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class LyIconButtonService {
    /**
     * @param {?} theme
     */
    constructor(theme) {
        this.theme = theme;
        this.classes = {
            host: this.theme.setStyle('icnBtn', () => {
                const /** @type {?} */ style = `-webkit-user-select:none;` +
                    `-moz-user-select:none;` +
                    `-ms-user-select:none;` +
                    `user-select:none;` +
                    `-webkit-tap-highlight-color:rgba(0, 0, 0, 0);` +
                    `justify-content: center;` +
                    `align-items: center;` +
                    `background:transparent;` +
                    `border:0;` +
                    `padding:0;` +
                    `overflow:hidden;` +
                    `width:${this.theme.palette["iconButton"].size};` +
                    `height:${this.theme.palette["iconButton"].size};` +
                    `cursor:pointer;` +
                    `outline:none;` +
                    `box-sizing:border-box;` +
                    `color:currentColor;` +
                    `display:inline-flex;` +
                    `position:relative;` +
                    `border-radius:50%;`;
                return style;
            }),
            content: this.theme.setRootStyle('icnBtnCntnt', () => (`display:flex;` +
                `justify-content:inherit;` +
                `align-items:inherit;` +
                `width:inherit;` +
                `height:inherit;` +
                `overflow:inherit;` +
                `z-index:0;`))
        };
    }
}
LyIconButtonService.decorators = [
    { type: Injectable, args: [ProvidedInTheme,] },
];
/** @nocollapse */
LyIconButtonService.ctorParameters = () => [
    { type: LyTheme, },
];
/** @nocollapse */ LyIconButtonService.ngInjectableDef = defineInjectable({ factory: function LyIconButtonService_Factory() { return new LyIconButtonService(inject(LyTheme)); }, token: LyIconButtonService, providedIn: AlyleUIModule });

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class LyIconButton {
    /**
     * @param {?} elementRef
     * @param {?} renderer
     * @param {?} bgAndColor
     * @param {?} iconButtonService
     */
    constructor(elementRef, renderer, bgAndColor, iconButtonService) {
        this.elementRef = elementRef;
        this.bgAndColor = bgAndColor;
        this.iconButtonService = iconButtonService;
        renderer.addClass(elementRef.nativeElement, iconButtonService.classes.host);
        if (bgAndColor) {
            bgAndColor.setAutoContrast();
        }
    }
}
LyIconButton.decorators = [
    { type: Component, args: [{
                selector: 'button[ly-icon-button], a[ly-icon-button], span[ly-icon-button]',
                template: `
  <div class="{{ iconButtonService.classes.content }}"
  lyRipple
  lyRippleCentered
  >
    <ng-content></ng-content>
  </div>
  `,
                preserveWhitespaces: false,
                changeDetection: ChangeDetectionStrategy.OnPush,
                exportAs: 'lyIconButton'
            },] },
];
/** @nocollapse */
LyIconButton.ctorParameters = () => [
    { type: ElementRef, },
    { type: Renderer2, },
    { type: LyBgColorAndRaised, decorators: [{ type: Optional },] },
    { type: LyIconButtonService, },
];
LyIconButton.propDecorators = {
    "ripple": [{ type: ViewChild, args: [LyRipple,] },],
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class LyIconButtonModule {
}
LyIconButtonModule.decorators = [
    { type: NgModule, args: [{
                imports: [CommonModule, LyRippleModule],
                exports: [LyIconButton],
                declarations: [LyIconButton],
            },] },
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * Generated bundle index. Do not edit.
 */

export { LyIconButtonModule, LyIconButton, LyIconButtonService as Éµa };
//# sourceMappingURL=alyle-ui-icon-button.js.map
