import { Injectable, Directive, Input, Renderer2, ElementRef, NgModule, defineInjectable, inject } from '@angular/core';
import { LyTheme } from '@alyle/ui';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class LyFlexService {
    /**
     * @param {?} theme
     */
    constructor(theme) {
        this.theme = theme;
        this.fxStyle = `box-sizing:border-box;display:flex;`;
    }
}
LyFlexService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] },
];
/** @nocollapse */
LyFlexService.ctorParameters = () => [
    { type: LyTheme, },
];
/** @nocollapse */ LyFlexService.ngInjectableDef = defineInjectable({ factory: function LyFlexService_Factory() { return new LyFlexService(inject(LyTheme)); }, token: LyFlexService, providedIn: "root" });

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class LyFlex {
    /**
     * @param {?} renderer
     * @param {?} elementRef
     * @param {?} fxService
     */
    constructor(renderer, elementRef, fxService) {
        this.renderer = renderer;
        this.elementRef = elementRef;
        this.fxService = fxService;
        this._display = 'flex';
    }
    /**
     * @param {?} val
     * @return {?}
     */
    set fxInline(val) {
        this._display = 'inline-flex';
    }
    /**
     * @param {?} val
     * @return {?}
     */
    set fxAlign(val) {
        const /** @type {?} */ justifyContent = val[0] || 'flex-start';
        const /** @type {?} */ alignItems = val[1] || 'stretch';
        const /** @type {?} */ alignContent = val[2];
        this._fxAlign = (`justify-content:${justifyContent};` +
            `align-items:${alignItems};` +
            `align-content:${alignContent || alignItems};`);
    }
    /**
     * @param {?} val
     * @return {?}
     */
    set fxDirection(val) {
        this._fxDirection = `flex-direction:${val || 'row'};`;
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        let /** @type {?} */ key = '';
        let /** @type {?} */ styles = ``;
        // tslint:disable-next-line:forin
        for (const /** @type {?} */ inputKey in changes) {
            key += inputKey + changes[inputKey].currentValue;
            styles += this[`_${inputKey}`] || '';
        }
        // const inputs = Object.keys(changes);
        // for (let index = 0; index < inputs.length; index++) {
        //   const inputKey = inputs[index];
        //   key += inputKey + changes[inputKey].currentValue;
        //   styles += this[`_${inputKey}`] || '';
        // }
        const /** @type {?} */ classname = this.fxService.theme.setStyle(key, () => (`display:${this._display};` +
            styles));
        this.fxService.theme.updateClassName(this.elementRef.nativeElement, this.renderer, classname, this._currentClassname);
    }
}
LyFlex.decorators = [
    { type: Directive, args: [{
                selector: '[fxDirection], [fxWrap], [fxAlign], [fxInline]'
            },] },
];
/** @nocollapse */
LyFlex.ctorParameters = () => [
    { type: Renderer2, },
    { type: ElementRef, },
    { type: LyFlexService, },
];
LyFlex.propDecorators = {
    "fxInline": [{ type: Input },],
    "fxAlign": [{ type: Input },],
    "fxDirection": [{ type: Input },],
    "fxWrap": [{ type: Input },],
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class LyFlexModule {
}
LyFlexModule.decorators = [
    { type: NgModule, args: [{
                imports: [],
                exports: [LyFlex],
                declarations: [LyFlex],
                providers: [],
            },] },
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * Generated bundle index. Do not edit.
 */

export { LyFlex, LyFlexModule, LyFlexService as Éµa };
//# sourceMappingURL=alyle-ui-flex.js.map
