import { Component, forwardRef, NgModule, Input, Output, ChangeDetectorRef, ContentChildren, Optional, HostBinding, EventEmitter, ChangeDetectionStrategy, NgZone, ViewChild, ElementRef } from '@angular/core';
import { LyRippleModule, LyRippleService, Ripple } from '@alyle/ui/ripple';
import { NG_VALUE_ACCESSOR, FormsModule } from '@angular/forms';
import { CommonModule } from '@angular/common';
import { LyTheme, LyCommonModule, IsBoolean } from '@alyle/ui';

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
    else
        for (var i = decorators.length - 1; i >= 0; i--)
            if (d = decorators[i])
                r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
        return Reflect.metadata(k, v);
};
var LY_RADIO_CONTROL_VALUE_ACCESSOR = {
    provide: NG_VALUE_ACCESSOR,
    useExisting: forwardRef(function () { return LyRadioGroup; }),
    multi: true
};
var idx = 0;
var LyRadioGroup = /** @class */ (function () {
    function LyRadioGroup(elementRef, theme, ngZone, cd) {
        this.elementRef = elementRef;
        this.theme = theme;
        this.ngZone = ngZone;
        this.cd = cd;
        this._value = null;
        this.name = "ly-radio-name-" + idx++;
        this._color = 'accent';
        this.value = null;
        this.radioColor = 'accent';
        this.changed = new Array();
        this.touched = new Array();
    }
    LyRadioGroup.prototype.touch = function () {
        this.touched.forEach(function (f) { return f(); });
    };
    LyRadioGroup.prototype.registerOnChange = function (fn) {
        this.changed.push(fn);
    };
    LyRadioGroup.prototype.registerOnTouched = function (fn) {
        this.touched.push(fn);
    };
    LyRadioGroup.prototype.writeValue = function (value) {
        this._value = value;
    };
    LyRadioGroup.prototype.ngAfterContentInit = function () {
    };
    LyRadioGroup.prototype.updatevalue = function (value) {
        this._value = value;
        this.changed.forEach(function (f) { return f(value); });
    };
    LyRadioGroup.prototype.markForCheck = function () {
        this.cd.markForCheck();
    };
    LyRadioGroup.prototype.ngAfterViewInit = function () {
        var _this = this;
        Promise.resolve(null).then(function () {
            var stateChecked = _this._radios.find(function (radio, index) { return radio.checked; });
            if (!stateChecked) {
                _this.updatevalue(null);
                _this.markForCheck();
            }
        });
    };
    return LyRadioGroup;
}());
LyRadioGroup.decorators = [
    { type: Component, args: [{
                selector: 'ly-radio-group',
                styles: ["\n    :host {\n      display: inline-flex;\n    }\n  "],
                template: "<ng-content></ng-content>",
                providers: [LY_RADIO_CONTROL_VALUE_ACCESSOR],
                changeDetection: ChangeDetectionStrategy.OnPush,
                preserveWhitespaces: false
            },] },
];
LyRadioGroup.ctorParameters = function () { return [
    { type: ElementRef, },
    { type: LyTheme, },
    { type: NgZone, },
    { type: ChangeDetectorRef, },
]; };
LyRadioGroup.propDecorators = {
    "value": [{ type: Input },],
    "radioColor": [{ type: Input },],
    "_radios": [{ type: ContentChildren, args: [forwardRef(function () { return LyRadio; }),] },],
};
var LyRadio = /** @class */ (function () {
    function LyRadio(radioGroup, _elementRef, theme, changeDetectorRef, ngZone, _rippleService) {
        this.radioGroup = radioGroup;
        this._elementRef = _elementRef;
        this.theme = theme;
        this.changeDetectorRef = changeDetectorRef;
        this.ngZone = ngZone;
        this._rippleService = _rippleService;
        this.id = "ly-radio-id-" + idx++;
        this.name = '';
        this._value = null;
        this._checked = false;
        this.onCheckedState = new EventEmitter();
    }
    Object.defineProperty(LyRadio.prototype, "inputId", {
        get: function () {
            return this.id + "-input";
        },
        enumerable: true,
        configurable: true
    });
    LyRadio.prototype._onInputChange = function (event) {
        this.radioGroup.updatevalue(this.value);
    };
    LyRadio.prototype.ngOnChanges = function (changes) {
        var _this = this;
        if (changes['checked']) {
            if (this.checked) {
                Promise.resolve(null).then(function () {
                    _this.radioGroup.updatevalue(_this.value);
                });
            }
        }
    };
    LyRadio.prototype.ngOnInit = function () {
        if (this.radioGroup) {
            this.name = this.radioGroup.name;
        }
        this._rippleContainer = new Ripple(this.ngZone, this._rippleService.stylesData, this._radioContainer.nativeElement, this._elementRef.nativeElement);
        this._rippleContainer.setConfig({
            centered: true,
            radius: 'containerSize'
        });
    };
    LyRadio.prototype._markForCheck = function () {
        this.changeDetectorRef.markForCheck();
    };
    LyRadio.prototype.ngOnDestroy = function () {
        this._rippleContainer.removeEvents();
    };
    return LyRadio;
}());
LyRadio.decorators = [
    { type: Component, args: [{
                selector: 'ly-radio',
                styles: [":host{display:inline-block}.ly-radio-input{pointer-events:none;opacity:0;background:0 0;position:absolute;width:0;height:0}.ly-radio-label{cursor:pointer;white-space:nowrap;position:relative;display:inline-block}.ly-radio-container{-webkit-box-sizing:border-box;box-sizing:border-box;display:inline-block;position:relative;vertical-align:middle;height:calc(1em * 3)}.ly-radio-container .ly-radio-icon-container{width:1.5em;height:1.5em}.ly-radio-input:checked~.ly-radio-container .ly-radio-inner-circle{-webkit-transform:scale(.6);transform:scale(.6)}.ly-radio-input:checked~.ly-radio-container .ly-radio-outer-circle{border:.1em solid currentColor;color:currentColor!important}.ly-radio-container .ly-radio-inner-circle,.ly-radio-container .ly-radio-outer-circle{-webkit-transition:all 275ms cubic-bezier(.4,0,.2,1) 0s;transition:all 275ms cubic-bezier(.4,0,.2,1) 0s;position:absolute;border-radius:100%;-webkit-box-sizing:border-box;box-sizing:border-box;width:1.25em;height:1.25em;top:0;left:0;right:0;bottom:0;margin:auto}.ly-radio-container .ly-radio-outer-circle{border:1px solid currentColor}.ly-radio-container .ly-radio-inner-circle{background:currentColor;-webkit-transform:scale(0);transform:scale(0)}.ly-radio-label-content{display:inline-block;padding:0 .5em}"],
                template: "\n  <label #_labelContainer [attr.for]=\"inputId\" class=\"ly-radio-label\">\n    <input\n      class=\"ly-radio-input\"\n      [class.ly-radio-checked]=\"checked\"\n      [id]=\"inputId\"\n      [checked]=\"checked\"\n      [name]=\"name\"\n      (change)=\"_onInputChange($event)\"\n      type=\"radio\"\n      >\n    <div #_radioContainer [color]=\"radioGroup.radioColor\" class=\"ly-radio-container\">\n      <div class=\"ly-radio-icon-container\">\n      <div class=\"ly-radio-outer-circle\" color=\"radio:radioOuterCircle\"></div>\n      <div class=\"ly-radio-inner-circle\"></div>\n      </div>\n    </div>\n    <div\n    class=\"ly-radio-label-content\">\n      <ng-content></ng-content>\n    </div>\n  </label>\n  ",
                changeDetection: ChangeDetectionStrategy.OnPush,
                preserveWhitespaces: false
            },] },
];
LyRadio.ctorParameters = function () { return [
    { type: LyRadioGroup, decorators: [{ type: Optional },] },
    { type: ElementRef, },
    { type: LyTheme, },
    { type: ChangeDetectorRef, },
    { type: NgZone, },
    { type: LyRippleService, },
]; };
LyRadio.propDecorators = {
    "_radioContainer": [{ type: ViewChild, args: ['_radioContainer',] },],
    "_labelContainer": [{ type: ViewChild, args: ['_labelContainer',] },],
    "onCheckedState": [{ type: Output },],
    "checked": [{ type: HostBinding, args: ['class.ly-radio-checked',] }, { type: Input },],
    "value": [{ type: Input },],
};
__decorate([
    IsBoolean(),
    __metadata("design:type", Boolean)
], LyRadio.prototype, "checked", void 0);
var LyRadioModule = /** @class */ (function () {
    function LyRadioModule() {
    }
    return LyRadioModule;
}());
LyRadioModule.decorators = [
    { type: NgModule, args: [{
                imports: [CommonModule, FormsModule, LyRippleModule, LyCommonModule],
                exports: [LyRadioGroup, LyRadio],
                declarations: [LyRadioGroup, LyRadio],
            },] },
];

export { LY_RADIO_CONTROL_VALUE_ACCESSOR, LyRadioGroup, LyRadio, LyRadioModule };
//# sourceMappingURL=alyle-ui-radio.js.map
