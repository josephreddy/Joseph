import { ChangeDetectorRef, OnChanges, AfterContentInit, AfterViewInit, OnInit, OnDestroy, QueryList, EventEmitter, SimpleChanges, NgZone, ElementRef } from '@angular/core';
import { LyRippleService } from '@alyle/ui/ripple';
import { ControlValueAccessor } from '@angular/forms';
import { LyTheme } from '@alyle/ui';
export declare const LY_RADIO_CONTROL_VALUE_ACCESSOR: any;
export declare class LyRadioGroup implements AfterContentInit, AfterViewInit, ControlValueAccessor {
    private elementRef;
    theme: LyTheme;
    ngZone: NgZone;
    private cd;
    _value: any;
    name: string;
    _color: string;
    value: any;
    radioColor: string;
    _radios: QueryList<LyRadio>;
    private changed;
    private touched;
    touch(): void;
    registerOnChange(fn: (value: any) => void): void;
    registerOnTouched(fn: () => void): void;
    constructor(elementRef: ElementRef, theme: LyTheme, ngZone: NgZone, cd: ChangeDetectorRef);
    writeValue(value: any): void;
    ngAfterContentInit(): void;
    updatevalue(value: any): void;
    markForCheck(): void;
    ngAfterViewInit(): void;
}
export declare class LyRadio implements OnInit, OnChanges, OnDestroy {
    radioGroup: LyRadioGroup;
    private _elementRef;
    theme: LyTheme;
    private changeDetectorRef;
    private ngZone;
    private _rippleService;
    id: string;
    name: string;
    _value: any;
    private _rippleContainer;
    private _checked;
    private _radioContainer;
    _labelContainer: ElementRef;
    onCheckedState: EventEmitter<boolean>;
    checked: boolean;
    readonly inputId: string;
    value: any;
    _onInputChange(event: any): void;
    ngOnChanges(changes: SimpleChanges): void;
    ngOnInit(): void;
    _markForCheck(): void;
    ngOnDestroy(): void;
    constructor(radioGroup: LyRadioGroup, _elementRef: ElementRef, theme: LyTheme, changeDetectorRef: ChangeDetectorRef, ngZone: NgZone, _rippleService: LyRippleService);
}
export declare class LyRadioModule {
}
