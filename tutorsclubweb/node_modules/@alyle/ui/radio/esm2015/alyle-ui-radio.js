import { Component, forwardRef, NgModule, Input, Output, ChangeDetectorRef, ContentChildren, Optional, HostBinding, EventEmitter, ChangeDetectionStrategy, NgZone, ViewChild, ElementRef } from '@angular/core';
import { LyRippleModule, LyRippleService, Ripple } from '@alyle/ui/ripple';
import { NG_VALUE_ACCESSOR, FormsModule } from '@angular/forms';
import { CommonModule } from '@angular/common';
import { LyTheme, LyCommonModule, IsBoolean } from '@alyle/ui';

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
const LY_RADIO_CONTROL_VALUE_ACCESSOR = {
    provide: NG_VALUE_ACCESSOR,
    useExisting: forwardRef(() => LyRadioGroup),
    multi: true
};
let idx = 0;
class LyRadioGroup {
    /**
     * @param {?} elementRef
     * @param {?} theme
     * @param {?} ngZone
     * @param {?} cd
     */
    constructor(elementRef, theme, ngZone, cd) {
        this.elementRef = elementRef;
        this.theme = theme;
        this.ngZone = ngZone;
        this.cd = cd;
        this._value = null;
        this.name = `ly-radio-name-${idx++}`;
        this._color = 'accent';
        this.value = null;
        this.radioColor = 'accent';
        this.changed = new Array();
        this.touched = new Array();
    }
    /**
     * @return {?}
     */
    touch() {
        this.touched.forEach(f => f());
    }
    /**
     * @param {?} fn
     * @return {?}
     */
    registerOnChange(fn) {
        this.changed.push(fn);
    }
    /**
     * @param {?} fn
     * @return {?}
     */
    registerOnTouched(fn) {
        this.touched.push(fn);
    }
    /**
     * @param {?} value
     * @return {?}
     */
    writeValue(value) {
        this._value = value;
    }
    /**
     * @return {?}
     */
    ngAfterContentInit() {
    }
    /**
     * @param {?} value
     * @return {?}
     */
    updatevalue(value) {
        this._value = value;
        this.changed.forEach(f => f(value));
    }
    /**
     * @return {?}
     */
    markForCheck() {
        this.cd.markForCheck();
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        /**set value null if all checked === false */
        Promise.resolve(null).then(() => {
            const /** @type {?} */ stateChecked = this._radios.find((radio, index) => radio.checked);
            if (!stateChecked) {
                this.updatevalue(null);
                this.markForCheck();
            }
        });
    }
}
LyRadioGroup.decorators = [
    { type: Component, args: [{
                selector: 'ly-radio-group',
                styles: [`
    :host {
      display: inline-flex;
    }
  `],
                template: `<ng-content></ng-content>`,
                providers: [LY_RADIO_CONTROL_VALUE_ACCESSOR],
                changeDetection: ChangeDetectionStrategy.OnPush,
                preserveWhitespaces: false
            },] },
];
/** @nocollapse */
LyRadioGroup.ctorParameters = () => [
    { type: ElementRef, },
    { type: LyTheme, },
    { type: NgZone, },
    { type: ChangeDetectorRef, },
];
LyRadioGroup.propDecorators = {
    "value": [{ type: Input },],
    "radioColor": [{ type: Input },],
    "_radios": [{ type: ContentChildren, args: [forwardRef(() => LyRadio),] },],
};
class LyRadio {
    /**
     * @param {?} radioGroup
     * @param {?} _elementRef
     * @param {?} theme
     * @param {?} changeDetectorRef
     * @param {?} ngZone
     * @param {?} _rippleService
     */
    constructor(radioGroup, _elementRef, theme, changeDetectorRef, ngZone, _rippleService) {
        this.radioGroup = radioGroup;
        this._elementRef = _elementRef;
        this.theme = theme;
        this.changeDetectorRef = changeDetectorRef;
        this.ngZone = ngZone;
        this._rippleService = _rippleService;
        this.id = `ly-radio-id-${idx++}`;
        this.name = '';
        this._value = null;
        this._checked = false;
        this.onCheckedState = new EventEmitter();
    }
    /**
     * @return {?}
     */
    get inputId() {
        return `${this.id}-input`;
    }
    /**
     * @param {?} event
     * @return {?}
     */
    _onInputChange(event) {
        this.radioGroup.updatevalue(this.value);
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        if (changes['checked']) {
            if (this.checked) {
                Promise.resolve(null).then(() => {
                    this.radioGroup.updatevalue(this.value);
                });
            }
        }
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        if (this.radioGroup) {
            // Copy name from parent radio group
            this.name = this.radioGroup.name;
        }
        this._rippleContainer = new Ripple(this.ngZone, this._rippleService.stylesData, this._radioContainer.nativeElement, this._elementRef.nativeElement);
        this._rippleContainer.setConfig({
            centered: true,
            radius: 'containerSize'
        });
    }
    /**
     * @return {?}
     */
    _markForCheck() {
        this.changeDetectorRef.markForCheck();
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this._rippleContainer.removeEvents();
    }
}
LyRadio.decorators = [
    { type: Component, args: [{
                selector: 'ly-radio',
                styles: [`:host{display:inline-block}.ly-radio-input{pointer-events:none;opacity:0;background:0 0;position:absolute;width:0;height:0}.ly-radio-label{cursor:pointer;white-space:nowrap;position:relative;display:inline-block}.ly-radio-container{-webkit-box-sizing:border-box;box-sizing:border-box;display:inline-block;position:relative;vertical-align:middle;height:calc(1em * 3)}.ly-radio-container .ly-radio-icon-container{width:1.5em;height:1.5em}.ly-radio-input:checked~.ly-radio-container .ly-radio-inner-circle{-webkit-transform:scale(.6);transform:scale(.6)}.ly-radio-input:checked~.ly-radio-container .ly-radio-outer-circle{border:.1em solid currentColor;color:currentColor!important}.ly-radio-container .ly-radio-inner-circle,.ly-radio-container .ly-radio-outer-circle{-webkit-transition:all 275ms cubic-bezier(.4,0,.2,1) 0s;transition:all 275ms cubic-bezier(.4,0,.2,1) 0s;position:absolute;border-radius:100%;-webkit-box-sizing:border-box;box-sizing:border-box;width:1.25em;height:1.25em;top:0;left:0;right:0;bottom:0;margin:auto}.ly-radio-container .ly-radio-outer-circle{border:1px solid currentColor}.ly-radio-container .ly-radio-inner-circle{background:currentColor;-webkit-transform:scale(0);transform:scale(0)}.ly-radio-label-content{display:inline-block;padding:0 .5em}`],
                template: `
  <label #_labelContainer [attr.for]="inputId" class="ly-radio-label">
    <input
      class="ly-radio-input"
      [class.ly-radio-checked]="checked"
      [id]="inputId"
      [checked]="checked"
      [name]="name"
      (change)="_onInputChange($event)"
      type="radio"
      >
    <div #_radioContainer [color]="radioGroup.radioColor" class="ly-radio-container">
      <div class="ly-radio-icon-container">
      <div class="ly-radio-outer-circle" color="radio:radioOuterCircle"></div>
      <div class="ly-radio-inner-circle"></div>
      </div>
    </div>
    <div
    class="ly-radio-label-content">
      <ng-content></ng-content>
    </div>
  </label>
  `,
                changeDetection: ChangeDetectionStrategy.OnPush,
                preserveWhitespaces: false
            },] },
];
/** @nocollapse */
LyRadio.ctorParameters = () => [
    { type: LyRadioGroup, decorators: [{ type: Optional },] },
    { type: ElementRef, },
    { type: LyTheme, },
    { type: ChangeDetectorRef, },
    { type: NgZone, },
    { type: LyRippleService, },
];
LyRadio.propDecorators = {
    "_radioContainer": [{ type: ViewChild, args: ['_radioContainer',] },],
    "_labelContainer": [{ type: ViewChild, args: ['_labelContainer',] },],
    "onCheckedState": [{ type: Output },],
    "checked": [{ type: HostBinding, args: ['class.ly-radio-checked',] }, { type: Input },],
    "value": [{ type: Input },],
};
__decorate([
    IsBoolean(),
    __metadata("design:type", Boolean)
], LyRadio.prototype, "checked", void 0);
class LyRadioModule {
}
LyRadioModule.decorators = [
    { type: NgModule, args: [{
                imports: [CommonModule, FormsModule, LyRippleModule, LyCommonModule],
                exports: [LyRadioGroup, LyRadio],
                declarations: [LyRadioGroup, LyRadio],
            },] },
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * Generated bundle index. Do not edit.
 */

export { LY_RADIO_CONTROL_VALUE_ACCESSOR, LyRadioGroup, LyRadio, LyRadioModule };
//# sourceMappingURL=alyle-ui-radio.js.map
