import { Platform } from '@alyle/ui';
import { Injectable, NgZone, Inject, PLATFORM_ID, Directive, Input, TemplateRef, ViewContainerRef, NgModule, SkipSelf, Optional } from '@angular/core';
import { fromEvent, merge, of } from 'rxjs';
import { map, filter } from 'rxjs/operators';
import { isPlatformBrowser, isPlatformServer } from '@angular/common';

var Responsive = /** @class */ (function () {
    function Responsive(_ngZone, platformId) {
        this._ngZone = _ngZone;
        this.platformId = platformId;
    }
    Responsive.prototype.matchMedia = function (val) {
        return !Platform.isBrowser ? false : matchMedia(val).matches;
    };
    Responsive.prototype.observe = function (value) {
        var _this = this;
        var mm = this.matchMedia(value);
        var mediaObservable = merge(of(true), this.stateView());
        return mediaObservable
            .pipe(filter(function (state) {
            return _this.matchMedia(value) !== mm || state === true;
        }, map(function () {
            mm = _this.matchMedia(value);
            _this._registerMedia(value);
            return _this.matchMedia(value);
        })));
    };
    Responsive.prototype._registerMedia = function (value) {
        Responsive._queryMap.set(value, this.matchMedia(value));
    };
    Responsive.prototype.stateView = function () {
        if (isPlatformBrowser(this.platformId)) {
            return this._ngZone.runOutsideAngular(function () {
                return fromEvent(window, 'resize');
            });
        }
        if (isPlatformServer(this.platformId)) {
            return of();
        }
    };
    return Responsive;
}());
Responsive._queryMap = new Map();
Responsive.decorators = [
    { type: Injectable },
];
Responsive.ctorParameters = function () { return [
    { type: NgZone, },
    { type: Object, decorators: [{ type: Inject, args: [PLATFORM_ID,] },] },
]; };
var MediaDirective = /** @class */ (function () {
    function MediaDirective(_viewContainer, templateRef, mediaService, platformId) {
        this._viewContainer = _viewContainer;
        this.mediaService = mediaService;
        this.platformId = platformId;
        this._TemplateRef = null;
        this._TemplateRef = templateRef;
    }
    Object.defineProperty(MediaDirective.prototype, "lyResponsive", {
        set: function (val) {
            this._media = val;
            this.updateView();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MediaDirective.prototype, "media", {
        get: function () {
            return this._media;
        },
        enumerable: true,
        configurable: true
    });
    MediaDirective.prototype.ngOnInit = function () {
        var _this = this;
        this.view = this.mediaService.stateView().subscribe(function () {
            _this.updateView();
        });
    };
    MediaDirective.prototype.updateView = function () {
        if (isPlatformServer(this.platformId) || this.mediaService.matchMedia(this._media)) {
            if (this._viewContainer.length === 0) {
                this._viewContainer.createEmbeddedView(this._TemplateRef);
            }
        }
        else if (this._viewContainer.length !== 0) {
            this._viewContainer.clear();
        }
    };
    MediaDirective.prototype.ngOnDestroy = function () {
        if (this.view) {
            this.view.unsubscribe();
        }
    };
    return MediaDirective;
}());
MediaDirective.decorators = [
    { type: Directive, args: [{
                selector: '[lyResponsive]'
            },] },
];
MediaDirective.ctorParameters = function () { return [
    { type: ViewContainerRef, },
    { type: TemplateRef, },
    { type: Responsive, },
    { type: Object, decorators: [{ type: Inject, args: [PLATFORM_ID,] },] },
]; };
MediaDirective.propDecorators = {
    "lyResponsive": [{ type: Input },],
};
function responsiveProviderFactory(parent, ngZone, platformId) {
    return parent || new Responsive(ngZone, platformId);
}
var responsiveProvider = {
    provide: Responsive,
    deps: [[new Optional(), new SkipSelf(), Responsive], NgZone, PLATFORM_ID],
    useFactory: responsiveProviderFactory
};
var ResponsiveModule = /** @class */ (function () {
    function ResponsiveModule() {
    }
    return ResponsiveModule;
}());
ResponsiveModule.decorators = [
    { type: NgModule, args: [{
                declarations: [MediaDirective],
                exports: [MediaDirective],
                providers: [responsiveProvider]
            },] },
];

export { Responsive, MediaDirective, responsiveProviderFactory, responsiveProvider, ResponsiveModule };
//# sourceMappingURL=alyle-ui-responsive.js.map
