import { Platform } from '@alyle/ui';
import { Injectable, NgZone, Inject, PLATFORM_ID, Directive, Input, TemplateRef, ViewContainerRef, NgModule, SkipSelf, Optional } from '@angular/core';
import { fromEvent, merge, of } from 'rxjs';
import { map, filter } from 'rxjs/operators';
import { isPlatformBrowser, isPlatformServer } from '@angular/common';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class Responsive {
    /**
     * @param {?} _ngZone
     * @param {?} platformId
     */
    constructor(_ngZone, platformId) {
        this._ngZone = _ngZone;
        this.platformId = platformId;
    }
    /**
     * @param {?} val
     * @return {?}
     */
    matchMedia(val) {
        return !Platform.isBrowser ? false : matchMedia(val).matches;
    }
    /**
     * return Observable<boolean>
     * @param {?} value
     * @return {?}
     */
    observe(value) {
        let /** @type {?} */ mm = this.matchMedia(value);
        const /** @type {?} */ mediaObservable = merge(of(true), this.stateView());
        return mediaObservable
            .pipe(filter((state) => {
            return this.matchMedia(value) !== mm || state === true;
        }, map(() => {
            mm = this.matchMedia(value);
            this._registerMedia(value);
            return this.matchMedia(value);
        })));
    }
    /**
     * @param {?} value
     * @return {?}
     */
    _registerMedia(value) {
        Responsive._queryMap.set(value, this.matchMedia(value));
    }
    /**
     * @return {?}
     */
    stateView() {
        if (isPlatformBrowser(this.platformId)) {
            return this._ngZone.runOutsideAngular(() => {
                return fromEvent(window, 'resize');
            });
        }
        if (isPlatformServer(this.platformId)) {
            return of();
        }
    }
}
Responsive._queryMap = new Map();
Responsive.decorators = [
    { type: Injectable },
];
/** @nocollapse */
Responsive.ctorParameters = () => [
    { type: NgZone, },
    { type: Object, decorators: [{ type: Inject, args: [PLATFORM_ID,] },] },
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class MediaDirective {
    /**
     * @param {?} _viewContainer
     * @param {?} templateRef
     * @param {?} mediaService
     * @param {?} platformId
     */
    constructor(_viewContainer, templateRef, mediaService, platformId) {
        this._viewContainer = _viewContainer;
        this.mediaService = mediaService;
        this.platformId = platformId;
        this._TemplateRef = null;
        this._TemplateRef = templateRef;
    }
    /**
     * @param {?} val
     * @return {?}
     */
    set lyResponsive(val) {
        this._media = val;
        this.updateView();
    }
    /**
     * @return {?}
     */
    get media() {
        return this._media;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.view = this.mediaService.stateView().subscribe(() => {
            this.updateView();
        });
    }
    /**
     * @return {?}
     */
    updateView() {
        if (isPlatformServer(this.platformId) || this.mediaService.matchMedia(this._media)) {
            if (this._viewContainer.length === 0) {
                this._viewContainer.createEmbeddedView(this._TemplateRef);
            }
        }
        else if (this._viewContainer.length !== 0) {
            this._viewContainer.clear();
        }
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        if (this.view) {
            this.view.unsubscribe();
        }
    }
}
MediaDirective.decorators = [
    { type: Directive, args: [{
                selector: '[lyResponsive]'
            },] },
];
/** @nocollapse */
MediaDirective.ctorParameters = () => [
    { type: ViewContainerRef, },
    { type: TemplateRef, },
    { type: Responsive, },
    { type: Object, decorators: [{ type: Inject, args: [PLATFORM_ID,] },] },
];
MediaDirective.propDecorators = {
    "lyResponsive": [{ type: Input },],
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * @param {?} parent
 * @param {?} ngZone
 * @param {?} platformId
 * @return {?}
 */
function responsiveProviderFactory(parent, ngZone, platformId) {
    return parent || new Responsive(ngZone, platformId);
}
const responsiveProvider = {
    provide: Responsive,
    deps: [[new Optional(), new SkipSelf(), Responsive], NgZone, PLATFORM_ID],
    useFactory: responsiveProviderFactory
};
class ResponsiveModule {
}
ResponsiveModule.decorators = [
    { type: NgModule, args: [{
                declarations: [MediaDirective],
                exports: [MediaDirective],
                providers: [responsiveProvider]
            },] },
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * Generated bundle index. Do not edit.
 */

export { Responsive, MediaDirective, responsiveProviderFactory, responsiveProvider, ResponsiveModule };
//# sourceMappingURL=alyle-ui-responsive.js.map
