(function (global, factory) {
	typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@alyle/ui'), require('@angular/core'), require('rxjs'), require('rxjs/operators'), require('@angular/common')) :
	typeof define === 'function' && define.amd ? define('ly.responsive', ['exports', '@alyle/ui', '@angular/core', 'rxjs', 'rxjs/operators', '@angular/common'], factory) :
	(factory((global.ly = global.ly || {}, global.ly.responsive = {}),global.ly.core,global.ng.core,global.rxjs,global.rxjs.operators,global.ng.common));
}(this, (function (exports,ui,core,rxjs,operators,common) { 'use strict';

var Responsive = /** @class */ (function () {
    function Responsive(_ngZone, platformId) {
        this._ngZone = _ngZone;
        this.platformId = platformId;
    }
    Responsive.prototype.matchMedia = function (val) {
        return !ui.Platform.isBrowser ? false : matchMedia(val).matches;
    };
    Responsive.prototype.observe = function (value) {
        var _this = this;
        var mm = this.matchMedia(value);
        var mediaObservable = rxjs.merge(rxjs.of(true), this.stateView());
        return mediaObservable
            .pipe(operators.filter(function (state) {
            return _this.matchMedia(value) !== mm || state === true;
        }, operators.map(function () {
            mm = _this.matchMedia(value);
            _this._registerMedia(value);
            return _this.matchMedia(value);
        })));
    };
    Responsive.prototype._registerMedia = function (value) {
        Responsive._queryMap.set(value, this.matchMedia(value));
    };
    Responsive.prototype.stateView = function () {
        if (common.isPlatformBrowser(this.platformId)) {
            return this._ngZone.runOutsideAngular(function () {
                return rxjs.fromEvent(window, 'resize');
            });
        }
        if (common.isPlatformServer(this.platformId)) {
            return rxjs.of();
        }
    };
    return Responsive;
}());
Responsive._queryMap = new Map();
Responsive.decorators = [
    { type: core.Injectable },
];
Responsive.ctorParameters = function () { return [
    { type: core.NgZone, },
    { type: Object, decorators: [{ type: core.Inject, args: [core.PLATFORM_ID,] },] },
]; };
var MediaDirective = /** @class */ (function () {
    function MediaDirective(_viewContainer, templateRef, mediaService, platformId) {
        this._viewContainer = _viewContainer;
        this.mediaService = mediaService;
        this.platformId = platformId;
        this._TemplateRef = null;
        this._TemplateRef = templateRef;
    }
    Object.defineProperty(MediaDirective.prototype, "lyResponsive", {
        set: function (val) {
            this._media = val;
            this.updateView();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MediaDirective.prototype, "media", {
        get: function () {
            return this._media;
        },
        enumerable: true,
        configurable: true
    });
    MediaDirective.prototype.ngOnInit = function () {
        var _this = this;
        this.view = this.mediaService.stateView().subscribe(function () {
            _this.updateView();
        });
    };
    MediaDirective.prototype.updateView = function () {
        if (common.isPlatformServer(this.platformId) || this.mediaService.matchMedia(this._media)) {
            if (this._viewContainer.length === 0) {
                this._viewContainer.createEmbeddedView(this._TemplateRef);
            }
        }
        else if (this._viewContainer.length !== 0) {
            this._viewContainer.clear();
        }
    };
    MediaDirective.prototype.ngOnDestroy = function () {
        if (this.view) {
            this.view.unsubscribe();
        }
    };
    return MediaDirective;
}());
MediaDirective.decorators = [
    { type: core.Directive, args: [{
                selector: '[lyResponsive]'
            },] },
];
MediaDirective.ctorParameters = function () { return [
    { type: core.ViewContainerRef, },
    { type: core.TemplateRef, },
    { type: Responsive, },
    { type: Object, decorators: [{ type: core.Inject, args: [core.PLATFORM_ID,] },] },
]; };
MediaDirective.propDecorators = {
    "lyResponsive": [{ type: core.Input },],
};
function responsiveProviderFactory(parent, ngZone, platformId) {
    return parent || new Responsive(ngZone, platformId);
}
var responsiveProvider = {
    provide: Responsive,
    deps: [[new core.Optional(), new core.SkipSelf(), Responsive], core.NgZone, core.PLATFORM_ID],
    useFactory: responsiveProviderFactory
};
var ResponsiveModule = /** @class */ (function () {
    function ResponsiveModule() {
    }
    return ResponsiveModule;
}());
ResponsiveModule.decorators = [
    { type: core.NgModule, args: [{
                declarations: [MediaDirective],
                exports: [MediaDirective],
                providers: [responsiveProvider]
            },] },
];

exports.Responsive = Responsive;
exports.MediaDirective = MediaDirective;
exports.responsiveProviderFactory = responsiveProviderFactory;
exports.responsiveProvider = responsiveProvider;
exports.ResponsiveModule = ResponsiveModule;

Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=alyle-ui-responsive.umd.js.map
