(function (global, factory) {
	typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@angular/common/http'), require('@angular/common'), require('rxjs/operators'), require('@alyle/ui')) :
	typeof define === 'function' && define.amd ? define('ly.icon', ['exports', '@angular/core', '@angular/common/http', '@angular/common', 'rxjs/operators', '@alyle/ui'], factory) :
	(factory((global.ly = global.ly || {}, global.ly.icon = {}),global.ng.core,global.ng.common.http,global.ng.common,global.rxjs.operators,global.ly.core));
}(this, (function (exports,core,http,common,operators,ui) { 'use strict';

var LyIconService = /** @class */ (function () {
    function LyIconService(http$$1, document) {
        this.http = http$$1;
        this.document = document;
        this.svgMap = new Map();
    }
    LyIconService.prototype.setSvg = function (key, url) {
        var _this = this;
        if (!this.svgMap.has(key)) {
            url = url + ".svg";
            this.svgMap.set(key, {
                obs: this.http.get(url, { responseType: 'text' })
                    .pipe(operators.share(), operators.map(function (svgText) { return _this.textToSvg(svgText); }))
            });
        }
    };
    LyIconService.prototype.textToSvg = function (str) {
        var div = this.document.createElement('DIV');
        div.innerHTML = str;
        var svg = (div.querySelector('svg'));
        return svg;
    };
    LyIconService.prototype.getSvg = function (key) {
        return this.svgMap.get(key);
    };
    return LyIconService;
}());
LyIconService.decorators = [
    { type: core.Injectable, args: [{
                providedIn: 'root'
            },] },
];
LyIconService.ctorParameters = function () { return [
    { type: http.HttpClient, },
    { type: undefined, decorators: [{ type: core.Optional }, { type: core.Inject, args: [common.DOCUMENT,] },] },
]; };
LyIconService.ngInjectableDef = core.defineInjectable({ factory: function LyIconService_Factory() { return new LyIconService(core.inject(http.HttpClient), core.inject(common.DOCUMENT, 8)); }, token: LyIconService, providedIn: "root" });
var LyIconStyle = /** @class */ (function () {
    function LyIconStyle(theme) {
        var _this = this;
        this.theme = theme;
        this.classes = {
            root: this.theme.setStyle('root', function () { return ("font-size:" + _this.theme.palette["icon"].fontSize + ";" +
                "width:1em;" +
                "height:1em;" +
                "display:inline-flex;"); }),
            svg: this.theme.setRootStyle('_svg', function () { return ("width:inherit;" +
                "height:inherit;" +
                "fill:currentColor;"); })
        };
    }
    return LyIconStyle;
}());
LyIconStyle.decorators = [
    { type: core.Injectable, args: [ui.ProvidedInTheme,] },
];
LyIconStyle.ctorParameters = function () { return [
    { type: ui.LyTheme, },
]; };
LyIconStyle.ngInjectableDef = core.defineInjectable({ factory: function LyIconStyle_Factory() { return new LyIconStyle(core.inject(ui.LyTheme)); }, token: LyIconStyle, providedIn: ui.AlyleUIModule });
var Icon = /** @class */ (function () {
    function Icon(iconService, elementRef, renderer, iconStyle) {
        this.iconService = iconService;
        this.elementRef = elementRef;
        this.renderer = renderer;
        this.iconStyle = iconStyle;
        this._defaultClass = 'material-icons';
        renderer.addClass(elementRef.nativeElement, this.iconStyle.classes.root);
    }
    Object.defineProperty(Icon.prototype, "src", {
        get: function () {
            return this._src;
        },
        set: function (val) {
            this._src = val;
            if (ui.Platform.isBrowser) {
                if (val) {
                    var key = "_url:" + val;
                    this.iconService.setSvg(key, val);
                    this._prepareSvgIcon(this.iconService.getSvg(key));
                }
            }
            else {
                this._appendDefaultSvgIcon();
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Icon.prototype, "icon", {
        get: function () {
            return this._icon;
        },
        set: function (val) {
            this._icon = val;
            if (ui.Platform.isBrowser) {
                this._prepareSvgIcon(this.iconService.getSvg(val));
            }
            else {
                this._appendDefaultSvgIcon();
            }
        },
        enumerable: true,
        configurable: true
    });
    Icon.prototype._isDefault = function () {
        return !(this.src || this.icon);
    };
    Icon.prototype._prepareSvgIcon = function (svgIcon) {
        var _this = this;
        svgIcon.obs
            .pipe(operators.take(1))
            .subscribe(function (svgElement) {
            _this._cleanIcon();
            _this._appendChild(svgElement);
        });
    };
    Icon.prototype._appendChild = function (svg) {
        svg.classList.add(this.iconStyle.classes.svg);
        this.renderer.appendChild(this.elementRef.nativeElement, svg);
    };
    Icon.prototype._appendDefaultSvgIcon = function () {
        this._appendChild(this.iconService.textToSvg('<svg viewBox="0 0 20 20"><circle cx="10" cy="10" r="10"></circle></svg>'));
    };
    Icon.prototype._updateClass = function () {
        if (this._isDefault()) {
            this.renderer.addClass(this.elementRef.nativeElement, this._defaultClass);
        }
    };
    Icon.prototype.ngOnInit = function () { this._updateClass(); };
    Icon.prototype.ngOnChanges = function (changes) {
        this._updateClass();
    };
    Icon.prototype._cleanIcon = function () {
        var icon = this.elementRef.nativeElement.querySelector('svg');
        if (icon) {
            this.renderer.removeChild(this.elementRef, icon);
        }
    };
    return Icon;
}());
Icon.decorators = [
    { type: core.Directive, args: [{
                selector: 'ly-icon'
            },] },
];
Icon.ctorParameters = function () { return [
    { type: LyIconService, },
    { type: core.ElementRef, },
    { type: core.Renderer2, },
    { type: LyIconStyle, },
]; };
Icon.propDecorators = {
    "src": [{ type: core.Input },],
    "icon": [{ type: core.Input },],
};
var LyIconModule = /** @class */ (function () {
    function LyIconModule() {
    }
    return LyIconModule;
}());
LyIconModule.decorators = [
    { type: core.NgModule, args: [{
                imports: [
                    common.CommonModule
                ],
                declarations: [Icon],
                exports: [Icon]
            },] },
];

exports.LyIconModule = LyIconModule;
exports.LyIconService = LyIconService;
exports.LyIconStyle = LyIconStyle;
exports.Icon = Icon;

Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=alyle-ui-icon.umd.js.map
