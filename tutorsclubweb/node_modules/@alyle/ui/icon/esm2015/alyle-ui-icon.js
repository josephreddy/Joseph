import { Injectable, Optional, Inject, NgModule, Directive, Input, Renderer2, ElementRef, defineInjectable, inject } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { DOCUMENT, CommonModule } from '@angular/common';
import { map, share, take } from 'rxjs/operators';
import { LyTheme, ProvidedInTheme, Platform, AlyleUIModule } from '@alyle/ui';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * @record
 */

class LyIconService {
    /**
     * @param {?} http
     * @param {?} document
     */
    constructor(http, document) {
        this.http = http;
        this.document = document;
        this.svgMap = new Map();
    }
    /**
     * @param {?} key
     * @param {?} url
     * @return {?}
     */
    setSvg(key, url) {
        if (!this.svgMap.has(key)) {
            url = `${url}.svg`;
            this.svgMap.set(key, {
                obs: this.http.get(url, { responseType: 'text' })
                    .pipe(share(), map(svgText => this.textToSvg(svgText)))
            });
        }
    }
    /**
     * @param {?} str
     * @return {?}
     */
    textToSvg(str) {
        const /** @type {?} */ div = this.document.createElement('DIV');
        div.innerHTML = str;
        const /** @type {?} */ svg = /** @type {?} */ (div.querySelector('svg'));
        return svg;
    }
    /**
     * @param {?} key
     * @return {?}
     */
    getSvg(key) {
        return this.svgMap.get(key);
    }
}
LyIconService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] },
];
/** @nocollapse */
LyIconService.ctorParameters = () => [
    { type: HttpClient, },
    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [DOCUMENT,] },] },
];
/** @nocollapse */ LyIconService.ngInjectableDef = defineInjectable({ factory: function LyIconService_Factory() { return new LyIconService(inject(HttpClient), inject(DOCUMENT, 8)); }, token: LyIconService, providedIn: "root" });
class LyIconStyle {
    /**
     * @param {?} theme
     */
    constructor(theme) {
        this.theme = theme;
        this.classes = {
            root: this.theme.setStyle('root', () => (`font-size:${this.theme.palette["icon"].fontSize};` +
                `width:1em;` +
                `height:1em;` +
                `display:inline-flex;`)),
            svg: this.theme.setRootStyle('_svg', () => (`width:inherit;` +
                `height:inherit;` +
                `fill:currentColor;`))
        };
    }
}
LyIconStyle.decorators = [
    { type: Injectable, args: [ProvidedInTheme,] },
];
/** @nocollapse */
LyIconStyle.ctorParameters = () => [
    { type: LyTheme, },
];
/** @nocollapse */ LyIconStyle.ngInjectableDef = defineInjectable({ factory: function LyIconStyle_Factory() { return new LyIconStyle(inject(LyTheme)); }, token: LyIconStyle, providedIn: AlyleUIModule });

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class Icon {
    /**
     * @param {?} iconService
     * @param {?} elementRef
     * @param {?} renderer
     * @param {?} iconStyle
     */
    constructor(iconService, elementRef, renderer, iconStyle) {
        this.iconService = iconService;
        this.elementRef = elementRef;
        this.renderer = renderer;
        this.iconStyle = iconStyle;
        this._defaultClass = 'material-icons';
        renderer.addClass(elementRef.nativeElement, this.iconStyle.classes.root);
    }
    /**
     * @param {?} val
     * @return {?}
     */
    set src(val) {
        this._src = val;
        if (Platform.isBrowser) {
            if (val) {
                const /** @type {?} */ key = `_url:${val}`;
                this.iconService.setSvg(key, val);
                this._prepareSvgIcon(this.iconService.getSvg(key));
            }
        }
        else {
            this._appendDefaultSvgIcon();
        }
    }
    /**
     * @return {?}
     */
    get src() {
        return this._src;
    }
    /**
     * @param {?} val
     * @return {?}
     */
    set icon(val) {
        this._icon = val;
        if (Platform.isBrowser) {
            this._prepareSvgIcon(this.iconService.getSvg(val));
        }
        else {
            this._appendDefaultSvgIcon();
        }
    }
    /**
     * @return {?}
     */
    get icon() {
        return this._icon;
    }
    /**
     * @return {?}
     */
    _isDefault() {
        return !(this.src || this.icon);
    }
    /**
     * @param {?} svgIcon
     * @return {?}
     */
    _prepareSvgIcon(svgIcon) {
        svgIcon.obs
            .pipe(take(1))
            .subscribe((svgElement) => {
            this._cleanIcon();
            this._appendChild(svgElement);
        });
    }
    /**
     * @param {?} svg
     * @return {?}
     */
    _appendChild(svg) {
        svg.classList.add(this.iconStyle.classes.svg);
        this.renderer.appendChild(this.elementRef.nativeElement, svg);
    }
    /**
     * @return {?}
     */
    _appendDefaultSvgIcon() {
        this._appendChild(this.iconService.textToSvg('<svg viewBox="0 0 20 20"><circle cx="10" cy="10" r="10"></circle></svg>'));
    }
    /**
     * @return {?}
     */
    _updateClass() {
        if (this._isDefault()) {
            this.renderer.addClass(this.elementRef.nativeElement, this._defaultClass);
        }
    }
    /**
     * @return {?}
     */
    ngOnInit() { this._updateClass(); }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        this._updateClass();
    }
    /**
     * run only browser
     * remove current icon
     * @return {?}
     */
    _cleanIcon() {
        const /** @type {?} */ icon = this.elementRef.nativeElement.querySelector('svg');
        if (icon) {
            this.renderer.removeChild(this.elementRef, icon);
        }
    }
}
Icon.decorators = [
    { type: Directive, args: [{
                selector: 'ly-icon'
            },] },
];
/** @nocollapse */
Icon.ctorParameters = () => [
    { type: LyIconService, },
    { type: ElementRef, },
    { type: Renderer2, },
    { type: LyIconStyle, },
];
Icon.propDecorators = {
    "src": [{ type: Input },],
    "icon": [{ type: Input },],
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class LyIconModule {
}
LyIconModule.decorators = [
    { type: NgModule, args: [{
                imports: [
                    CommonModule
                ],
                declarations: [Icon],
                exports: [Icon]
            },] },
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * Generated bundle index. Do not edit.
 */

export { LyIconModule, LyIconService, LyIconStyle, Icon };
//# sourceMappingURL=alyle-ui-icon.js.map
