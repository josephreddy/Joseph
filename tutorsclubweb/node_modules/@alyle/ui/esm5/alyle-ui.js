import { __spread } from 'tslib';
import { InjectionToken, Injectable, Inject, RendererFactory2, NgModule, Directive, Input, Optional, Renderer2, ElementRef, ViewContainerRef, Output, EventEmitter, ComponentFactoryResolver, SkipSelf, ChangeDetectorRef, NgZone, defineInjectable, inject } from '@angular/core';
import { DOCUMENT, CommonModule } from '@angular/common';
import * as _chroma from 'chroma-js';
import { Subject } from 'rxjs';
import { debounceTime } from 'rxjs/operators';

function getContrastYIQ(hexcolor) {
    var r = parseInt(hexcolor.substr(0, 2), 16);
    var g = parseInt(hexcolor.substr(2, 2), 16);
    var b = parseInt(hexcolor.substr(4, 2), 16);
    var yiq = ((r * 299) + (g * 587) + (b * 114)) / 1000;
    return (yiq >= 128) ? 'black' : 'white';
}
var contrast = '#fff';
var defaultTheme = {
    name: 'default',
    primary: {
        default: '#2196F3',
        contrast: contrast
    },
    accent: {
        default: '#ff4b73',
        contrast: contrast
    },
    warn: {
        default: '#FF5252',
        contrast: contrast
    },
    scheme: 'light',
    typography: {
        fontFamily: "'Roboto', sans-serif",
        fontSize: 14
    },
    colorSchemes: {
        light: {
            background: {
                default: '#fafafa',
                primary: '#fff',
                secondary: '#fafafa',
                tertiary: '#f5f5f5',
                base: '#E0E0E0'
            },
            text: {
                default: 'rgba(0, 0, 0, 0.87)',
                primary: 'rgba(0, 0, 0, 0.87)',
                secondary: 'rgba(0, 0, 0, 0.54)',
                disabled: 'rgba(0, 0, 0, 0.38)',
                hint: 'rgba(0, 0, 0, 0.38)'
            },
            divider: 'rgba(0, 0, 0, 0.12)',
            colorShadow: '#777777',
            button: {
                disabled: 'rgba(0, 0, 0, 0.11)'
            },
            radio: {
                radioOuterCircle: 'rgba(0, 0, 0, 0.43)'
            },
            menu: {
                bg: '#fff'
            },
            drawer: {
                backdrop: 'rgba(0,0,0,.6)'
            },
            bar: '#f5f5f5',
            input: {
                label: 'rgba(0, 0, 0, 0.4)',
                underline: 'rgba(0, 0, 0, 0.11)'
            },
        },
        dark: {
            primary: {
                default: '#9c27b0',
                contrast: contrast
            },
            accent: {
                default: '#ffeb3b',
                contrast: 'rgba(0, 0, 0, 0.87)'
            },
            warn: {
                default: '#f44336',
                contrast: 'rgba(0, 0, 0, 0.87)'
            },
            background: {
                default: '#303030',
                primary: '#424242',
                secondary: '#303030',
                tertiary: '#212121',
                base: '#0E0E0E'
            },
            text: {
                default: '#fff',
                primary: '#fff',
                secondary: 'rgba(255, 255, 255, 0.70)',
                disabled: 'rgba(255, 255, 255, 0.50)',
                hint: 'rgba(255, 255, 255, 0.50)'
            },
            button: {
                disabled: 'rgba(255, 255, 255, 0.30)'
            },
            radio: {
                radioOuterCircle: 'rgba(255, 255, 255, 0.55)'
            },
            menu: {
                bg: '#424242'
            },
            drawer: {
                backdrop: 'rgba(49,49,49,.6)'
            },
            bar: '#212121',
            divider: 'rgba(255, 255, 255, 0.12)',
            colorShadow: 'rgba(0, 0, 0, 1)',
            input: {
                label: 'rgba(255, 255, 255, 0.4)',
                underline: 'rgba(255, 255, 255, 0.11)'
            }
        }
    },
    iconButton: {
        size: '48px'
    },
    icon: {
        fontSize: '24px'
    },
    input: {
        withColor: 'primary'
    }
};
var THEME_VARIABLES = new InjectionToken('ly.theme.variables');
var IS_CORE_THEME = new InjectionToken('ly.is.root');
var StyleMap = /** @class */ (function () {
    function StyleMap(themeName) {
        this.themeName = themeName;
    }
    return StyleMap;
}());
var ThemeVariables = /** @class */ (function () {
    function ThemeVariables() {
    }
    return ThemeVariables;
}());
var hasV8BreakIterator = (typeof (Intl) !== 'undefined' && ((Intl)).v8BreakIterator);
var Platform = /** @class */ (function () {
    function Platform() {
        this.EDGE = Platform.isBrowser && /(edge)/i.test(navigator.userAgent);
        this.TRIDENT = Platform.isBrowser && /(msie|trident)/i.test(navigator.userAgent);
        this.BLINK = Platform.isBrowser &&
            (!!(((window)).chrome || hasV8BreakIterator) && !!CSS && !this.EDGE && !this.TRIDENT);
        this.WEBKIT = Platform.isBrowser &&
            /AppleWebKit/i.test(navigator.userAgent) && !this.BLINK && !this.EDGE && !this.TRIDENT;
        this.IOS = Platform.isBrowser && /iPad|iPhone|iPod/.test(navigator.userAgent) && !((window)).MSStream;
        this.FIREFOX = Platform.isBrowser && /(firefox|minefield)/i.test(navigator.userAgent);
        this.ANDROID = Platform.isBrowser && /android/i.test(navigator.userAgent) && !this.TRIDENT;
        this.SAFARI = Platform.isBrowser && /safari/i.test(navigator.userAgent) && this.WEBKIT;
    }
    return Platform;
}());
Platform.isBrowser = typeof document === 'object' && !!document;
var LyRootService = /** @class */ (function () {
    function LyRootService(_document, rendererFactory) {
        this.rendererFactory = rendererFactory;
        this.themeRootMap = new Map();
        this.themeMap = new Map();
        this.themes = new Map();
        this.renderer = this.rendererFactory.createRenderer(null, null);
        var container;
        if (Platform.isBrowser && (container = window.document.querySelector('ly-core-theme'))) {
            this.rootContainer = container;
        }
        else {
            this.rootContainer = this.renderer.createElement('ly-core-theme');
            this.renderer.insertBefore(_document.body, this.rootContainer, _document.body.firstElementChild);
        }
    }
    LyRootService.prototype.registerTheme = function (palette) {
        if (!this.themeMap.has(palette.name)) {
            this.themeMap.set(palette.name, new Map());
            this.themes.set(palette.name, palette);
        }
        return {
            map: this.themeMap.get(palette.name),
            palette: this.themes.get(palette.name)
        };
    };
    LyRootService.prototype.getTheme = function (name) {
        return this.themes.get(name);
    };
    return LyRootService;
}());
LyRootService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] },
];
LyRootService.ctorParameters = function () { return [
    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] },] },
    { type: RendererFactory2, },
]; };
LyRootService.ngInjectableDef = defineInjectable({ factory: function LyRootService_Factory() { return new LyRootService(inject(DOCUMENT), inject(RendererFactory2)); }, token: LyRootService, providedIn: "root" });
var classId = 0;
var prefix;
if (Platform.isBrowser) {
    prefix = 'ly_';
}
else {
    prefix = 'l';
}
var LyTheme = /** @class */ (function () {
    function LyTheme(config, isRoot, document, rootService) {
        this.isRoot = isRoot;
        this.document = document;
        this.rootService = rootService;
        var newConfig = mergeDeep(defaultTheme, config);
        var _palette = newConfig;
        var theme = this.rootService.registerTheme(_palette);
        if (!theme.palette["colorSchemes"][theme.palette["scheme"]]) {
            throw new Error("scheme " + theme.palette["scheme"] + " not exist in " + theme.palette["name"]);
        }
        this._styleMap = theme.map;
        this.palette = mergeDeep.apply(void 0, __spread([theme.palette, { scheme: config.scheme }], theme.palette["colorSchemes"][newConfig.scheme]));
        this.themeName = newConfig.name;
        this.Id = "" + this.themeName;
        this.setCoreStyle();
    }
    LyTheme.prototype.getClassKey = function (color, of) {
        return this.Id + "-" + color.replace(':', '__') + "-" + of;
    };
    LyTheme.prototype.setScheme = function (scheme) {
        var newPalette = this.rootService.getTheme(this.palette.name);
        this.palette = mergeDeep.apply(void 0, __spread([newPalette], newPalette["colorSchemes"][scheme], [{ scheme: scheme }]));
        this.updateOthersStyles();
    };
    LyTheme.prototype.colorOf = function (value) {
        return get(this.palette, value);
    };
    LyTheme.prototype.getColorv2 = function (colorName, colors, shade) {
        var ar = colors ? colors : this.palette;
        if (ar[colorName]) {
            if (typeof ar[colorName].color === 'string' || typeof ar[colorName] === 'string') {
                return ar[colorName].color || ar[colorName];
            }
            else {
                return ar[colorName].color[shade];
            }
        }
        else {
            return colorName;
        }
    };
    LyTheme.prototype.setStyle = function (key, fn) {
        var newKey = createKeyOf(key + this.Id + this.palette.scheme);
        var mapStyles = this._styleMap;
        return this._createStyle(key, newKey, fn, mapStyles, this.Id);
    };
    LyTheme.prototype.setRootStyle = function (key, fn) {
        var newKey = createKeyOf(key);
        var mapStyles = this.rootService.themeRootMap;
        return this._createStyle(key, newKey, fn, mapStyles, 'root');
    };
    LyTheme.prototype._createStyle = function (key, newKey, fn, mapStyles, _for) {
        var styleData = ({ key: newKey, fn: fn });
        if (mapStyles.has(newKey)) {
            return mapStyles.get(newKey).id;
        }
        else if (Platform.isBrowser && (styleData.styleContainer = this.document.body.querySelector("ly-core-theme style[data-key=\"" + newKey + "\"]"))) {
            styleData.styleContent = styleData.styleContainer.innerHTML;
            styleData.id = styleData.styleContainer.dataset.id;
        }
        else {
            classId++;
            styleData.id = "" + prefix + classId.toString(36);
            styleData.styleContainer = this.rootService.renderer.createElement('style');
            var content = this.createStyleContent(styleData);
            styleData.styleContent = content;
            this.rootService.renderer.appendChild(styleData.styleContainer, styleData.styleContent);
            this.rootService.renderer.appendChild(this.rootService.rootContainer, styleData.styleContainer);
            if (!Platform.isBrowser) {
                this.rootService.renderer.setAttribute(styleData.styleContainer, "data-key", "" + newKey);
                this.rootService.renderer.setAttribute(styleData.styleContainer, "data-id", "" + styleData.id);
            }
        }
        mapStyles.set(newKey, styleData);
        return styleData.id;
    };
    LyTheme.prototype.createStyleContent = function (styleData) {
        return this.rootService.renderer.createText("." + styleData.id + "{" + styleData.fn() + "}");
    };
    LyTheme.prototype.updateStyleValue = function (style, styleText) {
        var styleContent = styleText;
        this.rootService.renderer.removeChild(style.styleContainer, style.styleContent);
        this.rootService.renderer.appendChild(style.styleContainer, styleContent);
        this._styleMap.set(style.key, Object.assign({}, style, {
            styleContainer: style.styleContainer,
            styleContent: styleContent
        }));
    };
    LyTheme.prototype.updateOthersStyles = function () {
        var _this = this;
        this._styleMap.forEach(function (styleData) {
            var newStyleValue = _this.createStyleContent(styleData);
            _this.updateStyleValue(styleData, newStyleValue);
        });
    };
    LyTheme.prototype.updateClass = function (elementRef, renderer, newStyleData, oldStyleData) {
        if (oldStyleData) {
            renderer.removeClass(elementRef.nativeElement, oldStyleData.id);
        }
        renderer.addClass(elementRef.nativeElement, newStyleData.id);
    };
    LyTheme.prototype.updateClassName = function (element, renderer, newClassname, oldClassname) {
        if (oldClassname) {
            renderer.removeClass(element, oldClassname);
        }
        renderer.addClass(element, newClassname);
    };
    LyTheme.prototype.setCoreStyle = function () {
        var _this = this;
        if (this.isRoot) {
            var classname = this.setStyle('body', function () { return ("background-color:" + _this.palette["background"].primary + ";" +
                ("color:" + _this.palette["text"].default + ";") +
                ("font-family:" + _this.palette["typography"].fontFamily + ";") +
                "margin:0;"); });
            this.rootService.renderer.addClass(this.document.body, classname);
        }
    };
    return LyTheme;
}());
LyTheme.decorators = [
    { type: Injectable },
];
LyTheme.ctorParameters = function () { return [
    { type: ThemeVariables, decorators: [{ type: Inject, args: [THEME_VARIABLES,] },] },
    { type: undefined, decorators: [{ type: Inject, args: [IS_CORE_THEME,] },] },
    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] },] },
    { type: LyRootService, },
]; };
function mergeDeep() {
    var objects = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        objects[_i] = arguments[_i];
    }
    var isObject = function (obj) { return obj && typeof obj === 'object'; };
    return objects.reduce(function (prev, obj) {
        Object.keys(obj).forEach(function (key) {
            var pVal = prev[key];
            var oVal = obj[key];
            if (Array.isArray(pVal) && Array.isArray(oVal)) {
                prev[key] = pVal.concat.apply(pVal, __spread(oVal));
            }
            else if (isObject(pVal) && isObject(oVal)) {
                prev[key] = mergeDeep(pVal, oVal);
            }
            else {
                prev[key] = oVal;
            }
        });
        return prev;
    }, {});
}
function parsePalette(palette) {
    var iterate = function (obj, keyObject) {
        for (var key in obj) {
            if (obj.hasOwnProperty(key)) {
                var key$ = keyObject ? keyObject + "__" + key : key;
                if (obj[key] !== null &&
                    typeof obj[key] === 'string' &&
                    key !== 'default') {
                    obj[key] = { default: obj[key] };
                }
                if (typeof obj[key] === 'object') {
                    iterate(obj[key], key$);
                }
            }
        }
        return obj;
    };
    return iterate(Object.assign({}, palette));
}
function createKeyOf(str) {
    var hash = 0;
    var len = str.length;
    for (var i = 0; i < len; i++) {
        hash = ((hash << 5) - hash) + str.charCodeAt(i);
        hash |= 0;
    }
    return hash.toString(36);
}
function get(obj, path) {
    var _path = path instanceof Array ? path : path.split(':');
    for (var i = 0; i < _path.length; i++) {
        obj = obj[_path[i]] || path;
    }
    return typeof obj === 'string' ? (obj) : (obj['default']);
}
var chroma = _chroma;
var shadowKeyUmbraOpacity = 0.2;
var shadowKeyPenumbraOpacity = 0.14;
var shadowAmbientShadowOpacity = 0.12;
var elevations = [
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 1, 3, 0, 0, 1, 1, 0, 0, 2, 1, -1],
    [0, 1, 5, 0, 0, 2, 2, 0, 0, 3, 1, -2],
    [0, 1, 8, 0, 0, 3, 4, 0, 0, 3, 3, -2],
    [0, 2, 4, -1, 0, 4, 5, 0, 0, 1, 10, 0],
    [0, 3, 5, -1, 0, 5, 8, 0, 0, 1, 14, 0],
    [0, 3, 5, -1, 0, 6, 10, 0, 0, 1, 18, 0],
    [0, 4, 5, -2, 0, 7, 10, 1, 0, 2, 16, 1],
    [0, 5, 5, -3, 0, 8, 10, 1, 0, 3, 14, 2],
    [0, 5, 6, -3, 0, 9, 12, 1, 0, 3, 16, 2],
    [0, 6, 6, -3, 0, 10, 14, 1, 0, 4, 18, 3],
    [0, 6, 7, -4, 0, 11, 15, 1, 0, 4, 20, 3],
    [0, 7, 8, -4, 0, 12, 17, 2, 0, 5, 22, 4],
    [0, 7, 8, -4, 0, 13, 19, 2, 0, 5, 24, 4],
    [0, 7, 9, -4, 0, 14, 21, 2, 0, 5, 26, 4],
    [0, 8, 9, -5, 0, 15, 22, 2, 0, 6, 28, 5],
    [0, 8, 10, -5, 0, 16, 24, 2, 0, 6, 30, 5],
    [0, 8, 11, -5, 0, 17, 26, 2, 0, 6, 32, 5],
    [0, 9, 11, -5, 0, 18, 28, 2, 0, 7, 34, 6],
    [0, 9, 12, -6, 0, 19, 29, 2, 0, 7, 36, 6],
    [0, 10, 13, -6, 0, 20, 31, 3, 0, 8, 38, 7],
    [0, 10, 13, -6, 0, 21, 33, 3, 0, 8, 40, 7],
    [0, 10, 14, -6, 0, 22, 35, 3, 0, 8, 42, 7],
    [0, 11, 14, -7, 0, 23, 36, 3, 0, 9, 44, 8],
    [0, 11, 15, -7, 0, 24, 38, 3, 0, 9, 46, 8]
];
function shadowBuilder(elevation, color) {
    if (elevation === void 0) { elevation = 1; }
    if (color === void 0) { color = '#000'; }
    var Color = chroma(color);
    var colors = [
        Color.alpha(shadowKeyUmbraOpacity).css(),
        Color.alpha(shadowKeyPenumbraOpacity).css(),
        Color.alpha(shadowAmbientShadowOpacity).css()
    ];
    var e = elevations[elevation];
    return "box-shadow:" + e[0] + "px " + e[1] + "px " + e[2] + "px " + e[3] + "px " + colors[0] + "," + e[4] + "px " + e[5] + "px " + e[6] + "px " + e[7] + "px " + colors[1] + "," + e[8] + "px " + e[9] + "px " + e[10] + "px " + e[11] + "px " + colors[2] + ";";
}
var RandomId = /** @class */ (function () {
    function RandomId() {
    }
    Object.defineProperty(RandomId.prototype, "generate", {
        get: function () {
            var id = (Math.random() + Date.now());
            return id;
        },
        enumerable: true,
        configurable: true
    });
    return RandomId;
}());
RandomId.decorators = [
    { type: Injectable },
];
function getParents(el, parentSelector) {
    if (parentSelector === undefined) {
        parentSelector = 'body';
    }
    var parents = [];
    var p = el.parentNode;
    var pxz = null;
    while (!pxz) {
        var o = p;
        parents.push(o);
        p = o.parentNode;
        pxz = p.querySelector(parentSelector);
    }
    return parents[parents.length - 1];
}
function getHexValue(intInput) {
    var result = intInput.toString(16);
    if (result.length < 2) {
        result = '0' + result;
    }
    return result;
}
function Color(red, green, blue, alpha) {
    return {
        red: red,
        green: green,
        blue: blue,
        alpha: alpha,
        toHex: function () {
            return getHexValue(red) + getHexValue(green) + getHexValue(blue);
        }
    };
}
var ɵ0 = function (color, bgColor) {
    var alpha = color.alpha;
    function getTintValue(tint, bgTint) {
        var tmp = Math.floor((1 - alpha) * bgTint + alpha * tint);
        if (tmp > 255) {
            return 255;
        }
        return tmp;
    }
    return Color(getTintValue(color.red, bgColor.red), getTintValue(color.green, bgColor.green), getTintValue(color.blue, bgColor.blue));
};
var colorConverter = {
    convertToHex: ɵ0
};
function hue2rgb(p, q, t) {
    if (t < 0) {
        t += 1;
    }
    if (t > 1) {
        t -= 1;
    }
    if (t < 1 / 6) {
        return p + (q - p) * 6 * t;
    }
    if (t < 1 / 2) {
        return q;
    }
    if (t < 2 / 3) {
        return p + (q - p) * (2 / 3 - t) * 6;
    }
    return p;
}
var ɵ1 = function (rgba) {
    rgba = rgba.replace('rgba(', '')
        .replace(')', '')
        .replace(' ', '');
    var splittedRgba = rgba.split(',');
    return Color(parseInt(splittedRgba[0], 10), parseInt(splittedRgba[1], 10), parseInt(splittedRgba[2], 10), parseFloat(splittedRgba[3]) || 1);
};
var ɵ2 = function (hexString) {
    hexString = hexString.replace('#', '');
    var rgbArr = [];
    function getHexPartByIndex(index) {
        switch (hexString.length) {
            case 3:
                return hexString[index] + hexString[index];
            default:
                index *= 2;
                return hexString[index] + hexString[index + 1];
        }
    }
    hexString = hexString.replace('#', '');
    for (var i = 0; i < hexString.length; i++) {
        rgbArr.push(parseInt(getHexPartByIndex(i), 16));
    }
    return Color(rgbArr[0], rgbArr[1], rgbArr[2], 1);
};
var ɵ3 = function hslToRgb(hsla) {
    hsla = hsla.replace('hsla(', '')
        .replace('hsl(', '')
        .replace(')', '')
        .replace(' ', '');
    hsla = hsla.split(',');
    var h = parseInt(hsla[0], 10) / 360;
    var s = parseInt(hsla[1], 10) / 100;
    var l = parseInt(hsla[2], 10) / 100;
    var a = parseFloat(hsla[3]) || 1;
    var r, g, b;
    if (s == 0) {
        r = g = b = l;
    }
    else {
        var q = l < 0.5 ? l * (1 + s) : l + s - l * s;
        var p = 2 * l - q;
        r = hue2rgb(p, q, h + 1 / 3);
        g = hue2rgb(p, q, h);
        b = hue2rgb(p, q, h - 1 / 3);
    }
    return Color(Math.round(r * 255), Math.round(g * 255), Math.round(b * 255), a);
};
var colorStringParser = {
    rgba: ɵ1,
    hex: ɵ2,
    hsla: ɵ3
};
function getColorType(colorString) {
    if (colorString.indexOf('rgba') !== -1 || colorString.indexOf('rgb') !== -1) {
        return 'rgba';
    }
    if (colorString.indexOf('hsla') !== -1 || colorString.indexOf('hsl') !== -1) {
        return 'hsla';
    }
    return 'hex';
}
function getColorForString(inputString) {
    return colorStringParser[getColorType(inputString)](inputString);
}
function trim(str) {
    return str.replace(/^\s+|\s+$/gm, '');
}
function rgbaToHex(rgba) {
    var parts = rgba.substring(rgba.indexOf('(')).split(','), r = parseInt(trim(parts[0].substring(1)), 10), g = parseInt(trim(parts[1]), 10), b = parseInt(trim(parts[2]), 10), a = parseFloat(trim(parts[3].substring(0, parts[3].length - 1))).toFixed(2);
    return ('#' + r.toString(16) + g.toString(16) + b.toString(16) + (Number(a) * 255).toString(16).substring(0, 2));
}
function componentToHex(c) {
    c = Number(c);
    var hex = c.toString(16);
    return hex.length === 1 ? '0' + hex : hex;
}
function toRgb(str, alpha) {
    return hexToRgba(colorConverter.convertToHex(getColorForString(str), getColorForString('#ffffff')).toHex(), alpha || 1);
}
function converterToHex(str) {
    return colorConverter.convertToHex(getColorForString(str), getColorForString('#ffffff')).toHex();
}
function rgbToHex(rgb) {
    var toRgb = rgb;
    if (toRgb.substr(0, 4) === 'rgba') {
        toRgb = toRgb.slice(5);
    }
    else {
        toRgb = toRgb.slice(4);
    }
    toRgb = toRgb.slice(0, -1);
    toRgb = toRgb.replace(' ', '');
    toRgb = toRgb.split(',');
    return componentToHex(toRgb[0]) + componentToHex(toRgb[1]) + componentToHex(toRgb[2]);
}
function rgbTransparent(rgba) {
    if (typeof rgba === 'string') {
        rgba = rgba.slice(0, -1);
        rgba = (rgba.split(',')[3]) * 1;
        if (typeof rgba === 'number') {
            rgba = 1;
        }
    }
    else {
        rgba = 1;
    }
    return rgba;
}
function hexToRgba(hex, tr) {
    if (tr === void 0) { tr = -1; }
    var _default = hex;
    var transparent = {
        r: 0,
        g: 0,
        b: 0,
        a: 0
    };
    if (tr === -1) {
        tr = rgbTransparent(hex);
    }
    hex = String(hex);
    if ((hex.substr(0, 4) === 'rgba') && !!hex.split(',')[3]) {
        tr = parseFloat(hex.split(',')[3].replace(')', ''));
        hex = String(hex);
        if (hex.length !== 6 && hex.length !== 3) {
            hex = rgbToHex(hex);
        }
    }
    if (hex !== undefined && hex !== null && hex !== 'transparent') {
        var shorthandRegex = /^#?([a-f\d])([a-f\d])([a-f\d])$/i;
        hex = hex.replace(shorthandRegex, function (m, r, g, b) {
            return r + r + g + g + b + b;
        });
        var result = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(hex);
        var colorr = 0;
        var colorg = 0;
        var colorb = 0;
        if (result) {
            colorr = parseInt(result[1], 16);
            colorg = parseInt(result[2], 16);
            colorb = parseInt(result[3], 16);
        }
        return result ? {
            json: {
                r: colorr,
                g: colorg,
                b: colorb,
                a: tr
            },
            color: "rgba(" + colorr + ", " + colorg + ", " + colorb + ", " + tr + ")",
        } : {
            json: transparent,
            color: "" + _default,
        };
    }
    else {
        return {
            json: transparent,
            color: "rgba(" + 0 + ", " + 0 + ", " + 0 + ", " + 0 + ")",
        };
    }
}
var LY_GLOBAL_CONTRAST = new InjectionToken('ly.global.contrast');
var NgTranscludeDirective = /** @class */ (function () {
    function NgTranscludeDirective(_viewRef) {
        this._viewRef = _viewRef;
        this.ngTranscludeChange = new EventEmitter();
        this.viewRef = _viewRef;
    }
    Object.defineProperty(NgTranscludeDirective.prototype, "ngTransclude", {
        get: function () {
            return this._ngTransclude;
        },
        set: function (templateRef) {
            this._ngTransclude = templateRef;
            if (templateRef) {
                this.viewRef.createEmbeddedView(templateRef);
            }
        },
        enumerable: true,
        configurable: true
    });
    NgTranscludeDirective.prototype.ngAfterContentInit = function () {
        this.ngTranscludeChange.emit(true);
    };
    NgTranscludeDirective.prototype.ngOnDestroy = function () {
        this.viewRef.detach();
    };
    return NgTranscludeDirective;
}());
NgTranscludeDirective.decorators = [
    { type: Directive, args: [{
                selector: '[ngTransclude]'
            },] },
];
NgTranscludeDirective.ctorParameters = function () { return [
    { type: ViewContainerRef, },
]; };
NgTranscludeDirective.propDecorators = {
    "ngTransclude": [{ type: Input },],
    "ngTranscludeChange": [{ type: Output },],
};
var NgTranscludeModule = /** @class */ (function () {
    function NgTranscludeModule() {
    }
    return NgTranscludeModule;
}());
NgTranscludeModule.decorators = [
    { type: NgModule, args: [{
                exports: [NgTranscludeDirective],
                declarations: [NgTranscludeDirective]
            },] },
];
function isWindow(obj) {
    return obj !== null && obj === obj.window;
}
function getWindow(elem) {
    return isWindow(elem) ? elem : elem.nodeType === 9 && elem.defaultView;
}
function exactPosition(elem) {
    var docElem, win, box = { top: 0, left: 0 };
    var doc = elem && elem.ownerDocument;
    docElem = doc.documentElement;
    if (typeof elem.getBoundingClientRect !== typeof undefined) {
        box = elem.getBoundingClientRect();
    }
    win = getWindow(doc);
    return {
        top: box.top + win.pageYOffset - docElem.clientTop,
        left: box.left + win.pageXOffset - docElem.clientLeft
    };
}
function toBoolean(value) {
    return value != null && "" + value !== 'false';
}
function IsBoolean() {
    return function (target, key) {
        var definition = Object.getOwnPropertyDescriptor(target, key);
        if (definition) {
            Object.defineProperty(target, key, {
                get: definition.get,
                set: function (newValue) {
                    definition.set(toBoolean(newValue));
                },
                enumerable: true,
                configurable: true
            });
        }
        else {
            Object.defineProperty(target, key, {
                get: function () {
                    return this['__' + key];
                },
                set: function (newValue) {
                    this['__' + key] = toBoolean(newValue);
                },
                enumerable: true,
                configurable: true
            });
        }
    };
}
function provideTheme(theme) {
    return [
        [LyTheme],
        { provide: THEME_VARIABLES, useValue: theme },
    ];
}
var AlyleUIModule = /** @class */ (function () {
    function AlyleUIModule() {
    }
    AlyleUIModule.forRoot = function (theme) {
        return {
            ngModule: AlyleUIModule,
            providers: [
                provideTheme(theme),
                { provide: IS_CORE_THEME, useValue: true },
            ]
        };
    };
    AlyleUIModule.forChild = function (theme) {
        return {
            ngModule: AlyleUIModule,
            providers: [
                provideTheme(theme),
                { provide: IS_CORE_THEME, useValue: false }
            ]
        };
    };
    return AlyleUIModule;
}());
AlyleUIModule.decorators = [
    { type: NgModule },
];
var ProvidedInTheme = {
    providedIn: AlyleUIModule
};
var LyShadowService = /** @class */ (function () {
    function LyShadowService(theme) {
        this.theme = theme;
        this.elevation = 1;
    }
    LyShadowService.prototype.setShadow = function (elementRef, renderer, val, oldClassName) {
        var _this = this;
        var keys;
        var elevation;
        var color = 'colorShadow';
        if (val) {
            keys = val.join('');
            elevation = val[0];
            color = val[1] || color;
        }
        else {
            keys = "" + this.elevation + color;
            elevation = this.elevation;
        }
        var classname = this.theme.setStyle("shadow" + keys, function () {
            return "" + shadowBuilder(elevation, _this.theme.colorOf(color));
        });
        this.theme.updateClassName(elementRef.nativeElement, renderer, classname, oldClassName);
        return classname;
    };
    return LyShadowService;
}());
LyShadowService.decorators = [
    { type: Injectable, args: [ProvidedInTheme,] },
];
LyShadowService.ctorParameters = function () { return [
    { type: LyTheme, },
]; };
LyShadowService.ngInjectableDef = defineInjectable({ factory: function LyShadowService_Factory() { return new LyShadowService(inject(LyTheme)); }, token: LyShadowService, providedIn: AlyleUIModule });
var LyBgColorAndRaised = /** @class */ (function () {
    function LyBgColorAndRaised(theme, renderer, elementRef, shadow, contrast) {
        this.theme = theme;
        this.renderer = renderer;
        this.elementRef = elementRef;
        this.shadow = shadow;
        this.contrast = contrast;
        this.elevation = 3;
    }
    Object.defineProperty(LyBgColorAndRaised.prototype, "bg", {
        get: function () {
            return this._bg;
        },
        set: function (value) {
            this._bg = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(LyBgColorAndRaised.prototype, "color", {
        get: function () {
            return this._color;
        },
        set: function (value) {
            this._color = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(LyBgColorAndRaised.prototype, "raised", {
        get: function () { return this._raisedState; },
        set: function (val) { this._raisedState = toBoolean(val); },
        enumerable: true,
        configurable: true
    });
    LyBgColorAndRaised.prototype.setAutoContrast = function () {
        this.contrast = true;
    };
    LyBgColorAndRaised.prototype.ngOnChanges = function (changes) {
        var _this = this;
        var newClassName;
        var raisedĸey = this._raisedState === true ? 'raised' : '';
        var key = '';
        if ((this.contrast && !this.color || this.color === 'auto') && this.bg) {
            key = "contrast" + this.bg + this._raisedState + this.elevation;
            newClassName = this.theme.setStyle("ly-" + key, this.contrastStyle.bind(this));
        }
        else if (this.bg && this.color) {
            key = "b&\u0138" + this.bg + this.color + this._raisedState + this.elevation;
            newClassName = this.theme.setStyle("ly-" + key, this.bgColorStyle.bind(this));
        }
        else if (this.raised && !this.bg) {
            key = raisedĸey + this.color || '';
            newClassName = this.theme.setStyle("ly-" + key, function () {
                var styles = "background-color:" + _this.theme.palette["background"].primary + ";";
                var color = '';
                var colorShadow;
                if (_this.color) {
                    color = _this.theme.colorOf(_this.color);
                    colorShadow = color;
                    styles += "color:" + color + ";";
                }
                else {
                    colorShadow = _this.theme.palette["colorShadow"];
                }
                if (_this._raisedState) {
                    styles += shadowBuilder(_this.elevation, colorShadow);
                }
                return styles;
            });
        }
        else if (this.bg || this.color) {
            var changeKey_1 = this.bg ? ['bg', 'background', this.bg] : ['ĸ', 'color', this.color];
            var color = changeKey_1[2];
            key = "" + changeKey_1[0] + color + this._raisedState + this.elevation;
            newClassName = this.theme.setStyle("ly-" + key, function () {
                var _color = _this.theme.colorOf(_this.bg || _this.color);
                var styles = changeKey_1[1] + ":" + _color + ";";
                if (_this._raisedState) {
                    styles += shadowBuilder(_this.elevation, _color);
                }
                return styles;
            });
        }
        else {
            key = "raised" + this._raisedState + this.elevation;
            newClassName = this.theme.setStyle("ly-" + key, function () {
                if (_this._raisedState) {
                    return shadowBuilder(_this.elevation, _this.theme.palette["colorShadow"]);
                }
                else {
                    return shadowBuilder(0, _this.theme.palette["colorShadow"]);
                }
            });
        }
        this.theme.updateClassName(this.elementRef.nativeElement, this.renderer, newClassName, this._currentClassName);
        this._currentClassName = newClassName;
    };
    LyBgColorAndRaised.prototype.contrastStyle = function () {
        var cssBg = this.theme.colorOf(this.bg);
        this._color = this.theme.colorOf(this.bg + ":contrast");
        var styles = "background:" + cssBg + ";color:" + this._color + ";";
        if (this._raisedState) {
            styles += shadowBuilder(this.elevation, cssBg);
        }
        return styles;
    };
    LyBgColorAndRaised.prototype.bgColorStyle = function () {
        var cssBg = this.theme.colorOf(this.bg);
        var cssColor = this.theme.colorOf(this.color);
        var styles = "background:" + cssBg + ";color:" + cssColor + ";";
        if (this._raisedState) {
            styles += shadowBuilder(this.elevation, cssBg);
        }
        return styles;
    };
    return LyBgColorAndRaised;
}());
LyBgColorAndRaised.decorators = [
    { type: Directive, args: [{
                selector: '[bg], [color], [raised]'
            },] },
];
LyBgColorAndRaised.ctorParameters = function () { return [
    { type: LyTheme, },
    { type: Renderer2, },
    { type: ElementRef, },
    { type: LyShadowService, },
    { type: undefined, decorators: [{ type: Inject, args: [LY_GLOBAL_CONTRAST,] }, { type: Optional },] },
]; };
LyBgColorAndRaised.propDecorators = {
    "bg": [{ type: Input },],
    "color": [{ type: Input },],
    "raised": [{ type: Input },],
    "elevation": [{ type: Input },],
};
var LyNewRaised = /** @class */ (function () {
    function LyNewRaised(elementRef, renderer, shadow) {
        this.elementRef = elementRef;
        this.renderer = renderer;
        this.shadow = shadow;
        this.elevation = 3;
    }
    Object.defineProperty(LyNewRaised.prototype, "newRaised", {
        set: function (value) {
            this.currentClassName = this.shadow.setShadow(this.elementRef, this.renderer, [value[0] || this.elevation, value[1] || 'colorShadow'], this.currentClassName);
        },
        enumerable: true,
        configurable: true
    });
    return LyNewRaised;
}());
LyNewRaised.decorators = [
    { type: Directive, args: [{ selector: ':not([raised])[newRaised]' },] },
];
LyNewRaised.ctorParameters = function () { return [
    { type: ElementRef, },
    { type: Renderer2, },
    { type: LyShadowService, },
]; };
LyNewRaised.propDecorators = {
    "newRaised": [{ type: Input },],
};
var LyCommonModule = /** @class */ (function () {
    function LyCommonModule() {
    }
    return LyCommonModule;
}());
LyCommonModule.decorators = [
    { type: NgModule, args: [{
                declarations: [LyBgColorAndRaised, LyNewRaised],
                exports: [LyBgColorAndRaised, LyNewRaised],
                providers: [
                    { provide: LY_GLOBAL_CONTRAST, useValue: false }
                ]
            },] },
];
var LyOverlayContainer = /** @class */ (function () {
    function LyOverlayContainer() {
        if (Platform.isBrowser) {
            var container = document.createElement('ly-overlay-container');
            document.body.appendChild(container);
            this._containerElement = container;
        }
    }
    Object.defineProperty(LyOverlayContainer.prototype, "containerElement", {
        get: function () {
            return this._containerElement;
        },
        enumerable: true,
        configurable: true
    });
    return LyOverlayContainer;
}());
LyOverlayContainer.decorators = [
    { type: Injectable },
];
LyOverlayContainer.ctorParameters = function () { return []; };
var DomService = /** @class */ (function () {
    function DomService(componentFactoryResolver, overlayContainer) {
        this.componentFactoryResolver = componentFactoryResolver;
        this.overlayContainer = overlayContainer;
    }
    DomService.prototype.attach = function (_hostViewContainerRef, component, template) {
        var _this = this;
        var viewRef = _hostViewContainerRef.createEmbeddedView(template);
        viewRef.detectChanges();
        this._viewContainerRef = _hostViewContainerRef;
        viewRef.rootNodes.forEach(function (rootNode) { return _this.addChild(rootNode); });
    };
    DomService.prototype.addChild = function (child) {
        this.overlayContainer.containerElement.appendChild(child);
    };
    DomService.prototype.getDomElementFromComponentRef = function (componentRef) {
        return (((componentRef.hostView))
            .rootNodes[0]);
    };
    DomService.prototype.destroyRef = function (componentRef, delay) {
        var _this = this;
        setTimeout(function () {
            if (_this._viewContainerRef) {
                _this._viewContainerRef.detach();
                _this._viewContainerRef.clear();
            }
        }, delay);
    };
    return DomService;
}());
DomService.decorators = [
    { type: Injectable },
];
DomService.ctorParameters = function () { return [
    { type: ComponentFactoryResolver, },
    { type: LyOverlayContainer, },
]; };
function LY_OVERLAY_CONTAINER_PROVIDER_FACTORY(parentContainer) {
    return parentContainer || new LyOverlayContainer();
}
var LY_OVERLAY_CONTAINER_PROVIDER = {
    provide: LyOverlayContainer,
    deps: [[new Optional(), new SkipSelf(), LyOverlayContainer]],
    useFactory: LY_OVERLAY_CONTAINER_PROVIDER_FACTORY
};
var LxDomModule = /** @class */ (function () {
    function LxDomModule() {
    }
    return LxDomModule;
}());
LxDomModule.decorators = [
    { type: NgModule, args: [{
                imports: [
                    CommonModule
                ],
                providers: [[DomService, LY_OVERLAY_CONTAINER_PROVIDER]]
            },] },
];
var FocusStatus = {
    DEFAULT: 'default',
    KEYBOARD: 'keyboard',
};
var LyFocusState = /** @class */ (function () {
    function LyFocusState(elementRef, _ngZone, _renderer, _cd) {
        var _this = this;
        this._ngZone = _ngZone;
        this._renderer = _renderer;
        this.stateMap = new Map();
        this._eventHandlers = new Map();
        this._stateSubject = new Subject();
        this.lyFocusChange = new EventEmitter();
        this._eventOptions = ({ passive: true });
        if (Platform.isBrowser) {
            this._eventHandlers
                .set('focus', this.on.bind(this))
                .set('blur', this.on.bind(this))
                .set('touchstart', this.on.bind(this))
                .set('mousedown', this.on.bind(this));
            var element = elementRef.nativeElement;
            this.setTriggerElement(element);
            var ob = this._stateSubject.asObservable();
            this._stateSubscription = ob
                .pipe(debounceTime(111))
                .subscribe(function (e) {
                _this.state = e;
                _this._updateClass();
                _this.lyFocusChange.emit(e);
            });
        }
    }
    LyFocusState.prototype._updateState = function () {
        var state;
        if (this.stateMap.has('blur')) {
            this.stateMap.clear();
        }
        else if (this.stateMap.has('focus') && this.stateMap.has('mousedown') || this.stateMap.has('focus') && this.stateMap.has('touchstart')) {
            state = FocusStatus.DEFAULT;
        }
        else if (this.stateMap.has('focus')) {
            state = FocusStatus.KEYBOARD;
        }
        this._stateSubject.next(state);
    };
    LyFocusState.prototype.on = function (event) {
        this.stateMap.set(event.type, true);
        this._updateState();
    };
    LyFocusState.prototype._updateClass = function () {
        var _this = this;
        var element = this._containerElement;
        var state = this.state;
        var toggleClass = function (className, shouldSet) { return shouldSet ? _this._renderer.addClass(element, className) : _this._renderer.removeClass(element, className); };
        toggleClass("ly-focused", !!state);
        for (var key in FocusStatus) {
            if (FocusStatus.hasOwnProperty(key)) {
                var className = FocusStatus[key];
                toggleClass("ly-" + className + "-focused", state === className);
            }
        }
    };
    LyFocusState.prototype.setTriggerElement = function (element) {
        var _this = this;
        if (this._containerElement) {
            this._eventHandlers.forEach(function (fn, type) {
                _this._containerElement.removeEventListener(type, fn, _this._eventOptions);
            });
        }
        if (element) {
            this._ngZone.runOutsideAngular(function () {
                return _this._eventHandlers.forEach(function (fn, type) {
                    return element.addEventListener(type, fn, _this._eventOptions);
                });
            });
        }
        this._containerElement = element;
    };
    LyFocusState.prototype.ngOnDestroy = function () {
        if (Platform.isBrowser) {
            this._stateSubscription.unsubscribe();
            this.setTriggerElement(null);
        }
    };
    return LyFocusState;
}());
LyFocusState.decorators = [
    { type: Directive, args: [{
                selector: '[lyFocusState]',
                exportAs: 'lyFocusState'
            },] },
];
LyFocusState.ctorParameters = function () { return [
    { type: ElementRef, },
    { type: NgZone, },
    { type: Renderer2, },
    { type: ChangeDetectorRef, },
]; };
LyFocusState.propDecorators = {
    "lyFocusChange": [{ type: Output },],
};
var LyFocusStateModule = /** @class */ (function () {
    function LyFocusStateModule() {
    }
    return LyFocusStateModule;
}());
LyFocusStateModule.decorators = [
    { type: NgModule, args: [{
                imports: [
                    CommonModule
                ],
                declarations: [LyFocusState],
                exports: [LyFocusState]
            },] },
];
var AUI_VERSION = '1.7.0-beta.6yqz';
var AUI_LAST_UPDATE = '2018-05-19T00:08:37.115Z';
var LyThemeStyles = /** @class */ (function () {
    function LyThemeStyles(theme) {
        this.theme = theme;
        this.classes = {};
    }
    return LyThemeStyles;
}());
LyThemeStyles.decorators = [
    { type: Injectable, args: [{ providedIn: AlyleUIModule },] },
];
LyThemeStyles.ctorParameters = function () { return [
    { type: LyTheme, },
]; };
LyThemeStyles.ngInjectableDef = defineInjectable({ factory: function LyThemeStyles_Factory() { return new LyThemeStyles(inject(LyTheme)); }, token: LyThemeStyles, providedIn: AlyleUIModule });
var LyGlobalStyles = /** @class */ (function () {
    function LyGlobalStyles(theme) {
        this.theme = theme;
        this.classes = {
            Absolute: this.theme.setRootStyle('Absolute', function () { return ("position: absolute;" +
                "top: 0;" +
                "bottom: 0;" +
                "left: 0;" +
                "right: 0;"); })
        };
    }
    return LyGlobalStyles;
}());
LyGlobalStyles.decorators = [
    { type: Injectable, args: [{ providedIn: 'root' },] },
];
LyGlobalStyles.ctorParameters = function () { return [
    { type: LyTheme, },
]; };
LyGlobalStyles.ngInjectableDef = defineInjectable({ factory: function LyGlobalStyles_Factory() { return new LyGlobalStyles(inject(LyTheme)); }, token: LyGlobalStyles, providedIn: "root" });

export { getContrastYIQ, LyTheme, mergeDeep, parsePalette, shadowBuilder, RandomId, getParents, THEME_VARIABLES, IS_CORE_THEME, StyleMap, ThemeVariables, LyRootService, Platform, Color, trim, rgbaToHex, componentToHex, toRgb, converterToHex, rgbToHex, rgbTransparent, hexToRgba, LyCommonModule, NgTranscludeDirective, NgTranscludeModule, exactPosition, toBoolean, IsBoolean, DomService, LY_OVERLAY_CONTAINER_PROVIDER_FACTORY, LY_OVERLAY_CONTAINER_PROVIDER, LxDomModule, LyFocusStateModule, FocusStatus, LyFocusState, provideTheme, AlyleUIModule, ProvidedInTheme, AUI_VERSION, AUI_LAST_UPDATE, LY_GLOBAL_CONTRAST, LyBgColorAndRaised, LyShadowService, LyThemeStyles, LyGlobalStyles, LyOverlayContainer as ɵb, LyNewRaised as ɵa };
//# sourceMappingURL=alyle-ui.js.map
