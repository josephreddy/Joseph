import { Injectable, Inject, PLATFORM_ID, NgModule } from '@angular/core';
import { isPlatformBrowser, isPlatformServer } from '@angular/common';
import { Observable, Subject, fromEvent } from 'rxjs';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class MinimalStorage {
    /**
     * @param {?} key$
     * @param {?} val
     */
    constructor(key$, val) {
        localStorage.setItem(key$, JSON.stringify(val));
    }
}
class MinimalLS {
    /**
     * @param {?} platformId
     */
    constructor(platformId) {
        this.platformId = platformId;
        this.itemsSubject = new Map();
        this._prefix = '*ls*';
        this.storage = new Subject();
        if (isPlatformBrowser(this.platformId)) {
            this.storageEvent = fromEvent(window, 'storage');
            this.storageEvent.subscribe((e) => {
                this.storage.next({
                    key: e.key,
                    value: e.newValue
                });
            });
            this.storageObservable = this.storage.asObservable();
        }
    }
    /**
     * get boolean
     * @param {?} key$
     * @return {?}
     */
    hasItem(key$) {
        const /** @type {?} */ key = this._addPrefix(key$);
        if (isPlatformBrowser(this.platformId)) {
            return !!localStorage.getItem(key);
        }
        if (isPlatformServer(this.platformId)) {
            return false;
        }
    }
    /**
     * Set new item or replace item
     * @param {?} key$
     * @param {?} val
     * @param {?=} _storage
     * @return {?}
     */
    setItem(key$, val, _storage = true) {
        const /** @type {?} */ key = this._addPrefix(key$);
        if (_storage) {
            if (isPlatformBrowser(this.platformId)) {
                // tslint:disable-next-line:no-unused-expression
                new MinimalStorage(key, val);
            }
        }
        this.storage.next({
            key: key,
            value: this.item(key$)
        });
        // this.itemsSubject.set(key, new BehaviorSubject<string>(val));
    }
    /**
     * Get Observable from localStorage
     * @param {?} key$
     * @param {?=} before
     * @return {?}
     */
    getItem(key$, before) {
        const /** @type {?} */ key = this._addPrefix(key$);
        const /** @type {?} */ ob = new Observable((observer) => {
            if (this.hasItem(key$)) {
                observer.next(this.item(key$));
            }
            this.storageObservable.subscribe((e) => {
                if (key === e.key) {
                    observer.next(e.value);
                }
            });
        });
        return ob;
    }
    /**
     * Get value from localstorage
     * @param {?} key$
     * @return {?}
     */
    item(key$) {
        const /** @type {?} */ key = this._addPrefix(key$);
        try {
            return JSON.parse(window.localStorage[key]);
        }
        catch (/** @type {?} */ e) {
            return null;
        }
    }
    /**
     * @param {?} val
     * @return {?}
     */
    _addPrefix(val) {
        return `{"${this._prefix}":"${val}"}`;
    }
    /**
     * @param {?} val
     * @return {?}
     */
    _removePrefix(val) {
        try {
            return JSON.parse(val)[this._prefix];
        }
        catch (/** @type {?} */ e) {
            return null;
        }
    }
}
MinimalLS.decorators = [
    { type: Injectable },
];
/** @nocollapse */
MinimalLS.ctorParameters = () => [
    { type: Object, decorators: [{ type: Inject, args: [PLATFORM_ID,] },] },
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class MinimalLSModule {
}
MinimalLSModule.decorators = [
    { type: NgModule, args: [{
                providers: [
                    MinimalLS
                ]
            },] },
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * Generated bundle index. Do not edit.
 */

export { MinimalStorage, MinimalLS, MinimalLSModule };
//# sourceMappingURL=alyle-ui-ls.js.map
