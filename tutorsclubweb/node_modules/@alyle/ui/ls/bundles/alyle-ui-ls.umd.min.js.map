{
  "version": 3,
  "file": "alyle-ui-ls.umd.min.js",
  "sources": [
    "ng://@alyle/ui/ls/out/minimal-localstorage.ts",
    "ng://@alyle/ui/ls/out/ls.module.ts"
  ],
  "sourcesContent": [
    "import {\n  NgModule,\n  ModuleWithProviders,\n  ElementRef,\n  ViewContainerRef,\n  Injectable,\n  Inject\n}                          from '@angular/core';\nimport { PLATFORM_ID } from '@angular/core';\nimport { isPlatformBrowser, isPlatformServer } from '@angular/common';\nimport { Observable ,  Subject ,  BehaviorSubject ,  Observer ,  fromEvent }      from 'rxjs';\nimport { CommonModule }    from '@angular/common';\n\nexport class MinimalStorage {\n  constructor(key$: string, val: any) {\n    localStorage.setItem(key$, JSON.stringify(val));\n  }\n}\n\n@Injectable()\nexport class MinimalLS {\n  private itemsSubject = new Map<string, BehaviorSubject<string>>();\n  private _prefix = '*ls*';\n  private storageEvent: Observable<any>;\n  private storage = new Subject();\n  private storageObservable: Observable<any>;\n  constructor(@Inject(PLATFORM_ID) private platformId: Object) {\n    if (isPlatformBrowser(this.platformId)) {\n      this.storageEvent = fromEvent(window, 'storage');\n      this.storageEvent.subscribe((e) => {\n        this.storage.next({\n          key: e.key,\n          value: e.newValue\n        });\n      });\n      this.storageObservable = this.storage.asObservable();\n    }\n  }\n\n  /**\n   * get boolean\n   */\n  hasItem(key$: string): boolean {\n    const key = this._addPrefix(key$);\n    if (isPlatformBrowser(this.platformId)) {\n      return !!localStorage.getItem(key);\n    }\n    if (isPlatformServer(this.platformId)) {\n      return false;\n    }\n  }\n  /**\n   * Set new item or replace item\n   */\n  setItem(key$: string, val: any, _storage = true) {\n    const key = this._addPrefix(key$);\n    if (_storage) {\n      if (isPlatformBrowser(this.platformId)) {\n        // tslint:disable-next-line:no-unused-expression\n        new MinimalStorage(key, val);\n      }\n    }\n    this.storage.next({\n      key: key,\n      value: this.item(key$)\n    });\n    // this.itemsSubject.set(key, new BehaviorSubject<string>(val));\n  }\n  /**\n   * Get Observable from localStorage\n   */\n  getItem(key$: string, before?: any): Observable<any> {\n    const key = this._addPrefix(key$);\n    const ob = new Observable((observer) => {\n      if (this.hasItem(key$)) {\n        observer.next(this.item(key$));\n      }\n      this.storageObservable.subscribe((e) => {\n        if (key === e.key) {\n          observer.next(e.value);\n        }\n      });\n    });\n    return ob;\n  }\n  /**\n   * Get value from localstorage\n   */\n  item(key$: string): any {\n    const key = this._addPrefix(key$);\n    try {\n      return JSON.parse(window.localStorage[key]);\n    } catch (e) {\n      return null;\n    }\n  }\n\n  private _addPrefix(val) {\n    return `{\"${this._prefix}\":\"${val}\"}`;\n  }\n  private _removePrefix(val) {\n    try {\n      return JSON.parse(val)[this._prefix];\n    } catch (e) {\n      return null;\n    }\n  }\n}\n\n",
    "import {\n  NgModule, ModuleWithProviders,\n  ViewContainerRef, SkipSelf, Optional,\n  InjectionToken }                       from '@angular/core';\nimport { MinimalLS } from './minimal-localstorage';\n\n@NgModule({\n  providers: [\n    MinimalLS\n  ]\n})\nexport class MinimalLSModule { }\n"
  ],
  "names": [
    "MinimalStorage",
    "key$",
    "val",
    "localStorage",
    "setItem",
    "JSON",
    "stringify",
    "MinimalLS",
    "platformId",
    "_this",
    "this",
    "itemsSubject",
    "Map",
    "_prefix",
    "storage",
    "Subject",
    "isPlatformBrowser",
    "storageEvent",
    "fromEvent",
    "window",
    "subscribe",
    "e",
    "next",
    "key",
    "value",
    "newValue",
    "storageObservable",
    "asObservable",
    "prototype",
    "hasItem",
    "_addPrefix",
    "getItem",
    "isPlatformServer",
    "_storage",
    "item",
    "before",
    "Observable",
    "observer",
    "parse",
    "_removePrefix",
    "type",
    "Injectable",
    "Object",
    "decorators",
    "Inject",
    "args",
    "PLATFORM_ID",
    "MinimalLSModule",
    "NgModule",
    "providers"
  ],
  "mappings": "gWAAA,IAAAA,EAcE,SAAYC,EAAcC,GACxBC,aAAaC,QAAQH,EAAMI,KAAKC,UAAUJ,KAK9CK,EAAA,WAME,SAAFA,EAA2CC,GAAzC,IAAFC,EAAAC,KAA2CA,KAA3CF,WAA2CA,EAL3CE,KAAAC,aAAyB,IAAIC,IAC7BF,KAAAG,QAAoB,OAEpBH,KAAAI,QAAoB,IAAIC,EAAAA,QAGhBC,EAAAA,kBAAkBN,KAAKF,cACzBE,KAAKO,aAAeC,EAAAA,UAAUC,OAAQ,WACtCT,KAAKO,aAAaG,UAAU,SAACC,GAC3BZ,EAAKK,QAAQQ,KAAK,CAChBC,IAAKF,EAAEE,IACPC,MAAOH,EAAEI,aAGbf,KAAKgB,kBAAoBhB,KAAKI,QAAQa,uBAO1CpB,EAAFqB,UAAAC,QAAE,SAAQ5B,GACN,IAAMsB,EAAMb,KAAKoB,WAAW7B,GAC5B,OAAIe,EAAAA,kBAAkBN,KAAKF,cAChBL,aAAa4B,QAAQR,IAE5BS,EAAAA,iBAAiBtB,KAAKF,kBAA1B,GAOFD,EAAFqB,UAAAxB,QAAE,SAAQH,EAAcC,EAAU+B,QAAlC,IAAAA,IAAkCA,GAAlC,GACI,IAAMV,EAAMb,KAAKoB,WAAW7B,GACxBgC,GACEjB,EAAAA,kBAAkBN,KAAKF,aAEzB,IAAIR,EAAeuB,EAAKrB,GAG5BQ,KAAKI,QAAQQ,KAAK,CAChBC,IAAKA,EACLC,MAAOd,KAAKwB,KAAKjC,MAOrBM,EAAFqB,UAAAG,QAAE,SAAQ9B,EAAckC,GAAtB,IAAF1B,EAAAC,KACUa,EAAMb,KAAKoB,WAAW7B,GAW5B,OAVW,IAAImC,EAAAA,WAAW,SAACC,GACrB5B,EAAKoB,QAAQ5B,IACfoC,EAASf,KAAKb,EAAKyB,KAAKjC,IAE1BQ,EAAKiB,kBAAkBN,UAAU,SAACC,GAC5BE,IAAQF,EAAEE,KACZc,EAASf,KAAKD,EAAEG,YASxBjB,EAAFqB,UAAAM,KAAE,SAAKjC,GACH,IAAMsB,EAAMb,KAAKoB,WAAW7B,GAC5B,IACE,OAAOI,KAAKiC,MAAMnB,OAAOhB,aAAaoB,IACtC,MAAOF,GACP,OAAO,OAIHd,EAAVqB,UAAAE,WAAU,SAAW5B,GACjB,MAAO,KAAKQ,KAAKG,QAArB,MAAkCX,EAAlC,MAEUK,EAAVqB,UAAAW,cAAU,SAAcrC,GACpB,IACE,OAAOG,KAAKiC,MAAMpC,GAAKQ,KAAKG,SAC5B,MAAOQ,GACP,OAAO,SApFb,iBADA,CAAAmB,KAACC,EAAAA,gDAOD,CAAAD,KAAAE,OAAAC,WAAA,CAAA,CAAAH,KAAeI,EAAAA,OAAfC,KAAA,CAAsBC,EAAAA,kBC1BtB,IAAAC,EAAA,2BAMA,CAAAP,KAACQ,EAAAA,SAADH,KAAA,CAAU,CACRI,UAAW,CACT1C"
}
