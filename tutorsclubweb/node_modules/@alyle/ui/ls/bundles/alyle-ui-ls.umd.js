(function (global, factory) {
	typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@angular/common'), require('rxjs')) :
	typeof define === 'function' && define.amd ? define('ly.ls', ['exports', '@angular/core', '@angular/common', 'rxjs'], factory) :
	(factory((global.ly = global.ly || {}, global.ly.ls = {}),global.ng.core,global.ng.common,global.rxjs));
}(this, (function (exports,core,common,rxjs) { 'use strict';

var MinimalStorage = /** @class */ (function () {
    function MinimalStorage(key$, val) {
        localStorage.setItem(key$, JSON.stringify(val));
    }
    return MinimalStorage;
}());
var MinimalLS = /** @class */ (function () {
    function MinimalLS(platformId) {
        var _this = this;
        this.platformId = platformId;
        this.itemsSubject = new Map();
        this._prefix = '*ls*';
        this.storage = new rxjs.Subject();
        if (common.isPlatformBrowser(this.platformId)) {
            this.storageEvent = rxjs.fromEvent(window, 'storage');
            this.storageEvent.subscribe(function (e) {
                _this.storage.next({
                    key: e.key,
                    value: e.newValue
                });
            });
            this.storageObservable = this.storage.asObservable();
        }
    }
    MinimalLS.prototype.hasItem = function (key$) {
        var key = this._addPrefix(key$);
        if (common.isPlatformBrowser(this.platformId)) {
            return !!localStorage.getItem(key);
        }
        if (common.isPlatformServer(this.platformId)) {
            return false;
        }
    };
    MinimalLS.prototype.setItem = function (key$, val, _storage) {
        if (_storage === void 0) { _storage = true; }
        var key = this._addPrefix(key$);
        if (_storage) {
            if (common.isPlatformBrowser(this.platformId)) {
                new MinimalStorage(key, val);
            }
        }
        this.storage.next({
            key: key,
            value: this.item(key$)
        });
    };
    MinimalLS.prototype.getItem = function (key$, before) {
        var _this = this;
        var key = this._addPrefix(key$);
        var ob = new rxjs.Observable(function (observer) {
            if (_this.hasItem(key$)) {
                observer.next(_this.item(key$));
            }
            _this.storageObservable.subscribe(function (e) {
                if (key === e.key) {
                    observer.next(e.value);
                }
            });
        });
        return ob;
    };
    MinimalLS.prototype.item = function (key$) {
        var key = this._addPrefix(key$);
        try {
            return JSON.parse(window.localStorage[key]);
        }
        catch (e) {
            return null;
        }
    };
    MinimalLS.prototype._addPrefix = function (val) {
        return "{\"" + this._prefix + "\":\"" + val + "\"}";
    };
    MinimalLS.prototype._removePrefix = function (val) {
        try {
            return JSON.parse(val)[this._prefix];
        }
        catch (e) {
            return null;
        }
    };
    return MinimalLS;
}());
MinimalLS.decorators = [
    { type: core.Injectable },
];
MinimalLS.ctorParameters = function () { return [
    { type: Object, decorators: [{ type: core.Inject, args: [core.PLATFORM_ID,] },] },
]; };
var MinimalLSModule = /** @class */ (function () {
    function MinimalLSModule() {
    }
    return MinimalLSModule;
}());
MinimalLSModule.decorators = [
    { type: core.NgModule, args: [{
                providers: [
                    MinimalLS
                ]
            },] },
];

exports.MinimalStorage = MinimalStorage;
exports.MinimalLS = MinimalLS;
exports.MinimalLSModule = MinimalLSModule;

Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=alyle-ui-ls.umd.js.map
