import { Directive, ElementRef, HostListener, Input, Self, Optional, ChangeDetectorRef, Injectable, Component, NgModule, ContentChild, ChangeDetectionStrategy, HostBinding, Renderer2, defineInjectable, inject } from '@angular/core';
import { FormGroupDirective, NgControl, NgForm, FormsModule } from '@angular/forms';
import { Subject } from 'rxjs';
import { LyTheme, ProvidedInTheme, LyCommonModule, IsBoolean, toBoolean, LyBgColorAndRaised, AlyleUIModule } from '@alyle/ui';
import { CommonModule } from '@angular/common';

var LyInputContents = /** @class */ (function () {
    function LyInputContents() {
    }
    return LyInputContents;
}());
LyInputContents.decorators = [
    { type: Directive, args: [{
                selector: 'ly-before-input, ly-after-input'
            },] },
];
var LyFieldDirective = /** @class */ (function () {
    function LyFieldDirective(elementRef, _ngControl, _parentForm, _parentFormGroup, cd) {
        this.elementRef = elementRef;
        this._ngControl = _ngControl;
        this._parentForm = _parentForm;
        this._parentFormGroup = _parentFormGroup;
        this.cd = cd;
        this.focusState = new Subject();
        this._disabled = false;
        this._required = false;
    }
    LyFieldDirective.prototype.focus = function (isFocused) {
        this.focusState.next(isFocused);
    };
    LyFieldDirective.prototype._blur = function (isFocused) {
        this.focusState.next(isFocused);
    };
    LyFieldDirective.prototype._noop = function () { };
    Object.defineProperty(LyFieldDirective.prototype, "disabled", {
        get: function () { return this._ngControl ? this._ngControl.disabled : this._disabled; },
        set: function (value) { this._disabled = !!(value); },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(LyFieldDirective.prototype, "required", {
        get: function () { return this._ngControl ? this._ngControl.invalid : this._required; },
        set: function (value) { this._required = !!(value); },
        enumerable: true,
        configurable: true
    });
    LyFieldDirective.prototype.markForCheck = function () {
        this.cd.markForCheck();
    };
    LyFieldDirective.prototype._parent = function () {
        return this._parentFormGroup || this._parentForm;
    };
    LyFieldDirective.prototype._updateErrorState = function () {
        var parent = this._parentFormGroup || this._parentForm;
        var control = this._ngControl ? (this._ngControl.control) : null;
    };
    LyFieldDirective.prototype.ngOnChanges = function (changes) {
    };
    LyFieldDirective.prototype.ngOnDestroy = function () {
        this.focusState.complete();
    };
    return LyFieldDirective;
}());
LyFieldDirective.decorators = [
    { type: Directive, args: [{
                selector: 'ly-input input, ly-textarea textarea'
            },] },
];
LyFieldDirective.ctorParameters = function () { return [
    { type: ElementRef, },
    { type: NgControl, decorators: [{ type: Optional }, { type: Self },] },
    { type: NgForm, decorators: [{ type: Optional },] },
    { type: FormGroupDirective, decorators: [{ type: Optional },] },
    { type: ChangeDetectorRef, },
]; };
LyFieldDirective.propDecorators = {
    "type": [{ type: Input },],
    "focus": [{ type: HostListener, args: ['focus', ['true'],] },],
    "_blur": [{ type: HostListener, args: ['blur', ['false'],] },],
    "_noop": [{ type: HostListener, args: ['input',] },],
    "disabled": [{ type: Input },],
    "required": [{ type: Input },],
};
var InputService = /** @class */ (function () {
    function InputService(theme) {
        this.theme = theme;
        this.classes = {};
    }
    return InputService;
}());
InputService.decorators = [
    { type: Injectable, args: [ProvidedInTheme,] },
];
InputService.ctorParameters = function () { return [
    { type: LyTheme, },
]; };
InputService.ngInjectableDef = defineInjectable({ factory: function InputService_Factory() { return new InputService(inject(LyTheme)); }, token: InputService, providedIn: AlyleUIModule });
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
    else
        for (var i = decorators.length - 1; i >= 0; i--)
            if (d = decorators[i])
                r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
        return Reflect.metadata(k, v);
};
var LyInputCommon = /** @class */ (function () {
    function LyInputCommon() {
    }
    return LyInputCommon;
}());
LyInputCommon.decorators = [
    { type: Directive, args: [{
                selector: 'ly-default, ly-before, ly-after, ly-input ly-error, ly-input ly-hint'
            },] },
];
var LyPlaceholder = /** @class */ (function () {
    function LyPlaceholder() {
    }
    return LyPlaceholder;
}());
LyPlaceholder.decorators = [
    { type: Directive, args: [{
                selector: 'ly-placeholder'
            },] },
];
var LyDefault = /** @class */ (function () {
    function LyDefault() {
    }
    return LyDefault;
}());
LyDefault.decorators = [
    { type: Directive, args: [{
                selector: 'ly-default'
            },] },
];
var LyLabel = /** @class */ (function () {
    function LyLabel() {
    }
    return LyLabel;
}());
LyLabel.decorators = [
    { type: Directive, args: [{
                selector: 'ly-label'
            },] },
];
var LyInput = /** @class */ (function () {
    function LyInput(theme, _changeDetectorRef, inputService, bcr, renderer, elementRef) {
        this.theme = theme;
        this._changeDetectorRef = _changeDetectorRef;
        this.inputService = inputService;
        this._inputColor = 'primary';
        this.changed = new Array();
        this.touched = new Array();
        this.type = 'text';
        this._classes = {};
    }
    Object.defineProperty(LyInput.prototype, "withColor", {
        get: function () {
            return this._withColor;
        },
        set: function (val) {
            this._withColor = val;
            this.updateColor(val);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(LyInput.prototype, "isFloatingLabel", {
        get: function () {
            return this.currentValueState || this.labelAbove || this.isDefault || this.focusState;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(LyInput.prototype, "placeholderState", {
        get: function () {
            return !this.currentValueState && this.focusState || !this.currentValueState && !this.focusState && this.isFloatingLabel;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(LyInput.prototype, "defaultOff", {
        get: function () {
            return this.currentValue === this.default && !this.focusState || !this.currentValueState && !this.focusState;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(LyInput.prototype, "disabled", {
        get: function () { return this._field.disabled; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(LyInput.prototype, "required", {
        get: function () { return this._field.required; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(LyInput.prototype, "currentValueState", {
        get: function () {
            return ("" + this.currentValue).length !== 0 && this.currentValue != null;
        },
        enumerable: true,
        configurable: true
    });
    LyInput.prototype._valueBoolean = function (val) {
        return !(val === null || val === undefined || val === false || val === '');
    };
    LyInput.prototype._isErrorState = function () {
        if (this._field) {
            return this._field._ngControl.invalid && this._field._ngControl.touched || this._errorState;
        }
    };
    LyInput.prototype.updateError = function () {
        this._errorState = this._field._ngControl.invalid;
    };
    LyInput.prototype.value = function () {
        return this.currentValue;
    };
    LyInput.prototype.updateColor = function (val) {
        var _this = this;
        var inputColor = function () { return _this.theme.colorOf(val); };
        this._classes.caretColor = this.theme.setStyle("input:caret" + val, function () { return ("caret-color:" + inputColor()); });
        this._classes.withColor = this.theme.setStyle("input:" + val, function () { return ("color:" + inputColor() + ";" +
            ("background-color:" + _this.theme.palette["input"].underline + ";")); });
    };
    LyInput.prototype.toBoolean = function (val) {
        return toBoolean(val);
    };
    Object.defineProperty(LyInput.prototype, "isPlaceholder", {
        get: function () {
            return toBoolean(this.placeholder) || !!this.lyPlaceholder;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(LyInput.prototype, "isDefault", {
        get: function () {
            return toBoolean(this.default) || !!this.lyDefault;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(LyInput.prototype, "isLabel", {
        get: function () {
            return toBoolean(this.label) || !!this.lyLabel;
        },
        enumerable: true,
        configurable: true
    });
    LyInput.prototype.ngOnInit = function () {
        var _this = this;
        if (!this.withColor) {
            this.updateColor(this.theme.palette["input"].withColor);
        }
        this.focusStateSuscription = this._field.focusState.subscribe(function (fState) {
            _this.focusState = fState;
        });
        if (this._field._parent()) {
            this._field._parent().ngSubmit.subscribe(function (submit) {
                _this.updateError();
            });
        }
    };
    LyInput.prototype.ngAfterViewInit = function () {
    };
    LyInput.prototype.ngAfterContentInit = function () {
        var _this = this;
        if (this._field) {
            this.currentValue = this._field._ngControl.value;
            if (this._field._ngControl && this._field._ngControl.valueChanges) {
                this._field._ngControl.valueChanges.subscribe(function (val) {
                    _this.currentValue = val;
                    _this._errorState = false;
                    _this._changeDetectorRef.markForCheck();
                });
            }
            this._field.focusState.subscribe(function (isFocused) {
                if (_this.isDefault) {
                    if (!_this.currentValueState) {
                        _this.currentValue = _this.default;
                        _this._field._ngControl.valueAccessor.writeValue(_this.default);
                        _this._field._ngControl.viewToModelUpdate(_this.default);
                    }
                }
                _this._field.markForCheck();
                _this._changeDetectorRef.markForCheck();
            });
        }
        else {
            console.warn('LyInput: Require input native');
        }
    };
    LyInput.prototype._shouldForward = function (prop) {
        var control = this._field ? this._field._ngControl : null;
        return control && ((control))[prop];
    };
    LyInput.prototype.ngOnChanges = function (changes) {
        if (changes["default"]) {
            if (this.isDefault && !this.currentValueState) {
                this.currentValue = this.default;
                this._field._ngControl.viewToModelUpdate(this.default);
            }
        }
    };
    LyInput.prototype.ngOnDestroy = function () {
        this.focusStateSuscription.unsubscribe();
    };
    return LyInput;
}());
LyInput.decorators = [
    { type: Component, args: [{
                selector: 'ly-text-field, ly-input, ly-textarea',
                styles: [":host{display:inline-block;position:relative;-webkit-box-align:center;-ms-flex-align:center;align-items:center}:host /deep/ ly-after,:host /deep/ ly-before{display:inline-block;vertical-align:inherit}:host /deep/ input,:host /deep/ textarea{border:none;outline:0;font-family:inherit;color:inherit;background:0 0;font-size:inherit;width:100%;font-weight:400;padding:0;display:-webkit-inline-box;display:-ms-inline-flexbox;display:inline-flex}:host.ly-default-off .ly-input-default,:host.ly-hidden-input /deep/ .ly-input-container input,:host.ly-hidden-input /deep/ .ly-input-container textarea{opacity:0}:host.ly-focus-active .ly-input-underline:after{width:100%}:host.ly-focus-active .ly-input-top-label,:host.ly-focus-active /deep/ ly-top-label{font-size:75%;top:0;-webkit-transform:translate(0,0);transform:translate(0,0)}:host.ly-focus-active .ly-input-default{opacity:0}:host.ly-value-on .ly-input-placeholder{opacity:0}.ly-input-underline{position:absolute;bottom:.875em;height:1px;right:0;left:0}.ly-input-underline:after{content:'';position:absolute;width:0%;height:2px;background:currentColor;left:0;right:0;margin:0 auto;bottom:0;-webkit-transition:all 450ms cubic-bezier(.23,1,.32,1) 0s;transition:all 450ms cubic-bezier(.23,1,.32,1) 0s}.ly-input-underline.ly-disabled{background:0/4px 1px repeat-x;background-image:-webkit-gradient(linear,left top,right top,from(#b4b4b4),color-stop(33%,#b4b4b4),color-stop(0,transparent));background-image:linear-gradient(to right,#b4b4b4 0,#b4b4b4 33%,transparent 0);border-top:0}.ly-input-underline.ly-disabled:after{width:0%}:host.ly-label-above .ly-input-float-label{font-size:75%;top:0}.ly-input-default,.ly-input-float-label,.ly-input-placeholder{pointer-events:none;position:absolute;bottom:1.125em;top:1.125em;margin:auto;font-size:100%;-webkit-transition:all 375ms cubic-bezier(.23,1,.32,1);transition:all 375ms cubic-bezier(.23,1,.32,1);color:inherit;width:100%}.ly-input-content{width:100%;position:relative;display:-webkit-box;display:-ms-flexbox;display:flex;color:currentColor}.ly-input-container{padding:1.125em 0;position:relative;opacity:1;display:inline-block;vertical-align:inherit;width:100%}.ly-input-container ::ng-deep input{text-align:inherit}.bottom-field,.ly-error-container{position:absolute;bottom:0;left:0;width:100%;pointer-events:none;font-size:75%;-webkit-transform:translate3d(0,calc(100% - 1.1em),0);transform:translate3d(0,calc(100% - 1.1em),0);display:-webkit-box;display:-ms-flexbox;display:flex}.bottom-field .bottom-field-space,.ly-error-container .bottom-field-space{-webkit-box-flex:1;-ms-flex:1;flex:1}.ly-required{position:absolute;top:1.125em;right:0;pointer-events:none;-webkit-transform:translate3d(0,0,0);transform:translate3d(0,0,0);opacity:.45}:host.ly-input-invalid .ly-input-float-label,:host.ly-input-invalid .ly-input-placeholder,:host.ly-input-invalid .ly-input-underline,:host.ly-input-invalid /deep/ ly-error{color:#f44336!important}:host.ly-input-invalid .ly-input-underline:after{width:100%}"],
                template: "<ng-content select=\"ly-before\"></ng-content>\n<div class=\"{{ _classes.withColor }} ly-input-underline\"></div>\n<div class=\"ly-input-container {{ _classes.caretColor }}\">\n  <ng-content select=\"input, textarea\"></ng-content>\n  <!-- ly-placeholder -->\n  <ng-container *ngIf=\"placeholder; then isPlaceholderTemplate; else placeholderContainer\"></ng-container>\n  <ng-template #isPlaceholderTemplate>\n    <div *ngIf=\"toBoolean(placeholder) !== undefined && placeholderState\" color=\"input:label\" class=\"ly-input-placeholder\">{{ placeholder }}</div>\n  </ng-template>\n  <ng-template #placeholderContainer>\n    <div *ngIf=\"lyPlaceholder !== undefined && placeholderState\" color=\"input:label\" class=\"ly-input-placeholder\">\n      <ng-content select=\"ly-placeholder\"></ng-content>\n    </div>\n  </ng-template>\n  <!-- ly-default -->\n  <ng-container *ngIf=\"toBoolean(default); then isDefaultTemplate\"></ng-container>\n  <ng-template #isDefaultTemplate>\n    <div *ngIf=\"!(lyDefault !== undefined) && defaultOff\" color=\"input:label\" class=\"ly-input-default\">Default: {{ default }}</div>\n    <div *ngIf=\"lyDefault !== undefined && defaultOff\" color=\"input:label\" class=\"ly-input-default\">\n      <ng-content select=\"ly-default\"></ng-content>{{ default }}\n    </div>\n  </ng-template>\n  <!-- ly-label -->\n  <ng-container *ngIf=\"toBoolean(label); then _isLabelTemplate; else labelContainer\"></ng-container>\n  <ng-template #_isLabelTemplate>\n    <div *ngIf=\"label !== undefined\" color=\"input:label\" class=\"ly-input-float-label\">{{ label }}</div>\n  </ng-template>\n  <ng-template #labelContainer>\n    <div *ngIf=\"lyLabel\" color=\"input:label\" class=\"ly-input-float-label\">\n      <ng-content select=\"ly-label\"></ng-content>\n    </div>\n  </ng-template>\n</div>\n<div class=\"ly-icon-required\" *ngIf=\"required\"></div>\n<div class=\"bottom-field\" *ngIf=\"!_isErrorState()\">\n  <ng-content select=\"ly-hint[align=start], ly-hint:not(ly-hint[align])\"></ng-content>\n  <span class=\"bottom-field-space\"></span>\n  <ng-content select=\"ly-hint[align=end]\"></ng-content>\n</div>\n<div class=\"bottom-field\" *ngIf=\"_isErrorState()\">\n  <ng-content select=\"ly-error\"></ng-content>\n</div>\n<ng-content select=\"ly-after\"></ng-content>\n",
                host: {
                    '[class.ly-input-invalid]': '_isErrorState()',
                    '[class.ng-untouched]': '_shouldForward("untouched")',
                    '[class.ng-touched]': '_shouldForward("touched")',
                    '[class.ng-pristine]': '_shouldForward("pristine")',
                    '[class.ng-dirty]': '_shouldForward("dirty")',
                    '[class.ng-valid]': '_shouldForward("valid")',
                    '[class.ng-invalid]': '_shouldForward("invalid")',
                    '[class.ng-pending]': '_shouldForward("pending")',
                },
                changeDetection: ChangeDetectionStrategy.OnPush,
                preserveWhitespaces: false
            },] },
];
LyInput.ctorParameters = function () { return [
    { type: LyTheme, },
    { type: ChangeDetectorRef, },
    { type: InputService, },
    { type: LyBgColorAndRaised, decorators: [{ type: Optional },] },
    { type: Renderer2, },
    { type: ElementRef, },
]; };
LyInput.propDecorators = {
    "_field": [{ type: ContentChild, args: [LyFieldDirective,] },],
    "lyPlaceholder": [{ type: ContentChild, args: [LyPlaceholder,] },],
    "lyDefault": [{ type: ContentChild, args: [LyDefault,] },],
    "lyLabel": [{ type: ContentChild, args: [LyLabel,] },],
    "type": [{ type: Input },],
    "label": [{ type: Input },],
    "placeholder": [{ type: Input },],
    "labelAbove": [{ type: Input },],
    "default": [{ type: Input },],
    "withColor": [{ type: Input },],
    "isFloatingLabel": [{ type: HostBinding, args: ['class.ly-label-above',] },],
    "focusState": [{ type: HostBinding, args: ['class.ly-focus-active',] },],
    "defaultOff": [{ type: HostBinding, args: ['class.ly-hidden-input',] },],
    "disabled": [{ type: Input },],
    "required": [{ type: Input },],
    "currentValueState": [{ type: HostBinding, args: ['class.ly-value-on',] },],
};
__decorate([
    IsBoolean(),
    __metadata("design:type", Boolean)
], LyInput.prototype, "labelAbove", void 0);
var LyInputModule = /** @class */ (function () {
    function LyInputModule() {
    }
    return LyInputModule;
}());
LyInputModule.decorators = [
    { type: NgModule, args: [{
                imports: [CommonModule, FormsModule, LyCommonModule],
                exports: [LyInput, LyInputContents, LyFieldDirective, LyInputCommon, LyDefault, LyLabel, LyPlaceholder],
                declarations: [LyInput, LyInputContents, LyFieldDirective, LyInputCommon, LyDefault, LyLabel, LyPlaceholder],
            },] },
];

export { LyInputCommon, LyPlaceholder, LyDefault, LyLabel, LyInput, LyInputModule, LyInputContents, LyFieldDirective, InputService as ɵa };
//# sourceMappingURL=alyle-ui-input.js.map
