import { LyTheme, ProvidedInTheme, Platform, toBoolean, LyBgColorAndRaised, LyCommonModule, AlyleUIModule } from '@alyle/ui';
import { Injectable, ChangeDetectionStrategy, Component, ElementRef, Input, Optional, Renderer2, ViewChild, NgZone, NgModule, defineInjectable, inject } from '@angular/core';
import { Ripple, LyRippleService, LyRippleModule } from '@alyle/ui/ripple';
import { CommonModule } from '@angular/common';

var LyButtonService = /** @class */ (function () {
    function LyButtonService(theme) {
        this.theme = theme;
        this.classes = {
            root: this.theme.setRootStyle('rbtn', rootStyle),
            outlined: this.theme.setRootStyle('btntlnd', function () { return ("border: 1px solid currentColor"); }),
            buttonContent: this.theme.setRootStyle('buttonContent', function () { return ("padding:0;" +
                "display:flex;" +
                "justify-content:inherit;" +
                "align-items:inherit;" +
                "align-content:inherit;" +
                "width: 100%;" +
                "height: 100%;" +
                "box-sizing: border-box;"); })
        };
        this.themeClassName = this.theme.setStyle('btn', this.style.bind(this));
    }
    LyButtonService.prototype.applyTheme = function (renderer, elementRef) {
        renderer.addClass(elementRef.nativeElement, this.classes.root);
        renderer.addClass(elementRef.nativeElement, this.themeClassName);
    };
    LyButtonService.prototype.style = function () {
        return "font-family:" + this.theme.palette["typography"].fontFamily + ";" +
            ("font-size:" + this.theme.palette["typography"].fontSize + "px;") +
            ("color:" + this.theme.palette["text"].default + ";");
    };
    return LyButtonService;
}());
LyButtonService.decorators = [
    { type: Injectable, args: [ProvidedInTheme,] },
];
LyButtonService.ctorParameters = function () { return [
    { type: LyTheme, },
]; };
LyButtonService.ngInjectableDef = defineInjectable({ factory: function LyButtonService_Factory() { return new LyButtonService(inject(LyTheme)); }, token: LyButtonService, providedIn: AlyleUIModule });
function rootStyle() {
    return '-webkit-tap-highlight-color:transparent;' +
        'background-color:rgba(0, 0, 0, 0);' +
        'border:0;' +
        'padding:0 16px;' +
        '-moz-appearance:none;' +
        'min-height:36px;' +
        'height:36px;' +
        'margin:0;' +
        'border-radius:3px;' +
        'outline:none;' +
        'font-weight:500;' +
        'min-width:88px;' +
        'box-sizing:border-box;' +
        'position:relative;' +
        "justify-content:center;" +
        "align-items:center;" +
        "align-content:center;" +
        'display:inline-flex;' +
        'cursor:pointer;' +
        '-webkit-user-select:none;' +
        '-moz-user-select:none;' +
        '-ms-user-select:none;' +
        'user-select:none;' +
        'text-decoration-line:none;' +
        '-webkit-text-decoration-line:none;' +
        'transition:all 375ms cubic-bezier(0.23, 1, 0.32, 1) 0ms;' +
        "overflow: hidden;";
}
var LyButton = /** @class */ (function () {
    function LyButton(elementRef, renderer, theme, rippleStyles, buttonService, _ngZone, bgAndColor) {
        this.elementRef = elementRef;
        this.renderer = renderer;
        this.theme = theme;
        this.rippleStyles = rippleStyles;
        this.buttonService = buttonService;
        this.bgAndColor = bgAndColor;
        this._disabled = false;
        this._rippleSensitive = false;
        if (bgAndColor) {
            bgAndColor.setAutoContrast();
        }
        this.buttonService.applyTheme(renderer, elementRef);
        if (Platform.isBrowser) {
            var el = elementRef.nativeElement;
            this._rippleContainer = new Ripple(_ngZone, rippleStyles.stylesData, el);
        }
    }
    Object.defineProperty(LyButton.prototype, "outlined", {
        set: function (val) {
            var classname = toBoolean(val) === true ? this.buttonService.classes.outlined : '';
            this.theme.updateClassName(this.elementRef.nativeElement, this.renderer, classname, this._outlinedClassName);
            this._outlinedClassName = classname;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(LyButton.prototype, "rippleSensitive", {
        get: function () {
            return this._rippleSensitive;
        },
        set: function (value) {
            this._rippleSensitive = toBoolean(value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(LyButton.prototype, "disabled", {
        get: function () {
            return this._disabled;
        },
        set: function (value) {
            var key = this.bgAndColor && (this.bgAndColor.raised || this.bgAndColor.bg) ? 'r' : 'f';
            this._disabledClassName = this.theme.setStyle("btn" + key, this.disableStyle.bind(this));
            this._disabled = toBoolean(value);
            if (this._disabled) {
                this.renderer.addClass(this.elementRef.nativeElement, this._disabledClassName);
            }
            else {
                this.renderer.removeClass(this.elementRef.nativeElement, this._disabledClassName);
            }
        },
        enumerable: true,
        configurable: true
    });
    LyButton.prototype.focused = function () {
        this.elementRef.nativeElement.focus();
    };
    LyButton.prototype.ngAfterViewInit = function () {
        var classes = this.buttonService.classes;
        ((this.buttonContent.nativeElement)).classList.add(classes.buttonContent);
    };
    LyButton.prototype.disableStyle = function () {
        var style = "box-shadow: 0 0 0 rgba(0, 0, 0, 0) !important;" +
            "cursor: default;" +
            ("color: " + this.theme.palette["text"].disabled + " !important;") +
            "pointer-events: none;";
        if (this.bgAndColor && (this.bgAndColor.raised || this.bgAndColor.bg)) {
            style += "background-color: " + this.theme.palette["button"].disabled + " !important;";
        }
        return style;
    };
    LyButton.prototype.ngOnDestroy = function () {
        if (Platform.isBrowser) {
            this._rippleContainer.removeEvents();
        }
    };
    return LyButton;
}());
LyButton.decorators = [
    { type: Component, args: [{
                selector: '[ly-button], ly-button',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: "\n  <span #content>\n    <ng-content></ng-content>\n  </span>\n  "
            },] },
];
LyButton.ctorParameters = function () { return [
    { type: ElementRef, },
    { type: Renderer2, },
    { type: LyTheme, },
    { type: LyRippleService, },
    { type: LyButtonService, },
    { type: NgZone, },
    { type: LyBgColorAndRaised, decorators: [{ type: Optional },] },
]; };
LyButton.propDecorators = {
    "outlined": [{ type: Input },],
    "rippleSensitive": [{ type: Input, args: ['sensitive',] },],
    "buttonContent": [{ type: ViewChild, args: ['content',] },],
    "disabled": [{ type: Input },],
};
var LyButtonModule = /** @class */ (function () {
    function LyButtonModule() {
    }
    return LyButtonModule;
}());
LyButtonModule.decorators = [
    { type: NgModule, args: [{
                imports: [CommonModule, LyRippleModule, LyCommonModule],
                exports: [LyButton],
                declarations: [LyButton]
            },] },
];

export { LyButton, LyButtonModule, LyButtonService as Éµa };
//# sourceMappingURL=alyle-ui-button.js.map
