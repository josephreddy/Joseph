import { LyTheme, ProvidedInTheme, Platform, toBoolean, LyBgColorAndRaised, LyCommonModule, AlyleUIModule } from '@alyle/ui';
import { Injectable, ChangeDetectionStrategy, Component, ElementRef, Input, Optional, Renderer2, ViewChild, NgZone, NgModule, defineInjectable, inject } from '@angular/core';
import { Ripple, LyRippleService, LyRippleModule } from '@alyle/ui/ripple';
import { CommonModule } from '@angular/common';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class LyButtonService {
    /**
     * @param {?} theme
     */
    constructor(theme) {
        this.theme = theme;
        this.classes = {
            root: this.theme.setRootStyle('rbtn', rootStyle),
            // rootHover: this.theme.setRootStyle(
            //   'btn',
            //   () => (
            //     `color: red;`
            //   ),
            //   ':hover'
            // ),
            outlined: this.theme.setRootStyle('btntlnd', () => (`border: 1px solid currentColor`)),
            buttonContent: this.theme.setRootStyle('buttonContent', () => (`padding:0;` +
                `display:flex;` +
                `justify-content:inherit;` +
                `align-items:inherit;` +
                `align-content:inherit;` +
                `width: 100%;` +
                `height: 100%;` +
                `box-sizing: border-box;`))
        };
        this.themeClassName = this.theme.setStyle('btn', this.style.bind(this));
    }
    /**
     * @param {?} renderer
     * @param {?} elementRef
     * @return {?}
     */
    applyTheme(renderer, elementRef) {
        renderer.addClass(elementRef.nativeElement, this.classes.root);
        renderer.addClass(elementRef.nativeElement, this.themeClassName);
    }
    /**
     * @return {?}
     */
    style() {
        return `font-family:${this.theme.palette["typography"].fontFamily};` +
            `font-size:${this.theme.palette["typography"].fontSize}px;` +
            `color:${this.theme.palette["text"].default};`;
    }
}
LyButtonService.decorators = [
    { type: Injectable, args: [ProvidedInTheme,] },
];
/** @nocollapse */
LyButtonService.ctorParameters = () => [
    { type: LyTheme, },
];
/** @nocollapse */ LyButtonService.ngInjectableDef = defineInjectable({ factory: function LyButtonService_Factory() { return new LyButtonService(inject(LyTheme)); }, token: LyButtonService, providedIn: AlyleUIModule });
/**
 * @return {?}
 */
function rootStyle() {
    return '-webkit-tap-highlight-color:transparent;' +
        'background-color:rgba(0, 0, 0, 0);' +
        'border:0;' +
        'padding:0 16px;' +
        '-moz-appearance:none;' +
        'min-height:36px;' +
        'height:36px;' +
        'margin:0;' +
        'border-radius:3px;' +
        'outline:none;' +
        'font-weight:500;' +
        'min-width:88px;' +
        'box-sizing:border-box;' +
        'position:relative;' +
        `justify-content:center;` +
        `align-items:center;` +
        `align-content:center;` +
        'display:inline-flex;' +
        'cursor:pointer;' +
        '-webkit-user-select:none;' +
        '-moz-user-select:none;' +
        '-ms-user-select:none;' +
        'user-select:none;' +
        'text-decoration-line:none;' +
        '-webkit-text-decoration-line:none;' +
        'transition:all 375ms cubic-bezier(0.23, 1, 0.32, 1) 0ms;' +
        `overflow: hidden;`;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class LyButton {
    /**
     * @param {?} elementRef
     * @param {?} renderer
     * @param {?} theme
     * @param {?} rippleStyles
     * @param {?} buttonService
     * @param {?} _ngZone
     * @param {?} bgAndColor
     */
    constructor(elementRef, renderer, theme, rippleStyles, buttonService, _ngZone, bgAndColor) {
        this.elementRef = elementRef;
        this.renderer = renderer;
        this.theme = theme;
        this.rippleStyles = rippleStyles;
        this.buttonService = buttonService;
        this.bgAndColor = bgAndColor;
        this._disabled = false;
        this._rippleSensitive = false;
        if (bgAndColor) {
            bgAndColor.setAutoContrast();
        }
        this.buttonService.applyTheme(renderer, elementRef);
        if (Platform.isBrowser) {
            const /** @type {?} */ el = elementRef.nativeElement;
            this._rippleContainer = new Ripple(_ngZone, rippleStyles.stylesData, el);
        }
    }
    /**
     * @param {?} val
     * @return {?}
     */
    set outlined(val) {
        const /** @type {?} */ classname = toBoolean(val) === true ? this.buttonService.classes.outlined : '';
        this.theme.updateClassName(this.elementRef.nativeElement, this.renderer, classname, this._outlinedClassName);
        this._outlinedClassName = classname;
    }
    /**
     * @return {?}
     */
    get rippleSensitive() {
        return this._rippleSensitive;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set rippleSensitive(value) {
        this._rippleSensitive = toBoolean(value);
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set disabled(value) {
        const /** @type {?} */ key = this.bgAndColor && (this.bgAndColor.raised || this.bgAndColor.bg) ? 'r' : 'f';
        this._disabledClassName = this.theme.setStyle(`btn${key}`, this.disableStyle.bind(this));
        this._disabled = toBoolean(value);
        if (this._disabled) {
            this.renderer.addClass(this.elementRef.nativeElement, this._disabledClassName);
        }
        else {
            this.renderer.removeClass(this.elementRef.nativeElement, this._disabledClassName);
        }
    }
    /**
     * @return {?}
     */
    get disabled() {
        return this._disabled;
    }
    /**
     * @return {?}
     */
    focused() {
        this.elementRef.nativeElement.focus();
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        const /** @type {?} */ classes = this.buttonService.classes;
        (/** @type {?} */ (this.buttonContent.nativeElement)).classList.add(classes.buttonContent);
    }
    /**
     * @return {?}
     */
    disableStyle() {
        let /** @type {?} */ style = `box-shadow: 0 0 0 rgba(0, 0, 0, 0) !important;` +
            `cursor: default;` +
            `color: ${this.theme.palette["text"].disabled} !important;` +
            `pointer-events: none;`;
        if (this.bgAndColor && (this.bgAndColor.raised || this.bgAndColor.bg)) {
            style += `background-color: ${this.theme.palette["button"].disabled} !important;`;
        }
        return style;
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        if (Platform.isBrowser) {
            this._rippleContainer.removeEvents();
        }
    }
}
LyButton.decorators = [
    { type: Component, args: [{
                selector: '[ly-button], ly-button',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: `
  <span #content>
    <ng-content></ng-content>
  </span>
  `
            },] },
];
/** @nocollapse */
LyButton.ctorParameters = () => [
    { type: ElementRef, },
    { type: Renderer2, },
    { type: LyTheme, },
    { type: LyRippleService, },
    { type: LyButtonService, },
    { type: NgZone, },
    { type: LyBgColorAndRaised, decorators: [{ type: Optional },] },
];
LyButton.propDecorators = {
    "outlined": [{ type: Input },],
    "rippleSensitive": [{ type: Input, args: ['sensitive',] },],
    "buttonContent": [{ type: ViewChild, args: ['content',] },],
    "disabled": [{ type: Input },],
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class LyButtonModule {
}
LyButtonModule.decorators = [
    { type: NgModule, args: [{
                imports: [CommonModule, LyRippleModule, LyCommonModule],
                exports: [LyButton],
                declarations: [LyButton]
            },] },
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * Generated bundle index. Do not edit.
 */

export { LyButton, LyButtonModule, LyButtonService as Éµa };
//# sourceMappingURL=alyle-ui-button.js.map
