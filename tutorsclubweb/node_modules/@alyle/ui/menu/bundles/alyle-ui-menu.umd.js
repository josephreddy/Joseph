(function (global, factory) {
	typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('rxjs'), require('@angular/core'), require('@angular/platform-browser'), require('@angular/animations'), require('@alyle/ui'), require('@angular/forms'), require('@angular/common')) :
	typeof define === 'function' && define.amd ? define('ly.menu', ['exports', 'rxjs', '@angular/core', '@angular/platform-browser', '@angular/animations', '@alyle/ui', '@angular/forms', '@angular/common'], factory) :
	(factory((global.ly = global.ly || {}, global.ly.menu = {}),global.rxjs,global.ng.core,global.ng.platformBrowser,global.ng.animations,global.ly.core,global.ng.forms,global.ng.common));
}(this, (function (exports,rxjs,core,platformBrowser,animations,ui,forms,common) { 'use strict';

var Origin = /** @class */ (function () {
    function Origin() {
    }
    return Origin;
}());
var LyTemplateMenu = /** @class */ (function () {
    function LyTemplateMenu(_viewContainerRef) {
        this._viewContainerRef = _viewContainerRef;
    }
    LyTemplateMenu.prototype.ngOnInit = function () {
    };
    LyTemplateMenu.prototype.tmpl = function (template) {
        this._vcr.createEmbeddedView(template);
    };
    LyTemplateMenu.prototype.ngOnDestroy = function () {
        console.log('desst');
    };
    return LyTemplateMenu;
}());
LyTemplateMenu.decorators = [
    { type: core.Component, args: [{
                selector: 'ly-template-menu',
                template: "\n  <div #container></div>\n  ",
                styles: ["\n    :host {\n      position: absolute;\n      display: block;\n      top: 0;\n      left: 0;\n      right: 0;\n      bottom: 0;\n    }\n  "]
            },] },
];
LyTemplateMenu.ctorParameters = function () { return [
    { type: core.ViewContainerRef, },
]; };
LyTemplateMenu.propDecorators = {
    "_vcr": [{ type: core.ViewChild, args: ['container', { read: core.ViewContainerRef },] },],
};
var LyMenu = /** @class */ (function () {
    function LyMenu(elementRef, _viewContainerRef, domService, cd, sanitizer) {
        this.elementRef = elementRef;
        this._viewContainerRef = _viewContainerRef;
        this.domService = domService;
        this.cd = cd;
        this.sanitizer = sanitizer;
        this.isIni = false;
        this.stateBg = false;
        this.widthTarget = 0;
        this.heightTarget = 0;
        this.rootMenu = {
            top: 0,
            left: 0,
        };
        this.opened = false;
        this._anchorOrigin = { horizontal: 'left', vertical: 'top' };
        this._targetOrigin = { horizontal: 'left', vertical: 'top' };
        this._targetPosition = new rxjs.BehaviorSubject(null);
        this.open = new core.EventEmitter();
        this.close = new core.EventEmitter();
    }
    LyMenu.prototype.ngOnChanges = function (changes) {
        if (changes['_targetOrigin']) {
            Promise.resolve(null).then(function () {
            });
        }
    };
    LyMenu.prototype.updateTargetPosition = function () {
        var vertical = '0%', horizontal = '0%';
        if (this._targetOrigin.horizontal === 'middle') {
            horizontal = '-50%';
        }
        else if (this._targetOrigin.horizontal === 'right') {
            horizontal = '-100%';
        }
        if (this._targetOrigin.vertical === 'center') {
            vertical = '-50%';
        }
        else if (this._targetOrigin.vertical === 'bottom') {
            vertical = '-100%';
        }
        var menuStyle = this.sanitizer.bypassSecurityTrustStyle("translate3d(" + horizontal + ", " + vertical + ", 0) scale3d(1, 1, 1)");
        this._targetPosition.next((menuStyle));
    };
    LyMenu.prototype.target = function (_element) {
        var element = _element;
        return {
            'width': element.offsetWidth || 0,
            'height': element.offsetHeight || 0,
            'left': element.offsetWidth || 0,
            'top': 0,
        };
    };
    Object.defineProperty(LyMenu.prototype, "rootStylePosition", {
        get: function () {
            var top = 0;
            var left = 0;
            if (this._anchorOrigin.vertical === 'center') {
                top = (this.rootMenu.height / 2);
            }
            else if (this._anchorOrigin.vertical === 'bottom') {
                top = (this.rootMenu.height);
            }
            if (this._anchorOrigin.horizontal === 'middle') {
                left = (this.rootMenu.width / 2);
            }
            else if (this._anchorOrigin.horizontal === 'right') {
                left = (this.rootMenu.width);
            }
            return {
                top: top,
                left: left,
            };
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(LyMenu.prototype, "rootStyle", {
        get: function () {
            var menuPosition = this.rootMenu;
            var positionFinal = menuPosition;
            if (this._anchorOrigin) {
            }
            return positionFinal;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(LyMenu.prototype, "targetOrigin", {
        get: function () {
            return (this._targetOrigin.horizontal === 'middle' ? 'center' : this._targetOrigin.horizontal) + " " + this._targetOrigin.vertical + " 0";
        },
        enumerable: true,
        configurable: true
    });
    LyMenu.prototype.toggleMenu = function () {
        this.opened === false ? this.showMenu() : this.hiddeMenu();
    };
    LyMenu.prototype.showMenu = function () {
        this.menuAnimationsState = 'in';
        this.menuContentRef = this.domService.attach(this._viewContainerRef, LyTemplateMenu, this.templateRef);
        this.updateTargetPosition();
        this.opened = true;
        this.stateBg = true;
        this.open.emit(null);
    };
    LyMenu.prototype.hiddeMenu = function () {
        this.close.emit(null);
        this.opened = false;
        this.stateBg = false;
        this._destroyMenu();
    };
    LyMenu.prototype._destroyMenu = function () {
        this.domService.destroyRef(this.menuContentRef, 0);
    };
    LyMenu.prototype.ngOnInit = function () {
    };
    LyMenu.prototype.ngAfterViewInit = function () {
    };
    LyMenu.prototype.ngOnDestroy = function () {
        if (ui.Platform.isBrowser) {
            this._destroyMenu();
        }
    };
    return LyMenu;
}());
LyMenu.decorators = [
    { type: core.Component, args: [{
                selector: 'ly-menu',
                styles: [".ly-menu{display:inline-block;position:fixed;padding:8px 0;max-height:248px;overflow:auto;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;z-index:1000;opacity:0;min-width:84px;width:-webkit-fit-content;width:-moz-fit-content;width:fit-content;-webkit-transform:scale3d(0,0,0);transform:scale3d(0,0,0);-webkit-box-shadow:rgba(0,0,0,.15) 0 2px 6px,rgba(0,0,0,.15) 0 1px 4px;box-shadow:rgba(0,0,0,.15) 0 2px 6px,rgba(0,0,0,.15) 0 1px 4px;border-radius:2px;-webkit-transition:opacity 275ms ease-in 0s,-webkit-transform 175ms cubic-bezier(.23,1,.32,1) 0s;transition:opacity 275ms ease-in 0s,-webkit-transform 175ms cubic-bezier(.23,1,.32,1) 0s;transition:transform 175ms cubic-bezier(.23,1,.32,1) 0s,opacity 275ms ease-in 0s;transition:transform 175ms cubic-bezier(.23,1,.32,1) 0s,opacity 275ms ease-in 0s,-webkit-transform 175ms cubic-bezier(.23,1,.32,1) 0s;will-change:opacity,transform;font-family:Roboto,\"Helvetica Neue\",sans-serif}.ly-list-x{z-index:0;max-height:100%}.ly-menu /deep/ ly-menu{position:absolute}.ly-menu.ly-list{position:relative;-webkit-transform:scale3d(1,1,1);transform:scale3d(1,1,1);-webkit-transition:all 0s linear 0s;transition:all 0s linear 0s}:host.ly-list .ly-menu{position:relative;-webkit-transform:scale(1,1);transform:scale(1,1);-webkit-transition:all 0s linear 0s;transition:all 0s linear 0s;opacity:1}:host.ly-list .ly-background-menu{pointer-events:none}.ly-menu.ly-menu-opened{-webkit-transform:scale3d(1,1,1);transform:scale3d(1,1,1);opacity:1}.ly-background-menu{position:absolute;top:0;bottom:0;left:0;right:0;background:rgba(0,0,0,0);z-index:999;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;pointer-events:none}.ly-background-on{pointer-events:all!important;pointer-events:auto!important}::ng-deep button[ly-menu-item]{display:block;min-height:48px;border-radius:0;width:100%}"],
                animations: [
                    animations.trigger('menu', [
                        animations.transition(':leave', animations.animate('150ms 50ms linear', animations.style({ opacity: 0 }))),
                        animations.state('in', animations.style({
                            opacity: 1
                        })),
                        animations.transition(':enter', animations.animate('100ms linear'))
                    ])
                ],
                template: "\n  <ng-template>\n    <div #_menu [@menu]=\"menuAnimationsState\"\n      class=\"ly-menu\"\n      bg=\"menu:bg\"\n      color=\"colorText\"\n      [style.transform-origin]=\"targetOrigin\"\n      [style.top.px]=\"rootStyle.top + rootStylePosition.top\"\n      [style.left.px]=\"rootStyle.left + rootStylePosition.left\"\n      [style.transform]=\"_targetPosition | async\">\n      <div class=\"ly-menu-content\">\n        <ng-content></ng-content>\n      </div>\n    </div>\n    <div\n    class=\"ly-background-menu ly-background-on\"\n    (click)=\"hiddeMenu()\"></div>\n  </ng-template>\n  ",
                exportAs: 'lyMenu',
                preserveWhitespaces: false
            },] },
];
LyMenu.ctorParameters = function () { return [
    { type: core.ElementRef, },
    { type: core.ViewContainerRef, },
    { type: ui.DomService, },
    { type: core.ChangeDetectorRef, },
    { type: platformBrowser.DomSanitizer, },
]; };
LyMenu.propDecorators = {
    "opened": [{ type: core.Input },],
    "_anchorOrigin": [{ type: core.Input, args: ['anchor-origin',] },],
    "_targetOrigin": [{ type: core.Input, args: ['target-origin',] },],
    "_menuElement": [{ type: core.ViewChild, args: ['_menu',] },],
    "templateRef": [{ type: core.ViewChild, args: [core.TemplateRef,] },],
    "open": [{ type: core.Output },],
    "close": [{ type: core.Output },],
};
var LyMenuTriggerFor = /** @class */ (function () {
    function LyMenuTriggerFor(elementRef) {
        this.elementRef = elementRef;
    }
    LyMenuTriggerFor.prototype.targetPosition = function () {
        var element = this.elementRef.nativeElement;
        var rect = element.getBoundingClientRect();
        var result = {
            'width': rect.width,
            'height': rect.height,
            'left': rect.left,
            'top': rect.top,
        };
        return result;
    };
    LyMenuTriggerFor.prototype._handleClick = function (e) {
        this.lyMenuTriggerFor.rootMenu = this.targetPosition();
        this.lyMenuTriggerFor.toggleMenu();
    };
    return LyMenuTriggerFor;
}());
LyMenuTriggerFor.decorators = [
    { type: core.Directive, args: [{
                selector: '[lyMenuTriggerFor]',
                host: {
                    '(click)': '_handleClick($event)'
                }
            },] },
];
LyMenuTriggerFor.ctorParameters = function () { return [
    { type: core.ElementRef, },
]; };
LyMenuTriggerFor.propDecorators = {
    "lyMenuTriggerFor": [{ type: core.Input, args: ['lyMenuTriggerFor',] },],
};
var LyMenuModule = /** @class */ (function () {
    function LyMenuModule() {
    }
    return LyMenuModule;
}());
LyMenuModule.decorators = [
    { type: core.NgModule, args: [{
                imports: [common.CommonModule, forms.FormsModule, ui.LyCommonModule, ui.LxDomModule],
                exports: [LyMenu, LyMenuTriggerFor],
                declarations: [LyMenu, LyMenuTriggerFor, LyTemplateMenu],
            },] },
];

exports.Origin = Origin;
exports.LyTemplateMenu = LyTemplateMenu;
exports.LyMenu = LyMenu;
exports.LyMenuTriggerFor = LyMenuTriggerFor;
exports.LyMenuModule = LyMenuModule;

Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=alyle-ui-menu.umd.js.map
