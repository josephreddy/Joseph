(function (global, factory) {
	typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('rxjs'), require('@angular/common'), require('@angular/forms')) :
	typeof define === 'function' && define.amd ? define('ly.resizingCroppingImages', ['exports', '@angular/core', 'rxjs', '@angular/common', '@angular/forms'], factory) :
	(factory((global.ly = global.ly || {}, global.ly.resizingCroppingImages = {}),global.ng.core,global.rxjs,global.ng.common,global.ng.forms));
}(this, (function (exports,core,rxjs,common,forms) { 'use strict';

/*! *****************************************************************************
Copyright (c) Microsoft Corporation. All rights reserved.
Licensed under the Apache License, Version 2.0 (the "License"); you may not use
this file except in compliance with the License. You may obtain a copy of the
License at http://www.apache.org/licenses/LICENSE-2.0
THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
MERCHANTABLITY OR NON-INFRINGEMENT.
See the Apache Version 2.0 License for specific language governing permissions
and limitations under the License.
***************************************************************************** */
/* global Reflect, Promise */










function __read(o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
}
function __spread() {
    for (var ar = [], i = 0; i < arguments.length; i++)
        ar = ar.concat(__read(arguments[i]));
    return ar;
}

var ImageResolution = {
    Default: 0,
    OriginalImage: 1,
};
ImageResolution[ImageResolution.Default] = "Default";
ImageResolution[ImageResolution.OriginalImage] = "OriginalImage";
var CONFIG_DEFAULT = ({
    width: 250,
    height: 200,
    output: ImageResolution.Default
});
var LyResizingCroppingImages = /** @class */ (function () {
    function LyResizingCroppingImages(elementRef, cd) {
        var _this = this;
        this.elementRef = elementRef;
        this.cd = cd;
        this.img = new rxjs.BehaviorSubject(null);
        this._src = new rxjs.BehaviorSubject(null);
        this.config = CONFIG_DEFAULT;
        this.loaded = new core.EventEmitter();
        this.cropped = new core.EventEmitter();
        this.error = new core.EventEmitter();
        this._dragData = new rxjs.Subject();
        this.zoomScale = .1;
        this.dragData = this._dragData.asObservable();
        var img = this.img;
        img.subscribe(function (imgElement) {
            if (imgElement) {
                _this._img = imgElement;
                var minScale = {
                    width: _this.config.width / _this._img.width * 100,
                    height: _this.config.height / _this._img.height * 100
                };
                _this.zoomScale = Math.max(minScale.width, minScale.height) / 100;
                _this.fit();
                _this.cd.markForCheck();
            }
        });
    }
    LyResizingCroppingImages.prototype.selectInputEvent = function (img) {
        var _this = this;
        var _img = (img.target);
        if (_img.files.length !== 1) {
            return;
        }
        var fileReader = new FileReader();
        this.fileName = _img.value.replace(/.*(\/|\\)/, '');
        this.defaultType = null;
        if (!this.config.type) {
            this.defaultType = _img.files[0].type;
        }
        this.isLoaded = false;
        this.isCropped = false;
        this._dragData.next(null);
        fileReader.addEventListener('loadend', function (loadEvent) {
            var originalImageUrl = ((loadEvent.target)).result;
            _this.setImageUrl(originalImageUrl);
            _this.cd.markForCheck();
        });
        fileReader.readAsDataURL(_img.files[0]);
    };
    LyResizingCroppingImages.prototype.fixedNum = function (num) {
        return parseFloat(num.toFixed(0));
    };
    LyResizingCroppingImages.prototype.setScale = function (size) {
        console.log('setScale', size);
        this.scale = size;
        size = size * 100;
        var img = this.imgContainer.nativeElement.firstElementChild;
        var initialImg = this._img;
        var width = this.fixedNum(initialImg.width * size / 100);
        var height = this.fixedNum(initialImg.height * size / 100);
        this._dragData.next({
            width: width + "px",
            height: height + "px",
            transform: this.customCenter(width, height)
        });
    };
    LyResizingCroppingImages.prototype.customCenter = function (width, height) {
        var root = (this.elementRef.nativeElement);
        var w = (root.offsetWidth - width) / 2;
        var h = (root.offsetHeight - height) / 2;
        return "translate3d(" + w + "px, " + h + "px, 0)";
    };
    LyResizingCroppingImages.prototype['1:1'] = function () {
        this.setScale(1);
    };
    LyResizingCroppingImages.prototype.fitToScreen = function () {
        var container = (this.elementRef.nativeElement);
        var min = {
            width: container.offsetWidth,
            height: container.offsetHeight
        };
        var size = {
            width: this._img.width,
            height: this._img.height
        };
        var minScale = {
            width: min.width / size.width * 100,
            height: min.height / size.height * 100
        };
        var result = Math.max(minScale.width, minScale.height) / 100;
        this.setScale(result);
    };
    LyResizingCroppingImages.prototype.fit = function () {
        var minScale = {
            width: this.config.width / this._img.width * 100,
            height: this.config.height / this._img.height * 100
        };
        this.setScale(Math.max(minScale.width, minScale.height) / 100);
    };
    LyResizingCroppingImages.prototype._moveStart = function (event) {
        this.eventDirection = null;
        var rect = this.imgContainer.nativeElement.getBoundingClientRect();
        var hostRect = this.elementRef.nativeElement.getBoundingClientRect();
        var target;
        if (event.type === 'touchstart') {
            target = {
                x: event.targetTouches[0].clientX,
                y: event.targetTouches[0].clientY
            };
        }
        else {
            target = {
                x: event.clientX,
                y: event.clientY
            };
        }
        this.offset = {
            x: target.x - rect.x,
            y: target.y - rect.y,
            left: ((rect)).left - hostRect.x,
            top: ((rect)).top - hostRect.y
        };
    };
    LyResizingCroppingImages.prototype._move = function (event) {
        if (event.additionalEvent) {
            this.eventDirection = event.additionalEvent;
        }
        var x, y;
        var hostRect = this.elementRef.nativeElement.getBoundingClientRect();
        var rect = this.imgContainer.nativeElement.getBoundingClientRect();
        if (event.srcEvent.shiftKey) {
            if (Math.abs(event.deltaX) === Math.max(Math.abs(event.deltaX), Math.abs(event.deltaY))) {
                y = this.offset.top;
            }
            else {
                x = this.offset.left;
            }
        }
        if (x === undefined) {
            x = event.center.x - hostRect.x - (this.offset.x);
        }
        if (y === undefined) {
            y = event.center.y - hostRect.y - (this.offset.y);
        }
        this._dragData.next({
            width: this.imgContainer.nativeElement.offsetWidth,
            height: this.imgContainer.nativeElement.offsetHeight,
            transform: "translate3d(" + x + "px, " + y + "px, 0)"
        });
    };
    LyResizingCroppingImages.prototype.roundNumber = function (num) {
        return Math.round(num * 100000) / 100000;
    };
    LyResizingCroppingImages.prototype.zoomIn = function () {
        var scale = this.roundNumber(this.scale + .05);
        if (scale > 0 && scale <= 1) {
            this.setScale(scale);
        }
        else {
            this.setScale(1);
        }
    };
    LyResizingCroppingImages.prototype.zoomOut = function () {
        var scale = this.roundNumber(this.scale - .05);
        if (scale > this.zoomScale && scale <= 1) {
            this.setScale(scale);
        }
        else {
            this.fit();
        }
    };
    LyResizingCroppingImages.prototype.ngAfterContentInit = function () {
        this.setImageUrl(this.src);
    };
    LyResizingCroppingImages.prototype.center = function (img) {
        if (!img) {
            img = this.imgContainer.nativeElement.firstElementChild;
        }
        var root = (this.elementRef.nativeElement);
        var w = (root.offsetWidth - img.width) / 2;
        var h = (root.offsetHeight - img.height) / 2;
        var result = {
            width: img.width + "px",
            height: img.height + "px",
            transform: this.customCenter(img.width, img.height)
        };
        this._dragData.next(result);
    };
    LyResizingCroppingImages.prototype.setImageUrl = function (src) {
        var _this = this;
        this.src = src;
        if (!src) {
            return;
        }
        var img = new Image;
        img.src = src;
        img.addEventListener('error', function (err) {
            _this.error.emit(null);
        });
        img.addEventListener('load', function () {
            _this.img.next(img);
            _this.loaded.emit(null);
            _this.isLoaded = true;
            _this.cd.markForCheck();
        });
    };
    LyResizingCroppingImages.prototype.max = function () {
        var values = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            values[_i] = arguments[_i];
        }
        return Math.max.apply(Math, __spread(values));
    };
    LyResizingCroppingImages.prototype.imageSmoothingQuality = function (img, config, quality) {
        var numSteps = Math.ceil(Math.log(this.max(img.width, img.height) / this.max(config.height, config.width)) / Math.log(2)) - 1;
        numSteps = numSteps <= 0 ? 0 : numSteps;
        var steps = Array.from(Array(numSteps).keys());
        var octx = img.getContext('2d');
        var q = Math.pow(quality * 10, numSteps) / Math.pow(10, numSteps);
        if (numSteps) {
            var w_1 = img.width * quality;
            var h_1 = img.height * quality;
            octx.globalCompositeOperation = 'copy';
            ((steps)).forEach(function (a, b) {
                octx.drawImage(img, 0, 0, w_1, h_1);
            });
        }
        var oc = document.createElement('canvas'), ctx = oc.getContext('2d');
        oc.width = config.width;
        oc.height = config.height;
        ctx.drawImage(img, 0, 0, img.width * (q), img.height * (q), 0, 0, oc.width, oc.height);
        return oc;
    };
    LyResizingCroppingImages.prototype.crop = function () {
        return {
            base64Image: this.cropp(),
            type: this.defaultType || this.config.type
        };
    };
    LyResizingCroppingImages.prototype.cropp = function () {
        var myConfig = Object.assign({}, CONFIG_DEFAULT, this.config);
        var canvasElement = document.createElement('canvas');
        var rect = (this.croppingContainer.nativeElement.getBoundingClientRect());
        var img = (this.imgContainer.nativeElement.firstElementChild.getBoundingClientRect());
        var left = (rect.left - img.left);
        var top = (rect.top - img.top);
        var config = {
            width: myConfig.width,
            height: myConfig.height
        };
        var configCanvas = {
            width: this._img.width,
            height: this._img.height
        };
        canvasElement.width = config.width / this.scale;
        canvasElement.height = config.height / this.scale;
        var ctx = canvasElement.getContext('2d');
        ctx.drawImage(this._img, -(left / this.scale), -(top / this.scale));
        var result = canvasElement;
        if (myConfig.output === 0) {
            result = this.imageSmoothingQuality(result, config, 0.5);
        }
        else if (typeof myConfig.output === 'object') {
            result = this.imageSmoothingQuality(result, myConfig.output, 0.5);
        }
        var url;
        if (myConfig.type) {
            url = result.toDataURL("image/" + myConfig.type);
        }
        else {
            url = result.toDataURL(this.defaultType);
        }
        this.result = (url);
        this.cropped.emit({
            base64Image: url,
            type: this.defaultType || myConfig.type
        });
        this.isCropped = true;
        return url;
    };
    return LyResizingCroppingImages;
}());
LyResizingCroppingImages.decorators = [
    { type: core.Component, args: [{
                changeDetection: core.ChangeDetectionStrategy.OnPush,
                preserveWhitespaces: false,
                selector: 'ly-cropping',
                styles: [":host{-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;display:-webkit-box;display:-ms-flexbox;display:flex;overflow:hidden;position:relative;-webkit-box-pack:center;-ms-flex-pack:center;justify-content:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center}.ly-img-container{cursor:move;position:absolute;top:0;left:0}.ly-img-container img{width:100%;height:100%;pointer-events:none}.ly-cropping-container{z-index:11;position:absolute;pointer-events:none;-webkit-box-shadow:0 0 0 20000px rgba(0,0,0,.29);box-shadow:0 0 0 20000px rgba(0,0,0,.29)}.ly-cropping-container::after{content:'';position:absolute;top:0;left:0;right:0;bottom:0;border:2px solid #fff}.ly-cropp-content{display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-box-pack:center;-ms-flex-pack:center;justify-content:center;position:absolute;top:0;left:0;right:0;bottom:0}.ly-cropp-content /deep/ :not(input){pointer-events:none}.ly-cropp-content input{position:absolute;background:0 0;opacity:0;top:0;left:0;right:0;bottom:0;width:100%;height:100%}"],
                template: "<div #_croppingContainer *ngIf=\"isLoaded; else content\" class=\"ly-cropping-container\" [ngStyle]=\"{\n    width: config.width + 'px',\n    height: config.height + 'px'\n}\"></div>\n<div class=\"ly-img-container\" #_imgContainer\n(pan)=\"_move($event)\"\n(touchstart)=\"_moveStart($event)\"\n(mousedown)=\"_moveStart($event)\"\n[ngStyle]=\"dragData | async\">\n  <img *ngIf=\"isLoaded\"\n  [src]=\"src\">\n</div>\n<ng-template #content>\n  <div class=\"ly-cropp-content\">\n    <input #_fileInput type=\"file\" (change)=\"selectInputEvent($event)\" accept=\"image/*\">\n    <ng-content></ng-content>\n  </div>\n</ng-template>",
            },] },
];
LyResizingCroppingImages.ctorParameters = function () { return [
    { type: core.ElementRef, },
    { type: core.ChangeDetectorRef, },
]; };
LyResizingCroppingImages.propDecorators = {
    "imgContainer": [{ type: core.ViewChild, args: ['_imgContainer',] },],
    "croppingContainer": [{ type: core.ViewChild, args: ['_croppingContainer',] },],
    "src": [{ type: core.Input },],
    "format": [{ type: core.Input },],
    "config": [{ type: core.Input },],
    "loaded": [{ type: core.Output },],
    "cropped": [{ type: core.Output },],
    "error": [{ type: core.Output },],
};
var LyResizingCroppingImageModule = /** @class */ (function () {
    function LyResizingCroppingImageModule() {
    }
    return LyResizingCroppingImageModule;
}());
LyResizingCroppingImageModule.decorators = [
    { type: core.NgModule, args: [{
                imports: [common.CommonModule, forms.FormsModule],
                exports: [LyResizingCroppingImages],
                declarations: [LyResizingCroppingImages]
            },] },
];

exports.ImageResolution = ImageResolution;
exports.LyResizingCroppingImages = LyResizingCroppingImages;
exports.LyResizingCroppingImageModule = LyResizingCroppingImageModule;

Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=alyle-ui-resizing-cropping-images.umd.js.map
