{
  "version": 3,
  "file": "ngx-mat-select-search.umd.min.js",
  "sources": [
    "ng://ngx-mat-select-search/out/mat-select-search-clear.directive.ts",
    "ng://ngx-mat-select-search/out/mat-select-search.component.ts",
    "ng://ngx-mat-select-search/out/ngx-mat-select-search.module.ts"
  ],
  "sourcesContent": [
    "import { Directive } from '@angular/core';\n\n/**\n * Directive for providing a custom clear-icon.\n * e.g.\n * <ngx-mat-select-search [formControl]=\"bankFilterCtrl\">\n *   <mat-icon ngxMatSelectSearchClear>delete</mat-icon>\n * </ngx-mat-select-search>\n */\n@Directive({\n    selector: '[ngxMatSelectSearchClear]'\n})\nexport class MatSelectSearchClearDirective {}\n",
    "/**\n * Copyright (c) 2018 Bithost GmbH All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  AfterViewInit,\n  ChangeDetectionStrategy, ChangeDetectorRef,\n  Component, ElementRef, EventEmitter, forwardRef, Inject, Input, OnDestroy, OnInit, QueryList,\n  ViewChild,\n  ContentChild\n} from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { MatOption, MatSelect } from '@angular/material';\nimport { Subject } from 'rxjs';\nimport {delay, take, takeUntil} from 'rxjs/operators';\nimport { MatSelectSearchClearDirective } from './mat-select-search-clear.directive';\n\n/* tslint:disable:member-ordering component-selector */\n/**\n * Component providing an input field for searching MatSelect options.\n *\n * Example usage:\n *\n * interface Bank {\n *  id: string;\n *  name: string;\n * }\n *\n * @Component({\n *   selector: 'my-app-data-selection',\n *   template: `\n *     <mat-form-field>\n *       <mat-select [formControl]=\"bankCtrl\" placeholder=\"Bank\">\n *         <ngx-mat-select-search [formControl]=\"bankFilterCtrl\"></ngx-mat-select-search>\n *         <mat-option *ngFor=\"let bank of filteredBanks | async\" [value]=\"bank.id\">\n *           {{bank.name}}\n *         </mat-option>\n *       </mat-select>\n *     </mat-form-field>\n *   `\n * })\n * export class DataSelectionComponent implements OnInit, OnDestroy {\n *\n *   // control for the selected bank\n *   public bankCtrl: FormControl = new FormControl();\n *   // control for the MatSelect filter keyword\n *   public bankFilterCtrl: FormControl = new FormControl();\n *\n *   // list of banks\n *   private banks: Bank[] = [{name: 'Bank A', id: 'A'}, {name: 'Bank B', id: 'B'}, {name: 'Bank C', id: 'C'}];\n *   // list of banks filtered by search keyword\n *   public filteredBanks: ReplaySubject<Bank[]> = new ReplaySubject<Bank[]>(1);\n *\n *   // Subject that emits when the component has been destroyed.\n *   private _onDestroy = new Subject<void>();\n *\n *\n *   ngOnInit() {\n *     // load the initial bank list\n *     this.filteredBanks.next(this.banks.slice());\n *     // listen for search field value changes\n *     this.bankFilterCtrl.valueChanges\n *       .pipe(takeUntil(this._onDestroy))\n *       .subscribe(() => {\n *         this.filterBanks();\n *       });\n *   }\n *\n *   ngOnDestroy() {\n *     this._onDestroy.next();\n *     this._onDestroy.complete();\n *   }\n *\n *   private filterBanks() {\n *     if (!this.banks) {\n *       return;\n *     }\n *\n *     // get the search keyword\n *     let search = this.bankFilterCtrl.value;\n *     if (!search) {\n *       this.filteredBanks.next(this.banks.slice());\n *       return;\n *     } else {\n *       search = search.toLowerCase();\n *     }\n *\n *     // filter the banks\n *     this.filteredBanks.next(\n *       this.banks.filter(bank => bank.name.toLowerCase().indexOf(search) > -1)\n *     );\n *   }\n * }\n */\n@Component({\n  selector: 'ngx-mat-select-search',\n  template: `<!-- Placeholder to adjust vertical offset of the mat-option elements -->\n<input matInput class=\"mat-select-search-input mat-select-search-hidden\"/>\n\n<!-- Note: the  mat-datepicker-content mat-tab-header are needed to inherit the material theme colors, see PR #22 -->\n<div\n      #innerSelectSearch\n      class=\"mat-select-search-inner mat-typography mat-datepicker-content mat-tab-header\"\n      [ngClass]=\"{'mat-select-search-inner-multiple': matSelect.multiple}\">\n  <input matInput\n         class=\"mat-select-search-input\"\n         autocomplete=\"off\"\n         #searchSelectInput\n         (keydown)=\"_handleKeydown($event)\"\n         (input)=\"onInputChange($event.target.value)\"\n         (blur)=\"onBlur($event.target.value)\"\n         [placeholder]=\"placeholderLabel\"\n  />\n  <button mat-button *ngIf=\"value\"\n          mat-icon-button\n          aria-label=\"Clear\"\n          (click)=\"_reset(true)\"\n          class=\"mat-select-search-clear\">\n    <ng-content *ngIf=\"clearIcon; else defaultIcon\" select=\"[ngxMatSelectSearchClear]\"></ng-content>\n    <ng-template #defaultIcon>\n      <mat-icon>close</mat-icon>\n    </ng-template>\n  </button>\n</div>\n\n<div *ngIf=\"noEntriesFoundLabel && value && _options?.length === 0\"\n     class=\"mat-select-search-no-entries-found\">\n  {{noEntriesFoundLabel}}\n</div>\n<!--\nCopyright (c) 2018 Bithost GmbH All Rights Reserved.\n\nUse of this source code is governed by an MIT-style license that can be\nfound in the LICENSE file at https://angular.io/license\n-->\n`,\n  styles: [`.mat-select-search-hidden{visibility:hidden}.mat-select-search-inner{position:absolute;top:0;width:100%;border-bottom-width:1px;border-bottom-style:solid;z-index:100;font-size:inherit;-webkit-box-shadow:none;box-shadow:none;border-radius:0}.mat-select-search-inner.mat-select-search-inner-multiple{width:100%}/deep/ .mat-select-search-panel{-webkit-transform:none!important;transform:none!important;max-height:350px;overflow-x:hidden}.mat-select-search-input{padding:16px 36px 16px 16px;-webkit-box-sizing:border-box;box-sizing:border-box}.mat-select-search-no-entries-found{padding:16px}.mat-select-search-clear{position:absolute;right:4px;top:5px}/deep/ .cdk-overlay-pane-select-search{margin-top:-50px}`],\n  providers: [\n    {\n      provide: NG_VALUE_ACCESSOR,\n      useExisting: forwardRef(() => MatSelectSearchComponent),\n      multi: true\n    }\n  ],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatSelectSearchComponent implements OnInit, OnDestroy, AfterViewInit, ControlValueAccessor {\n\n  /** Label of the search placeholder */\n  @Input() placeholderLabel = 'Suche';\n\n  /** Label to be shown when no entries are found. Set to null if no message should be shown. */\n  @Input() noEntriesFoundLabel = 'Keine Optionen gefunden';\n\n  /**\n    * Whether or not the search field should be cleared after the dropdown menu is closed.\n    * Useful for server-side filtering. See [#3](https://github.com/bithost-gmbh/ngx-mat-select-search/issues/3)\n    */\n  @Input() clearSearchInput = true;\n\n  /** Reference to the search input field */\n  @ViewChild('searchSelectInput', {read: ElementRef}) searchSelectInput: ElementRef;\n\n  /** Reference to the search input field */\n  @ViewChild('innerSelectSearch', {read: ElementRef}) innerSelectSearch: ElementRef;\n\n  /** Reference to custom search input clear icon */\n  @ContentChild(MatSelectSearchClearDirective) clearIcon: MatSelectSearchClearDirective;\n\n  /** Current search value */\n  get value(): string {\n    return this._value;\n  }\n  private _value: string;\n\n  onChange: Function = (_: any) => {};\n  onTouched: Function = (_: any) => {};\n\n  /** Reference to the MatSelect options */\n  public _options: QueryList<MatOption>;\n\n  /** Previously selected values when using <mat-select [multiple]=\"true\">*/\n  private previousSelectedValues: any[];\n\n  /** Whether the backdrop class has been set */\n  private overlayClassSet = false;\n\n  /** Event that emits when the current value changes */\n  private change = new EventEmitter<string>();\n\n  /** Subject that emits when the component has been destroyed. */\n  private _onDestroy = new Subject<void>();\n\n\n  constructor(@Inject(MatSelect) public matSelect: MatSelect,\n              private changeDetectorRef: ChangeDetectorRef) {\n\n\n  }\n\n  ngOnInit() {\n    // set custom panel class\n    const panelClass = 'mat-select-search-panel';\n    if (this.matSelect.panelClass) {\n      if (Array.isArray(this.matSelect.panelClass)) {\n        this.matSelect.panelClass.push(panelClass);\n      } else if (typeof this.matSelect.panelClass === 'string') {\n        this.matSelect.panelClass = [this.matSelect.panelClass, panelClass];\n      } else if (typeof this.matSelect.panelClass === 'object') {\n        this.matSelect.panelClass[panelClass] = true;\n      }\n    } else {\n      this.matSelect.panelClass = panelClass;\n    }\n\n    // when the select dropdown panel is opened or closed\n    this.matSelect.openedChange\n      .pipe(\n        delay(1),\n        takeUntil(this._onDestroy)\n      )\n      .subscribe((opened) => {\n        if (opened) {\n          // focus the search field when opening\n          this.getWidth();\n          this._focus();\n        } else {\n          // clear it when closing\n          this._reset();\n        }\n      });\n\n    // set the first item active after the options changed\n    this.matSelect.openedChange\n      .pipe(take(1))\n      .pipe(takeUntil(this._onDestroy))\n      .subscribe(() => {\n        this._options = this.matSelect.options;\n        this._options.changes\n          .pipe(takeUntil(this._onDestroy))\n          .subscribe(() => {\n            const keyManager = this.matSelect._keyManager;\n            if (keyManager && this.matSelect.panelOpen) {\n              // avoid \"expression has been changed\" error\n              setTimeout(() => {\n                keyManager.setFirstItemActive();\n                this.getWidth();\n              }, 1);\n            }\n          });\n      });\n\n    // detect changes when the input changes\n    this.change\n      .pipe(takeUntil(this._onDestroy))\n      .subscribe(() => {\n        this.changeDetectorRef.detectChanges();\n      });\n\n    this.initMultipleHandling();\n  }\n\n  ngOnDestroy() {\n    this._onDestroy.next();\n    this._onDestroy.complete();\n  }\n\n  ngAfterViewInit() {\n    this.setOverlayClass();\n\n    // update view when available options change\n    this.matSelect.options.changes\n      .pipe(takeUntil(this._onDestroy))\n      .subscribe(() => {\n        this.changeDetectorRef.markForCheck();\n      });\n  }\n\n  /**\n   * Handles the key down event with MatSelect.\n   * Allows e.g. selecting with enter key, navigation with arrow keys, etc.\n   * @param event\n   */\n  _handleKeydown(event: KeyboardEvent) {\n    if (event.keyCode === 32) {\n      // do not propagate spaces to MatSelect, as this would select the currently active option\n      event.stopPropagation();\n    }\n\n  }\n\n\n  writeValue(value: string) {\n    const valueChanged = value !== this._value;\n    if (valueChanged) {\n      this._value = value;\n      this.change.emit(value);\n    }\n  }\n\n  onInputChange(value) {\n    const valueChanged = value !== this._value;\n    if (valueChanged) {\n      this.initMultiSelectedValues();\n      this._value = value;\n      this.onChange(value);\n      this.change.emit(value);\n    }\n  }\n\n  onBlur(value: string) {\n    this.writeValue(value);\n    this.onTouched();\n  }\n\n  registerOnChange(fn: Function) {\n    this.onChange = fn;\n  }\n\n  registerOnTouched(fn: Function) {\n    this.onTouched = fn;\n  }\n\n  /**\n   * Focuses the search input field\n   */\n  public _focus() {\n    if (!this.searchSelectInput) {\n      return;\n    }\n    // save and restore scrollTop of panel, since it will be reset by focus()\n    // note: this is hacky\n    const panel = this.matSelect.panel.nativeElement;\n    const scrollTop = panel.scrollTop;\n\n    // focus\n    this.searchSelectInput.nativeElement.focus();\n\n    panel.scrollTop = scrollTop;\n  }\n\n  /**\n   * Resets the current search value\n   * @param focus whether to focus after resetting\n   */\n  public _reset(focus?: boolean) {\n    if (!this.searchSelectInput) {\n      return;\n    }\n    if (this.clearSearchInput) {\n      this.searchSelectInput.nativeElement.value = '';\n      this.onInputChange('');\n    }\n    if (focus) {\n      this._focus();\n    }\n  }\n\n  /**\n   * Sets the overlay class  to correct offsetY\n   * so that the selected option is at the position of the select box when opening\n   */\n  private setOverlayClass() {\n    if (this.overlayClassSet) {\n      return;\n    }\n    const overlayClass = 'cdk-overlay-pane-select-search';\n\n    this.matSelect.overlayDir.attach\n      .pipe(takeUntil(this._onDestroy))\n      .subscribe(() => {\n        // note: this is hacky, but currently there is no better way to do this\n        let element: HTMLElement = this.searchSelectInput.nativeElement;\n        let overlayElement: HTMLElement;\n        while (element = element.parentElement) {\n          if (element.classList.contains('cdk-overlay-pane')) {\n            overlayElement = element;\n            break;\n          }\n        }\n        if (overlayElement) {\n          overlayElement.classList.add(overlayClass);\n        }\n      });\n\n    this.overlayClassSet = true;\n  }\n\n\n  /**\n   * Initializes handling <mat-select [multiple]=\"true\">\n   * Note: to improve this code, mat-select should be extended to allow disabling resetting the selection while filtering.\n   */\n  private initMultipleHandling() {\n    // if <mat-select [multiple]=\"true\">\n    // store previously selected values and restore them when they are deselected\n    // because the option is not available while we are currently filtering\n    this.matSelect.valueChange\n      .pipe(takeUntil(this._onDestroy))\n      .subscribe((values) => {\n        if (this.matSelect.multiple) {\n          let restoreSelectedValues = false;\n          if (this._value && this._value.length\n            && this.previousSelectedValues && Array.isArray(this.previousSelectedValues)) {\n            if (!values || !Array.isArray(values)) {\n              values = [];\n            }\n            const optionValues = this.matSelect.options.map(option => option.value);\n            this.previousSelectedValues.forEach(previousValue => {\n              if (values.indexOf(previousValue) === -1 && optionValues.indexOf(previousValue) === -1) {\n                // if a value that was selected before is deselected and not found in the options, it was deselected\n                // due to the filtering, so we restore it.\n                values.push(previousValue);\n                restoreSelectedValues = true;\n              }\n            });\n          }\n\n          if (restoreSelectedValues) {\n            this.matSelect._onChange(values);\n          }\n\n          this.previousSelectedValues = values;\n        }\n      });\n  }\n\n  /**\n   *  Set the width of the innerSelectSearch to fit even custom scrollbars\n   *  And support all Operation Systems\n   */\n  private getWidth() {\n    if (!this.innerSelectSearch || !this.innerSelectSearch.nativeElement) {\n      return;\n    }\n    let element: HTMLElement = this.innerSelectSearch.nativeElement;\n    let panelElement: HTMLElement;\n    while (element = element.parentElement) {\n      if (element.classList.contains('mat-select-panel')) {\n        panelElement = element;\n        break;\n      }\n    }\n    if (panelElement) {\n      this.innerSelectSearch.nativeElement.style.width = panelElement.clientWidth + 'px';\n    }\n  }\n\n  /**\n   *  Initialize this.previousSelectedValues once the first filtering occurs.\n   */\n  initMultiSelectedValues() {\n    if (this.matSelect.multiple && !this._value) {\n      this.previousSelectedValues = this.matSelect.options\n        .filter(option => option.selected)\n        .map(option => option.value);\n    }\n  }\n\n}\n",
    "/**\n * Copyright (c) 2018 Bithost GmbH All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport { NgModule } from '@angular/core';\nimport { MatSelectSearchComponent } from './mat-select-search.component';\nimport { MatButtonModule, MatInputModule, MatIconModule } from '@angular/material';\nimport { CommonModule } from '@angular/common';\nimport { MatSelectSearchClearDirective } from './mat-select-search-clear.directive';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatButtonModule,\n    MatIconModule,\n    MatInputModule\n  ],\n  declarations: [\n    MatSelectSearchComponent,\n    MatSelectSearchClearDirective\n  ],\n  exports: [\n    MatSelectSearchComponent,\n    MatSelectSearchClearDirective\n  ]\n})\nexport class NgxMatSelectSearchModule { }\n"
  ],
  "names": [
    "MatSelectSearchClearDirective",
    "type",
    "Directive",
    "args",
    "selector",
    "MatSelectSearchComponent",
    "matSelect",
    "changeDetectorRef",
    "this",
    "placeholderLabel",
    "noEntriesFoundLabel",
    "clearSearchInput",
    "onChange",
    "_",
    "onTouched",
    "overlayClassSet",
    "change",
    "EventEmitter",
    "_onDestroy",
    "Subject",
    "Object",
    "defineProperty",
    "prototype",
    "get",
    "_value",
    "ngOnInit",
    "_this",
    "panelClass",
    "Array",
    "isArray",
    "push",
    "openedChange",
    "pipe",
    "delay",
    "takeUntil",
    "subscribe",
    "opened",
    "getWidth",
    "_focus",
    "_reset",
    "take",
    "_options",
    "options",
    "changes",
    "keyManager",
    "_keyManager",
    "panelOpen",
    "setTimeout",
    "setFirstItemActive",
    "detectChanges",
    "initMultipleHandling",
    "ngOnDestroy",
    "next",
    "complete",
    "ngAfterViewInit",
    "setOverlayClass",
    "markForCheck",
    "_handleKeydown",
    "event",
    "keyCode",
    "stopPropagation",
    "writeValue",
    "value",
    "emit",
    "onInputChange",
    "initMultiSelectedValues",
    "onBlur",
    "registerOnChange",
    "fn",
    "registerOnTouched",
    "searchSelectInput",
    "panel",
    "nativeElement",
    "scrollTop",
    "focus",
    "overlayDir",
    "attach",
    "overlayElement",
    "element",
    "parentElement",
    "classList",
    "contains",
    "add",
    "valueChange",
    "values",
    "multiple",
    "restoreSelectedValues_1",
    "length",
    "previousSelectedValues",
    "optionValues_1",
    "map",
    "option",
    "forEach",
    "previousValue",
    "indexOf",
    "_onChange",
    "innerSelectSearch",
    "panelElement",
    "style",
    "width",
    "clientWidth",
    "filter",
    "selected",
    "Component",
    "template",
    "styles",
    "providers",
    "provide",
    "NG_VALUE_ACCESSOR",
    "useExisting",
    "forwardRef",
    "multi",
    "changeDetection",
    "ChangeDetectionStrategy",
    "OnPush",
    "MatSelect",
    "decorators",
    "Inject",
    "ChangeDetectorRef",
    "Input",
    "ViewChild",
    "read",
    "ElementRef",
    "clearIcon",
    "ContentChild",
    "NgxMatSelectSearchModule",
    "NgModule",
    "imports",
    "CommonModule",
    "MatButtonModule",
    "MatIconModule",
    "MatInputModule",
    "declarations",
    "exports"
  ],
  "mappings": "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"
}
